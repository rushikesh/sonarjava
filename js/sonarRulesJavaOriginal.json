[{"rule":{"key":"squid:S1172","repo":"squid","name":"Unused method parameters should be removed","createdAt":"2014-06-27T22:32:54+0000","severity":"MAJOR","status":"READY","internalKey":"S1172","isTemplate":false,"tags":[],"sysTags":["misra","unused"],"lang":"java","langName":"Java","htmlDesc":"<p>Unused parameters are misleading. Whatever the value passed to such parameters is, the behavior will be the same.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nvoid doSomething(int a, int b) {     // \"b\" is unused\n  compute(a);\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nvoid doSomething(int a) { \n  compute(a);\n}\n</pre>\n\n<h2>Exceptions</h2>\n\n<p>Override and implementation methods are excluded, as are methods that are intended to be overridden.</p>\n\n<pre>\n@Override\nvoid doSomething(int a, int b) {     // no issue reported on b\n  compute(a);\n}\n\npublic void foo(String s) {\n  // designed to be extended but noop in standard case\n}\n\nprotected void bar(String s) {\n  //open-closed principle\n}\n\npublic void qix(String s) {\n  throw new UnsupportedOperationException(\"This method should be implemented in subclasses\");\n}\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:S1700","repo":"squid","name":"A field should not duplicate the name of its containing class","createdAt":"2014-06-27T22:32:54+0000","severity":"MAJOR","status":"READY","internalKey":"S1700","isTemplate":false,"tags":[],"sysTags":["brain-overload"],"lang":"java","langName":"Java","htmlDesc":"<p>It's confusing to have a class member with the same name (case differences aside) as its enclosing class. This is particularly so when you consider the common practice of naming a class instance for the class itself.</p>\n\n<p>Best practice dictates that any field or member with the same name as the enclosing class be renamed to be more descriptive of the particular aspect of the class it represents or holds.</p>\n\n<h2>Noncompliant Code Sample</h2>\n<pre>\npublic class Foo {\n  private String foo;\n\n  public String getFoo() { }\n}\n\nFoo foo = new Foo();\nfoo.getFoo() // what does this return?\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n  private String name;\n\n  public String getName() { }\n}\n\n//...\n\nFoo foo = new Foo();\nfoo.getName()\n</pre>\n\n<h2>Exception</h2>\n\n<p>When the type of the field is the containing class and that field is static, no issue is raised to allow singletons named like the type.</p>\n<pre>\npublic class Foo {\n...\n  private static Foo foo;\n  public Foo getInstance() {\n    if(foo==null){\n      foo = new Foo();\n    }\n    return foo;\n  }\n...\n}\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:S109","repo":"squid","name":"Magic numbers should not be used","createdAt":"2014-06-27T22:32:54+0000","severity":"MINOR","status":"READY","internalKey":"S109","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>A magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the number of iterations of a loops, to test the value of a property, etc.</p>\n\n<p>Using magic numbers may seem obvious and straightforward when you're writing a piece of code, but they are much less obvious and straightforward at debugging time.</p>\n\n<p>That is why magic numbers must be demystified by first being assigned to clearly named constants before being used.</p>\n\n<p>-1, 0 and 1 are not considered magic numbers.</p>\n\n<h2>Noncompliant Code Sample</h2>\n\n<pre>\npublic static void doSomething() {\n  for(int i = 0; i < 4; i++){                 //Non-Compliant, 4 is a magic number\n  ...\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\npublic static final int NUMBER_OF_CYCLES = 4;\npublic static void doSomething() {\n  for(int i = 0; i < NUMBER_OF_CYCLES ; i++){   //Compliant\n    ...\n  }\n}\n</pre>","defaultDebtChar":"CHANGEABILITY","defaultDebtSubChar":"DATA_CHANGEABILITY","debtChar":"CHANGEABILITY","debtSubChar":"DATA_CHANGEABILITY","debtCharName":"Changeability","debtSubCharName":"Data","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MINOR","params":[]}]},{"rule":{"key":"squid:S1213","repo":"squid","name":"The members of an interface declaration or class should appear in a pre-defined order","createdAt":"2014-05-23T09:38:18+0000","severity":"MINOR","status":"READY","internalKey":"S1213","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","htmlDesc":"<p>\nAccording to the Java Code Conventions as defined by Oracle, the parts of a class or interface declaration should appear in the following order in the source files:\n<ul>\n<li>Class and instance variables</li>\n<li>Constructors</li>\n<li>Methods</li>\n</ul>\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n  private int field = 0;\n  isTrue() {...}\n  public Foo() {...}                // Noncompliant, constructor defined after method\n  public static final int OPEN = 4; // Noncompliant, variable defined after method\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo{  // Compliant\n  public static final int OPEN = 4;\n  private int field = 0;\n  public Foo() {...}\n  public boolean isTrue() {...}\n}\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"READABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"READABILITY","debtCharName":"Maintainability","debtSubCharName":"Readability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MINOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MINOR","params":[]}]},{"rule":{"key":"squid:S1611","repo":"squid","name":"Parentheses should be removed from a single lambda input parameter when its type is inferred","createdAt":"2014-03-07T09:24:00+0000","severity":"MINOR","status":"READY","internalKey":"S1611","isTemplate":false,"tags":[],"sysTags":["java8"],"lang":"java","langName":"Java","htmlDesc":"<p>There are two possible syntaxes for a lambda having only one input parameter with an inferred type: with and without parentheses around that single parameter. The simpler syntax, without parentheses, is more compact and readable than the one with parentheses, and is therefore preferred.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n(x) -> x * 2\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nx -> x * 2\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"READABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"READABILITY","debtCharName":"Maintainability","debtSubCharName":"Readability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MINOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MINOR","params":[]}]},{"rule":{"key":"squid:S1488","repo":"squid","name":"Variables should not be declared and then immediately returned or thrown","createdAt":"2014-02-26T13:05:07+0000","severity":"MINOR","status":"READY","internalKey":"S1488","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>Declaring a variable only to immediately return or throw it is a bad practice.\nSome developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this variable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to know exactly what will be returned.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic long computeDurationInMilliseconds() {\n  long duration = (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n  return duration;\n}\n\npublic void doSomething() {\n  RuntimeException myException = new RuntimeException();\n  throw myException;\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\npublic long computeDurationInMilliseconds() {\n  return (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n}\n\npublic void doSomething() {\n  throw new RuntimeException();\n}\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"READABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"READABILITY","debtCharName":"Maintainability","debtSubCharName":"Readability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MINOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MINOR","params":[]}]},{"rule":{"key":"squid:S1602","repo":"squid","name":"Lamdbas containing only one statement should not nest this statement in a block","createdAt":"2014-02-26T13:05:07+0000","severity":"MAJOR","status":"READY","internalKey":"S1602","isTemplate":false,"tags":[],"sysTags":["java8"],"lang":"java","langName":"Java","htmlDesc":"<p>There are two ways to write lambdas that contain single statement, but one is definitely more compact and readable than the other.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\n x -> {System.out.println(x+1);}\n(a, b) -> { return a + b; }\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\n x -> System.out.println(x+1)\n(a, b) -> a + b\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"READABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"READABILITY","debtCharName":"Maintainability","debtSubCharName":"Readability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:S1596","repo":"squid","name":"Collections.emptyList(),emptyMap() and emptySet() should be used instead of Collections.EMPTY_LIST, EMPTY_MAP and EMPTY_SET","createdAt":"2014-02-26T13:05:07+0000","severity":"MAJOR","status":"READY","internalKey":"S1596","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>Since the introduction of generics in Java 5, it is recommenced to use generic types such as <code>List&lt;String&gt;</code> instead of raw ones such as just <code>List</code>. Assigning a raw type into a generic one is not type safe, and will generate a warning. The old <code>EMPTY_...</code> fields of the <code>Collections</code> class return raw types, whereas the newer <code>empty...()</code> methods return generic ones.</p>\n\nDevelopers will also more easily find the <code>emptyIterator()</code> and <code>emptyListIterator()</code> methods for which there is no field equivalent if they are used to call the methods.\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; collection1 = Collections.EMPTY_LIST;\nMap&lt;String, String&gt; collection2 = Collections.EMPTY_MAP;\nSet&lt;String&gt; collection3 = Collections.EMPTY_SET;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nList&lt;String&gt; collection1 = Collections.emptyList();\nMap&lt;String, String&gt; collection2 = Collections.emptyMap();\nSet&lt;String&gt; collection3 = Collections.emptySet();\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"READABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"READABILITY","debtCharName":"Maintainability","debtSubCharName":"Readability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:DM_BOXED_PRIMITIVE_FOR_PARSING","repo":"findbugs","name":"Boxing/unboxing to parse a primitive","createdAt":"2014-01-01T16:20:58+0000","severity":"MAJOR","status":"READY","internalKey":"DM_BOXED_PRIMITIVE_FOR_PARSING","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nA boxed primitive is created from a String, just to extract the unboxed primitive value.\nIt is more efficient to just call the static parseXXX method.\n</p>","debtOverloaded":false,"params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:S1481","repo":"squid","name":"Unused local variables should be removed","createdAt":"2014-01-01T16:20:52+0000","severity":"MAJOR","status":"READY","internalKey":"S1481","isTemplate":false,"tags":[],"sysTags":["unused"],"lang":"java","langName":"Java","htmlDesc":"<p>\nIf a local variable is declared but not used in the program, it can be considered dead code and should therefore be removed.\nThis will improve maintainability because developers will not wonder what the variable is used for.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int compute(int a){\n  int foo = 6;\n  return a * 4;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic int compute(int a){\n  return a * 4;\n}\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:S1452","repo":"squid","name":"Generic wildcard types should not be used in return parameters","createdAt":"2014-01-01T16:20:52+0000","severity":"MAJOR","status":"READY","internalKey":"S1452","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\n  Using a wildcard as a return type implicitly means that the return parameter should be considered as read-only but without any way to enforce this contract.\n</p>\n<p>\n  Let's take the example of method returning a \"List&lt;&#63; extends Animal&gt;\". Is it possible on this list to add a Dog, a Cat, ... we simply don't know. The consumer of a method should not have to deal with such disruptive questions.\n</p>\n\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;? extends Animal&gt; getAnimals(){...}\n</pre>\n\n<h2>Compliant solution</h2>\n<pre>\n//First Solution: the list can contain any kind of animals\nList&lt;Animal&gt; getAnimals(){...}\n\n//Second Solution: the list can contain only one type of animal\nList&lt;E&gt; getAnimals(){...} //Where E extends Animal in the signature of the nesting class\n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"ARCHITECTURE_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"ARCHITECTURE_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Architecture","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:S1317","repo":"squid","name":"StringBuilder and StringBuffer should not be instantiated with a character","createdAt":"2014-01-01T16:20:52+0000","severity":"MAJOR","status":"READY","internalKey":"S1317","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\n  Instantiating a StringBuilder or a StringBuffer with a character is misleading because most Java developers would expect the character to be the initial value of the StringBuffer.\n</p>\n<p>\n  What actually happens is that the int representation of the character is used to determine the initial size of the StringBuffer.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nStringBuffer foo = new StringBuffer('x');   //equivalent to StringBuffer foo = new StringBuffer(120);\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nStringBuffer foo = new StringBuffer(\"x\");\n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:S1068","repo":"squid","name":"Unused private fields should be removed","createdAt":"2014-01-01T16:20:52+0000","severity":"MAJOR","status":"READY","internalKey":"S1068","isTemplate":false,"tags":[],"sysTags":["unused"],"lang":"java","langName":"Java","htmlDesc":"<p>\nIf a private field is declared but not used in the program, it can be considered dead code and should therefore be removed.\nThis will improve maintainability because developers will not wonder what the variable is used for.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  private int foo = 42;\n\n  public int compute(int a) {\n    return a * 42;\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public int compute(int a) {\n    return a * 42;\n  }\n}\n</pre>\n\n<h2>Exceptions</h2>\n\n<p>\nThe Java serialization runtime associates with each serializable class a version number, called <code>serialVersionUID</code>, which is used during deserialization to verify that the sender and receiver of a serialized object have loaded classes for that object that are compatible with respect to serialization.\nA serializable class can declare its own <code>serialVersionUID</code> explicitly by declaring a field named <code>serialVersionUID</code> that must be static, final, and of type long. By definition those <code>serialVersionUID</code> fields should not be reported by this rule:\n</p>\n\n<pre>\npublic class MyClass implements java.io.Serializable {\n  private static final long serialVersionUID = 42L;\n}\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:S1444","repo":"squid","name":"\"public static\" fields should always be constant","createdAt":"2014-01-01T16:20:52+0000","severity":"MAJOR","status":"READY","internalKey":"S1444","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>There is no good reason to declare a field \"public\" and \"static\" without also declaring it \"final\". Most of the time this is a kludge to share a state among several objects. But with this approach, any object can do whatever it wants with the shared state, such as setting it to <code>null</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Greeter {\npublic static var foo:Foo = new Foo(...);\n...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Greeter {\npublic static const FOO:Foo = new Foo(...);\n...\n}\n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"DATA_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"DATA_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Data","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:S1219","repo":"squid","name":"\"switch\" statements should not contain non-case labels","createdAt":"2013-10-18T18:10:15+0000","severity":"CRITICAL","status":"READY","internalKey":"S1219","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>Even if it is legal, mixing case and non-case labels in the body of a <code>switch</code> statement is very confusing, and can even be the result of a typing error.</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>Case 1, the code is syntactically correct but the behaviour is not the expected one</p>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  WEDNESDAY:   //instead of \"case WEDNESDAY\"\n    doSomething();\n    break;\n  ...\n}\n</pre>\n<p>Case 2, the code is correct and behaves as expected but is hardly readable</p>\n<pre>\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    foo:for(int i = 0 ; i < X ; i++) {\n         /* ... */\n        break foo;  //This break statement doesn't relate to the nesting case TUESDAY\n         /* ... */\n    }\n    break;\n    /* ... */\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<p>Case 1</p>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  case WEDNESDAY:\n    doSomething();\n    break;\n  ...\n}\n</pre>\n<p>Case 2</p>\n<pre>\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    compute(args); //Put the content of the labelled \"for\" statement in a dedicated method\n    break;\n\n    /* ... */\n}\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"READABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"READABILITY","debtCharName":"Maintainability","debtSubCharName":"Readability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"squid:S1210","repo":"squid","name":"\"equals(Object obj)\" should be overridden along with the \"compareTo(T obj)\" method","createdAt":"2013-10-18T18:10:15+0000","severity":"CRITICAL","status":"READY","internalKey":"S1210","isTemplate":false,"tags":[],"sysTags":["bug"],"lang":"java","langName":"Java","htmlDesc":"<p>\nAccording to the Java <code>Comparable.compareTo(T o)</code> documentation:\n</p>\n\n<blockquote>\nIt is strongly recommended, but not strictly required that <code>(x.compareTo(y)==0) == (x.equals(y))</code>.\nGenerally speaking, any class that implements the Comparable interface and violates this condition should clearly indicate this fact.\nThe recommended language is \"Note: this class has a natural ordering that is inconsistent with equals.\"\n</blockquote>\n\n<p>\nIf this rule is violated, weird and unpredictable failures can occur.\nFor example, in Java 5 the <code>PriorityQueue.remove()</code> method relied on <code>compareTo()</code>, but since Java 6 it relies on <code>equals()</code>.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic class Foo implements Comparable&lt;Foo&gt; {\n  @Override\n  public int compareTo(Foo foo) { /* ... */ }      // Noncompliant as the equals(Object obj) method is not overridden\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\npublic class Foo implements Comparable&lt;Foo&gt; {\n  @Override\n  public int compareTo(Foo foo) { /* ... */ }      // Compliant\n\n  @Override\n  public boolean equals(Object obj) { /* ... */ }\n}\n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"ARCHITECTURE_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"ARCHITECTURE_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Architecture","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"squid:S1226","repo":"squid","name":"Method parameters, caught exceptions and foreach variables should not be reassigned","createdAt":"2013-10-18T18:10:15+0000","severity":"MAJOR","status":"READY","internalKey":"S1226","isTemplate":false,"tags":[],"sysTags":["misra","pitfall"],"lang":"java","langName":"Java","htmlDesc":"<p>\nWhile it is technically correct to assign to parameters from within method bodies, it is better to use temporary variables to store intermediate results.\nThis rule will typically detect cases where a constructor parameter is assigned to itself instead of a field of the same name, i.e. when <code>this</code> was forgotten.\nAllowing parameters to be assigned to also reduces the code readability as developers will not be able to know whether the original parameter or some temporary variable is being accessed without going through the whole method.\nMoreover, some developers might also expect assignments of method parameters to be visible from callers, which is not the case and can confuse them.\nAll parameters should be treated as <code>final</code>.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {\n  public String name;\n\n  public MyClass(String name) {\n    name = name;                    // Noncompliant - useless identity assignment\n  }\n\n  public int add(int a, int b) {\n    a = a + b;                      // Noncompliant\n\n    /* additional logic */\n\n    return a;                       // Seems like the parameter is returned as is, what is the point?\n  }\n\n  public static void main(String[] args) {\n    MyClass foo = new MyClass();\n    int a = 40;\n    int b = 2;\n    foo.add(a, b);                  // Variable \"a\" will still hold 40 after this call\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n  public String name;\n\n  public MyClass(String name) {\n    this.name = name;               // Compliant\n  }\n\n  public int add(int a, int b) {\n    return a + b;                   // Compliant\n  }\n\n  public static void main(String[] args) {\n    MyClass foo = new MyClass();\n    int a = 40;\n    int b = 2;\n    foo.add(a, b);\n  }\n}\n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"ARCHITECTURE_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"ARCHITECTURE_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Architecture","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:S1223","repo":"squid","name":"Non-constructor methods should not have the same name as the enclosing class","createdAt":"2013-10-18T18:10:15+0000","severity":"MAJOR","status":"READY","internalKey":"S1223","isTemplate":false,"tags":[],"sysTags":["pitfall"],"lang":"java","langName":"Java","htmlDesc":"Having a class and some of its methods sharing the same name is misleading, and leaves others to wonder whether it was done that way on purpose, or was the methods supposed to be a constructor.\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  public Foo() {...}\n  public int Foo(String label) {...} // Noncompliant\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass Foo {\n  public Foo() {...}\n  public int foo(String label) {...} // Compliant\n}\n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"ARCHITECTURE_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"ARCHITECTURE_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Architecture","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:S1206","repo":"squid","name":"\"equals(Object obj)\" and \"hashCode()\" should be overridden in pairs","createdAt":"2013-10-18T18:10:15+0000","severity":"BLOCKER","status":"READY","internalKey":"S1206","isTemplate":false,"tags":[],"sysTags":["bug"],"lang":"java","langName":"Java","htmlDesc":"<p>According to the Java Language Specification, there is a contract between <code>equals(Object)</code> and <code>hashCode()</code>:</p>\n\n<blockquote>\nIf two objects are equal according to the <code>equals(Object)</code> method, then calling the <code>hashCode</code> method on each of the two objects must produce the same integer result.\nIt is not required that if two objects are unequal according to the <code>equals(java.lang.Object)</code> method, then calling the <code>hashCode</code> method on each of the two objects must produce distinct integer results.\nHowever, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hashtables.\n</blockquote>\n\n<p>In order to comply with this contract, those methods should be either both inherited, or both overridden.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nclass MyClass {    // Non-Compliant - should also override \"hashCode()\"\n\n  @Override\n  public boolean equals(Object obj) {\n    /* ... */\n  }\n\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nclass MyClass {    // Compliant\n\n  @Override\n  public boolean equals(Object obj) {\n    /* ... */\n  }\n\n  @Override\n  public int hashCode() {\n    /* ... */\n  }\n\n}\n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"ARCHITECTURE_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"ARCHITECTURE_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Architecture","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"BLOCKER","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"BLOCKER","params":[]}]},{"rule":{"key":"squid:S1301","repo":"squid","name":"\"switch\" statements should have at least 3 cases","createdAt":"2013-10-18T18:10:15+0000","severity":"MINOR","status":"READY","internalKey":"S1301","isTemplate":false,"tags":[],"sysTags":["misra"],"lang":"java","langName":"Java","htmlDesc":"<p>\n<code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.\nFor just one or two cases however, the code will be more readable with <code>if</code> statements.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (variable) {\n  case 0:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (variable == 0) {\n  doSomething();\n} else {\n  doSomethingElse();\n}\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"READABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"READABILITY","debtCharName":"Maintainability","debtSubCharName":"Readability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MINOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MINOR","params":[]}]},{"rule":{"key":"squid:S1313","repo":"squid","name":"IP addresses should not be hardcoded","createdAt":"2013-10-18T18:10:15+0000","severity":"MAJOR","status":"READY","internalKey":"S1313","isTemplate":false,"tags":[],"sysTags":["security"],"lang":"java","langName":"Java","htmlDesc":"<p>Hardcoding an IP address into source code is a bad idea for several reasons:</p>\n\n<ul>\n  <li>a recompile is required if the address changes</li>\n  <li>it forces the same address to be used in every environment (dev, sys, qa, prod)</li>\n  <li>it places the responsibility of setting the value to use in production on the shoulders of the developer</li>\n</ul>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nString ip = \"127.0.0.1\";\nSocket socket = new Socket(ip, 6667);\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nString ip = System.getProperty(\"myapplication.ip\");\nSocket socket = new Socket(ip, 6667);\n</pre>","defaultDebtChar":"CHANGEABILITY","defaultDebtSubChar":"ARCHITECTURE_CHANGEABILITY","debtChar":"CHANGEABILITY","debtSubChar":"ARCHITECTURE_CHANGEABILITY","debtCharName":"Changeability","debtSubCharName":"Architecture","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:S1312","repo":"squid","name":"Loggers should be \"private static final\" and should share a naming convention","createdAt":"2013-10-18T18:10:15+0000","severity":"MAJOR","status":"READY","internalKey":"S1312","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","htmlDesc":"<p>Whatever is the logging framework (logback, log4j, commons-logging, java.util.logging, ...), a logger should be:</p>\n\n<ul>\n  <li><code>private</code>: Never be accessible outside of its parent class. If another class needs to log something, it should instantiate its own logger.</li>\n  <li><code>static</code>: Not dependent on an instance of a class (an object). When logging something, contextual information can of course be provided in the messages but the logger should be created at class level to prevent creating a logger along with each object.</li>\n  <li><code>final</code>: Be created once and only once per class.</li>\n</ul>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n  public Logger logger = LoggerFactory.getLogger(Foo.class);         // Noncompliant\n\n  public void doSomething() {\n    /* ... */\n  }\n}\n\npublic class Bar {\n  public static void main(String[] args) {\n    Foo foo = new Foo();\n    foo.logger.info(\"Program started\");\n    foo.doSomething();\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n  private static final Logger LOGGER = LoggerFactory.getLogger(Foo.class); // Compliant\n\n  public void doSomething() {\n    /* ... */\n  }\n}\n\npublic class Bar {\n  private static Log LOGGER = LogFactory.getLogger(Bar.class);       // Compliant\n\n  public static void main(String[] args) {\n    LOGGER.info(\"Program started\");\n    Foo foo = new Foo();\n    foo.run();\n  }\n}\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","params":[{"key":"format","htmlDesc":"Regular expression used to check the logger names against.","type":"STRING","defaultValue":"LOG(?:GER)?"}]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[{"key":"format","value":"LOG(?:GER)?"}]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[{"key":"format","value":"LOG(?:GER)?"}]}]},{"rule":{"key":"squid:S1319","repo":"squid","name":"Declarations should use Java collection interfaces such as \"List\" rather than specific implementation classes such as \"LinkedList\"","createdAt":"2013-10-18T18:10:15+0000","severity":"MAJOR","status":"READY","internalKey":"S1319","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nThe purpose of the Java Collections API is to provide a well defined hierarchy of interfaces in order to hide all implementation details.\nImplementating classes must be used to instantiate a new collection, but the result of an instantiation should immediately be stored in a variable whose type is a Java Collection interface.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Employees {\n  private HashSet&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();  // Noncompliant - \"employees\" should have type \"Set\" rather than \"HashSet\"\n\n  public HashSet&lt;Employee&gt; getEmployees() {                       // Noncompliant\n    return employees;\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Employees {\n  private Set&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();      // Compliant\n\n  public Set&lt;Employee&gt; getEmployees() {                           // Compliant\n    return employees;\n  }\n}\n</pre>","defaultDebtChar":"CHANGEABILITY","defaultDebtSubChar":"ARCHITECTURE_CHANGEABILITY","debtChar":"CHANGEABILITY","debtSubChar":"ARCHITECTURE_CHANGEABILITY","debtCharName":"Changeability","debtSubCharName":"Architecture","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:S1318","repo":"squid","name":"\"object == null\" should be used instead of \"object.equals(null)\"","createdAt":"2013-10-18T18:10:15+0000","severity":"CRITICAL","status":"READY","internalKey":"S1318","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>Inexperienced Java developers might expect the <code>Object.equals(Object obj)</code> method to correctly handle the case where the left hand side is null, but that is not the case.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (variable.equals(null)) { /* ... */ }   // Noncompliant - \"variable\" is really null, a NullPointerException is thrown\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (variable == null) { /* ... */ }        // Compliant\n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"squid:S1314","repo":"squid","name":"Octal values should not be used","createdAt":"2013-10-18T18:10:15+0000","severity":"MAJOR","status":"READY","internalKey":"S1314","isTemplate":false,"tags":[],"sysTags":["misra","pitfall"],"lang":"java","langName":"Java","htmlDesc":"<p>\nInteger literals starting with a zero are octal rather than decimal values.\nWhile using octal values in Java is fully supported, most developers do not have experience with them.\nThey may not recognize octal values as such, mistaking them instead for decimal values.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nint myNumber = 010;   // myNumber will hold 8, not 10 - was this really expected?\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nint myNumber = 8;\n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"DATA_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"DATA_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Data","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:S1217","repo":"squid","name":"Thread.run() and Runnable.run() should not be called directly","createdAt":"2013-10-18T18:10:14+0000","severity":"CRITICAL","status":"READY","internalKey":"S1217","isTemplate":false,"tags":[],"sysTags":["multi-threading"],"lang":"java","langName":"Java","htmlDesc":"<p>\nThe purpose of the <code>Thread.run()</code> and <code>Runnable.run()</code> methods is to execute code in a separate, dedicated thread.\nCalling those methods directly doesn't make sense because it causes their code to be executed in the current thread.\n</p>\n\n<p>To get the expected behavior, call the <code>Thread.start()</code> method instead.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nThread myThread = new Thread(runnable);\nmyThread.run(); // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nThread myThread = new Thread(runnable);\nmyThread.start(); // Compliant\n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"squid:S1158","repo":"squid","name":"Primitive wrappers should not be instantiated only to perform a to String conversion","createdAt":"2013-08-30T17:20:57+0000","severity":"MAJOR","status":"READY","internalKey":"S1158","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nCreating temporary primitive wrapper objects only for <code>String</code> conversion is inefficient.\nInstead, the static <code>toString()</code> method of those primitive wrapper classes should be used.\n</p>\n\n<p>For example, the following code:</p>\n\n<pre>\nnew Integer(myInteger).toString();  // Non-Compliant\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\nInteger.toString(myInteger);      // Compliant\n</pre>","defaultDebtChar":"EFFICIENCY","defaultDebtSubChar":"CPU_EFFICIENCY","debtChar":"EFFICIENCY","debtSubChar":"CPU_EFFICIENCY","debtCharName":"Efficiency","debtSubCharName":"Processor use","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:S1157","repo":"squid","name":"Case insensitive string comparisons should be made without intermediate upper or lower casing","createdAt":"2013-08-30T17:20:57+0000","severity":"MAJOR","status":"READY","internalKey":"S1157","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nUsing <code>toLowerCase()</code> or <code>toUpperCase()</code> to make case insensitive comparisons is inefficient because it requires the creation of temporary, intermediate <code>String</code> objects.\n</p>\n\n<p>The following code:</p>\n\n<pre>\nboolean result1 = foo.toUpperCase().equals(bar);             // Non-Compliant\nboolean result2 = foo.equals(bar.toUpperCase());             // Non-Compliant\nboolean result3 = foo.toLowerCase().equals(bar.LowerCase()); // Non-Compliant\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\nboolean result = foo.equalsIgnoreCase(bar);                  // Compliant\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"READABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"READABILITY","debtCharName":"Maintainability","debtSubCharName":"Readability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:S1155","repo":"squid","name":"Collection.isEmpty() should be used to test for emptiness","createdAt":"2013-08-30T17:20:57+0000","severity":"MAJOR","status":"READY","internalKey":"S1155","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nUsing <code>Collection.size()</code> to test for emptiness works, but using <code>Collection.isEmpty()</code> makes the code more readable and can be more performant. The time complexity of any <code>isEmpty()</code> method implementation should be <code>O(1)</code> whereas some implementations of <code>size()</code> method can be <code>O(n)</code>.\n\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nif (myCollection.size() == 0) {  // Non-Compliant\n  /* ... */\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nif (myCollection.isEmpty()) {    // Compliant\n  /* ... */\n}\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"READABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"READABILITY","debtCharName":"Maintainability","debtSubCharName":"Readability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:S1153","repo":"squid","name":"String.valueOf() should not be appended to a String","createdAt":"2013-08-30T17:20:57+0000","severity":"MINOR","status":"READY","internalKey":"S1153","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nAppending <code>String.valueOf()</code> to a <code>String</code> decreases the code readability.\nThe argument passed to <code>String.valueOf()</code> should be directly appended instead.\n</p>\n\n<p>The following code:</p>\n\n<pre>\npublic void display(int i){\n  System.out.println(\"Output is \" + String.valueOf(i));    // Non-Compliant\n}\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\npublic void display(int i){\n  System.out.println(\"Output is \" + i);                    // Compliant\n}\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"READABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"READABILITY","debtCharName":"Maintainability","debtSubCharName":"Readability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MINOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MINOR","params":[]}]},{"rule":{"key":"squid:S128","repo":"squid","name":"Switch cases should end with an unconditional break statement","createdAt":"2013-08-30T17:20:57+0000","severity":"CRITICAL","status":"READY","internalKey":"S128","isTemplate":false,"tags":[],"sysTags":["pitfall"],"lang":"java","langName":"Java","htmlDesc":"<p>\nWhen the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While this is sometimes intentional, it often is a mistake which leads to unexpected behavior.\n</p>\n\n<h2>\nNoncompliant Code Example\n</h2>\n\n<pre>\nswitch (myVariable) {\n  case 1:                              \n    foo();\n    break;\n  case 2:  // Both 'doSomething()' and 'doSomethingElse()' will be executed. Is it on purpose ?\n    doSomething();\n  default:                               \n    doSomethingElse();\n    break;\n}\n</pre>\n\n<h2>\nCompliant Solution\n</h2>\n\n<pre>\nswitch (myVariable) {\n  case 1:                              \n    foo();\n    break;\n  case 2: \n    doSomething();\n    break;\n  default:                               \n    doSomethingElse();\n    break;\n}\n</pre>\n\n<h2>\nExceptions\n</h2>\n\n<pre>\nswitch (myVariable) {\n  case 0:                                // Empty case used to specify the same behavior for a group of cases.\n  case 1:                               \n    doSomething();\n    break;\n  case 2:                                // Use of return statement\n    return;\n  case 3:                                // Use of throw statement\n    throw new IllegalStateException();\n  default:                               // For the last case, use of break statement is optional \n    doSomethingElse();\n}\n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"squid:AssignmentInSubExpressionCheck","repo":"squid","name":"Assignments should not be made from within sub-expressions","createdAt":"2013-08-30T17:20:57+0000","severity":"MAJOR","status":"READY","internalKey":"AssignmentInSubExpressionCheck","isTemplate":false,"tags":[],"sysTags":["bug","cwe","misra"],"lang":"java","langName":"Java","htmlDesc":"<p>\nAssignments within sub-expressions are hard to spot and therefore make the code less readable.\nIt is also a common mistake to write <code>=</code> when <code>==</code> was meant.\nIdeally, expressions should not have side-effects.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nSystem.out.println(i = 42);\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nSystem.out.println(i == 42);\n</pre>\n\n<p>or:</p>\n\n<pre>\ni = 42;\nSystem.out.println(i);\n</pre>\n\n<h2>Exceptions</h2>\n<p>Assignments enclosed in relational expressions are allowed.</p>\n\n<pre>\nBufferedReader br = new BufferedReader(/* ... */);\nString line;\nwhile ((line = br.readLine()) != null) {\n  /* ... */\n}\n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:S1221","repo":"squid","name":"Methods should not be named \"hashcode\"","createdAt":"2013-08-30T17:20:57+0000","severity":"CRITICAL","status":"READY","internalKey":"S1221","isTemplate":false,"tags":[],"sysTags":["pitfall"],"lang":"java","langName":"Java","htmlDesc":"<p>Naming a method <code>hashcode()</code> is either:</p>\n\n<ul>\n  <li>A bug. Overriding <code>Object.hashCode()</code> was meant and the application does not behave as expected.</li>\n  <li>Done on purpose. The name however will confuse every other developer, who will think it is a bug.</li>\n</ul>\n\n<p>In both cases, the method should be renamed.</p>\n\n<p>The following code:</p>\n\n<pre>\npublic int hashcode() { /* ... */ }    // Non-Compliant\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\n@Override\npublic int hashCode() { /* ... */ }    // Compliant\n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"ARCHITECTURE_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"ARCHITECTURE_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Architecture","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"squid:S1160","repo":"squid","name":"Public methods should throw at most one checked exception","createdAt":"2013-08-30T17:20:57+0000","severity":"MAJOR","status":"READY","internalKey":"S1160","isTemplate":false,"tags":[],"sysTags":["error-handling"],"lang":"java","langName":"Java","htmlDesc":"<p>\nUsing checked exceptions forces method callers to deal with errors, either by propagating them or by handling them.\nThis makes those exceptions fully part of the API of the method.\n</p>\n\n<p>\nTo keep the complexity for callers reasonable, methods should not throw more than one kind of checked exception.\n</p>\n\n<p>The following code:</p>\n\n<pre>\npublic void delete() throws IOException, SQLException {      // Non-Compliant\n  /* ... */\n}\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\npublic void delete() throws SomeApplicationLevelException {  // Compliant\n  /* ... */\n}\n</pre>\n\nOverriding methods are not checked by this rule and are allowed to throw several checked exceptions.","defaultDebtChar":"TESTABILITY","defaultDebtSubChar":"UNIT_TESTABILITY","debtChar":"TESTABILITY","debtSubChar":"UNIT_TESTABILITY","debtCharName":"Testability","debtSubCharName":"Unit level","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:S1220","repo":"squid","name":"The default unnamed package should not be used","createdAt":"2013-08-30T17:20:57+0000","severity":"MAJOR","status":"READY","internalKey":"S1220","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>According to the Java Language Specification:</p>\n\n<blockquote>\nUnnamed packages are provided by the Java platform principally for convenience when developing small or temporary applications or when just beginning development.\n</blockquote>\n\n<p>To enforce this best practice, classes located in default package can no longer be access from named ones since Java 1.4.</p>\n\n<p>The following piece of code:</p>\n\n<pre>\npublic class MyClass { /* ... */ }\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\npackage org.example;\n\npublic class MyClass{ /* ... */ }\n</pre>","defaultDebtChar":"CHANGEABILITY","defaultDebtSubChar":"ARCHITECTURE_CHANGEABILITY","debtChar":"CHANGEABILITY","debtSubChar":"ARCHITECTURE_CHANGEABILITY","debtCharName":"Changeability","debtSubCharName":"Architecture","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:S1168","repo":"squid","name":"Empty arrays and collections should be returned instead of null","createdAt":"2013-08-30T17:20:57+0000","severity":"MAJOR","status":"READY","internalKey":"S1168","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nReturning <code>null</code> instead of an actual array or collection forces callers of the method to explicitly test for nullity, making them more complex and less readable.\nMoreover, in many cases, <code>null</code> is used as a synonym for empty.\n</p>\n\n<p>The following code:</p>\n\n<pre>\npublic static Result[] getResults() {\n  return null;                             // Non-Compliant\n}\n\npublic static void main(String[] args) {\n  Result[] results = getResults();\n\n  if (results != null) {                   // Nullity test required to prevent NPE\n    for (Result result: results) {\n      /* ... */\n    }\n  }\n}\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\npublic static Result[] getResults() {\n  return new Result[0];                    // Compliant\n}\n\npublic static void main(String[] args) {\n  for (Result result: getResults()) {\n    /* ... */\n  }\n}\n</pre>\n\n<p>This rule also applies to collections:</p>\n\n<pre>\npublic static List&lt;Result&gt; getResults() {\n  return null;                             // Non-Compliant\n}\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\npublic static List&lt;Result&gt; getResults() {\n  return Collections.emptyList();           // Compliant\n}\n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"ARCHITECTURE_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"ARCHITECTURE_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Architecture","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:HiddenFieldCheck","repo":"squid","name":"Local variables should not shadow class fields","createdAt":"2013-08-30T17:20:57+0000","severity":"MAJOR","status":"READY","internalKey":"HiddenFieldCheck","isTemplate":false,"tags":[],"sysTags":["pitfall"],"lang":"java","langName":"Java","htmlDesc":"<p>\nShadowing fields with a local variable is a bad practice reducing code readability: It makes it confusing to know whether the field or the variable is and should be accessed.\n</p>\n\n<p>\nThe following code illustrates this rule:\n</p>\n\n<pre>\nclass Foo {\n  public int myField;\n\n  public Foo(int myField) {                   // Compliant - method parameters are not checked\n    this.myField = myField;\n  }\n\n  @Override\n  public String toString() {\n    int myField = 0;                          // Non-Compliant - should be renamed\n    return \"Foo{MyField: \" + myField + \"}\";\n  }\n}\n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"DATA_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"DATA_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Data","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:S1163","repo":"squid","name":"Exceptions should not be thrown in finally blocks","createdAt":"2013-08-30T17:20:57+0000","severity":"MAJOR","status":"READY","internalKey":"S1163","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nThrowing an exception from within a finally block will mask any exception which was previously thrown in the <code>try</code> or <code>catch</code> block.\nThe masked's exception message and stack trace will be lost.\n</p>\n\n<p>The following code:</p>\n\n<pre>\ntry {\n  /* some work which end up throwing an exception */\n  throw new IllegalArgumentException();\n} finally {\n  /* clean up */\n  throw new RuntimeException();                          // Non-Compliant - will mask the IllegalArgumentException\n}\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\ntry {\n  /* some work which end up throwing an exception */\n  throw new IllegalArgumentException();\n} finally {\n  /* clean up */                                         // Compliant\n}\n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"EXCEPTION_HANDLING","debtChar":"RELIABILITY","debtSubChar":"EXCEPTION_HANDLING","debtCharName":"Reliability","debtSubCharName":"Exception handling","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:S1166","repo":"squid","name":"Exception handlers should preserve the original exception","createdAt":"2013-08-30T17:20:57+0000","severity":"MAJOR","status":"READY","internalKey":"S1166","isTemplate":false,"tags":[],"sysTags":["error-handling"],"lang":"java","langName":"Java","htmlDesc":"<p>\nWhen handling a caught exception, two mandatory informations should be logged:\n</p>\n\n<ul>\n  <li>Some context to ease the reproduction of the issue.</li>\n  <li>The original's exception, for its message and stack trace.</lu>\n</ul>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\n // Noncompliant - exception is lost\ntry { /* ... */ } catch (Exception e) { LOGGER.info(\"context\"); }\n\n// Noncompliant - context is required\ntry { /* ... */ } catch (Exception e) { LOGGER.info(e); }\n\n// Noncompliant - exception is lost (only message is preserved)\ntry { /* ... */ } catch (Exception e) { LOGGER.info(e.getMessage()); }\n\n// Noncompliant - exception is lost\ntry { /* ... */ } catch (Exception e) { throw new RuntimeException(\"context\"); }\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\ntry { /* ... */ } catch (Exception e) { LOGGER.info(\"context\", e); }\n\ntry { /* ... */ } catch (Exception e) { throw new RuntimeException(\"context\", e); }\n</pre>\n\n<h2>Exceptions</h2>\n\n<p>It is allowed to let the exception propagate.</p>\n\n<pre>\ntry {\n  /* ... */\n} catch (RuntimeException e) {\n  doSomething();\n  throw e;\n} catch (Exception e) {\n  // Conversion into unchecked exception is also allowed\n  throw new RuntimeException(e);\n}\n</pre>\n\n<p>\n<code>InterruptedException</code>, <code>NumberFormatException</code>, <code>ParseException</code> and <code>MalformedURLException</code> exceptions are arguably used to indicate nonexceptional outcomes.\nAs they are part of Java, developers have no choice but to deal with them. This rule does not verify that those particular exceptions are correctly handled.\n</p>\n\n<pre>\nint myInteger;\ntry {\n  myInteger = Integer.parseInt(myString);\n} catch (NumberFormatException e) {\n  // It is perfectly acceptable to not handle \"e\" here\n  myInteger = 0;\n}\n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"EXCEPTION_HANDLING","debtChar":"RELIABILITY","debtSubChar":"EXCEPTION_HANDLING","debtCharName":"Reliability","debtSubCharName":"Exception handling","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","params":[{"key":"exceptions","htmlDesc":"List of exceptions which should not be checked","type":"STRING","defaultValue":"java.lang.InterruptedException, java.lang.NumberFormatException, java.text.ParseException, java.net.MalformedURLException"}]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[{"key":"exceptions","value":"java.lang.InterruptedException, java.lang.NumberFormatException, java.text.ParseException, java.net.MalformedURLException"}]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[{"key":"exceptions","value":"java.lang.InterruptedException, java.lang.NumberFormatException, java.text.ParseException, java.net.MalformedURLException"}]}]},{"rule":{"key":"squid:S1165","repo":"squid","name":"Exception classes should be immutable","createdAt":"2013-08-30T17:20:57+0000","severity":"MAJOR","status":"READY","internalKey":"S1165","isTemplate":false,"tags":[],"sysTags":["error-handling"],"lang":"java","langName":"Java","htmlDesc":"<p>\nExceptions are meant to represent the application's state at which an error occurred.\n</p>\n\n<p>Making all fields final ensures that this state:</p>\n\n<ul>\n  <li>Will be fully defined at the same time the exception is instantiated.</li>\n  <li>Won't be updated or corrupted by some bogus error handler.</li>\n</ul>\n\n<p>This will enable developers to quickly understand what went wrong.</p>\n\n<p>The following code:</p>\n\n<pre>\npublic class MyException extends Exception {\n\n  private int status;                               // Non-Compliant\n\n  public MyException(String message) {\n    super(message);\n  }\n\n  public int getStatus() {\n    return status;\n  }\n\n  public void setStatus(int status) {\n    this.status = status;\n  }\n\n}\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\npublic class MyException extends Exception {\n\n  private final int status;                         // Compliant\n\n  public MyException(String message, int status) {\n    super(message);\n    this.status = status;\n  }\n\n  public int getStatus() {\n    return status;\n  }\n\n}\n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"EXCEPTION_HANDLING","debtChar":"RELIABILITY","debtSubChar":"EXCEPTION_HANDLING","debtCharName":"Reliability","debtSubCharName":"Exception handling","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:S134","repo":"squid","name":"Control flow statements \"if\", \"for\", \"while\", \"switch\" and \"try\" should not be nested too deeply","createdAt":"2013-08-30T17:20:57+0000","severity":"MINOR","status":"READY","internalKey":"S134","isTemplate":false,"tags":[],"sysTags":["brain-overload"],"lang":"java","langName":"Java","htmlDesc":"<p>\nNested <code>if</code>, <code>for</code>, <code>while</code> and <code>try</code> statements is a key ingredient for making what's known as \"Spaghetti code\".\nSuch code is hard to read, refactor and therefore maintain.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<p>The following code snippet illustrates this rule with the default threshold of 3.</p>\n\n<pre>\npublic void process() {\n  if (condition1) {                  // Compliant - depth = 1\n    /* ... */\n    if (condition2) {                // Compliant - depth = 2\n      /* ... */\n      for(int i = 0; i < 10; i++) {  // Compliant - depth = 3, not exceeding the limit\n        /* ... */\n        if (condition4) {            // Non-Compliant - depth = 4\n          if (condition5) {          // Depth = 5, exceeding the limit, but issues are only reported on depth = 4\n            /* ... */\n          }\n          return;\n        }\n      }\n    }\n  }\n}\n</pre>","defaultDebtChar":"CHANGEABILITY","defaultDebtSubChar":"LOGIC_CHANGEABILITY","debtChar":"CHANGEABILITY","debtSubChar":"LOGIC_CHANGEABILITY","debtCharName":"Changeability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","params":[{"key":"max","htmlDesc":"Maximum allowed if/for/while/switch/try statements nesting depth","type":"INTEGER","defaultValue":"3"}]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MINOR","params":[{"key":"max","value":"3"}]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MINOR","params":[{"key":"max","value":"3"}]}]},{"rule":{"key":"squid:S1170","repo":"squid","name":"Constants should be declared \"final static\" rather than merely \"final\"","createdAt":"2013-08-30T17:20:57+0000","severity":"MAJOR","status":"READY","internalKey":"S1170","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nMaking a constant just <code>final</code> as opposed to <code>static final</code> leads to duplicating its value for every instance of the class,\nuselessly increasing the amount of memory required to execute the application.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic class Myclass {\n  public final int THRESHOLD = 3;           // Non-Compliant\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\npublic class Myclass {\n  public static final int THRESHOLD = 3;    // Compliant\n}\n</pre>\n<h2>Exceptions</h2>\n<p>No issues are reported on final fields of inner classes whose type is not a primitive or a String. Indeed according to the Java specification:</p>\n<blockquote>An inner class is a nested class that is not explicitly or implicitly declared static. Inner classes may not declare static initializers (&sect; 8.7) or member interfaces. Inner classes may not declare static members, unless they are compile-time constant fields (&sect; 15.28).</blockquote>","defaultDebtChar":"EFFICIENCY","defaultDebtSubChar":"MEMORY_EFFICIENCY","debtChar":"EFFICIENCY","debtSubChar":"MEMORY_EFFICIENCY","debtCharName":"Efficiency","debtSubCharName":"Memory use","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:S1171","repo":"squid","name":"Non-static class initializers should not be used","createdAt":"2013-08-30T17:20:57+0000","severity":"MAJOR","status":"READY","internalKey":"S1171","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nNon-static initializers are rarely used, and can be confusing for most developers.\nWhen possible, they should be refactored into standard constructors or field initializers.\n</p>\n\n<p>The following code:</p>\n\n<pre>\nclass MyClass {\n  private static final Map<String, String> MY_MAP = new HashMap<String, String>() {\n\n    // Non-Compliant - HashMap should be extended only to add behavior, not for initialization\n    {\n      put(\"a\", \"b\");\n    }\n\n  };\n}\n</pre>\n\n<p>could be refactored using Guava into:</p>\n\n<pre>\nclass MyClass {\n  // Compliant\n  private static final Map<String, String> MY_MAP = ImmutableMap.of(\"a\", \"b\");\n}\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:S1175","repo":"squid","name":"Object.finalize() should not be overloaded (by adding method parameters)","createdAt":"2013-08-30T17:20:57+0000","severity":"MAJOR","status":"READY","internalKey":"S1175","isTemplate":false,"tags":[],"sysTags":["pitfall"],"lang":"java","langName":"Java","htmlDesc":"<p><code>Object.finalize()</code> is called by the Garbage Collector sometime after the object became unreferenced.</p>\n\n<p>Overloading this method is misleading:</p>\n<ul>\n  <li>The overloaded method will not be called by the Garbage Collector.</li>\n  <li>Users are not expected to call <code>Object.finalize()</code> and will get confused.</li>\n</ul>\n\n<p>Another name should be picked for the method.</p>\n\n<p>The following code:</p>\n\n<pre>\npublic void finalize(int someParameter) {        // Non-Compliant\n  /* ... */\n}\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\npublic void someBetterName(int someParameter) {  // Compliant\n  /* ... */\n}\n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"ARCHITECTURE_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"ARCHITECTURE_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Architecture","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:S1174","repo":"squid","name":"Object.finalize() should remain protected (versus public) when overriding","createdAt":"2013-08-30T17:20:57+0000","severity":"MAJOR","status":"READY","internalKey":"S1174","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nThe contract of the <code>Object.finalize()</code> method is clear: only the Garbage Collector is supposed to call this method.\nMaking this method public is misleading, because it implies that any caller can use it.\n</p>\n\n<p>The following code snippet illustrates this rule:</p>\n\n<pre>\npublic class MyClass {\n\n  @Override\n  public void finalize() {    // Non-Compliant\n    /* ... */\n  }\n}\n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"ARCHITECTURE_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"ARCHITECTURE_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Architecture","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:RedundantThrowsDeclarationCheck","repo":"squid","name":"Throws declarations should not be redundant","createdAt":"2013-08-30T17:20:57+0000","severity":"MAJOR","status":"READY","internalKey":"RedundantThrowsDeclarationCheck","isTemplate":false,"tags":[],"sysTags":["error-handling"],"lang":"java","langName":"Java","htmlDesc":"<p>\nAn exception in a <code>throws</code> declaration in Java is redundant if:\n</p>\n\n<ul>\n  <li>It is listed multiple times</li>\n  <li>It is a subclass of another listed exception</li>\n  <li>It is a <code>RuntimeException</code>, or one of its descendants</li>\n</ul>\n\n<p>\nThe following code:\n</p>\n\n<pre>\nvoid foo() throws MyException, MyException {}  // Non-Compliant - should be listed once\nvoid bar() throws Throwable, Exception {}      // Non-Compliant - Exception is a subclass of Throwable\nvoid baz() throws RuntimeException {}          // Non-Compliant - RuntimeException can always be thrown\n</pre>\n\n<p>\nshould be refactored into:\n</p>\n\n<pre>\nvoid foo() throws MyException {}               // Compliant\nvoid bar() throws Throwable {}                 // Compliant\nvoid baz() {}                                  // Compliant\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MINOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MINOR","params":[]}]},{"rule":{"key":"squid:LabelsShouldNotBeUsedCheck","repo":"squid","name":"Labels should not be used","createdAt":"2013-08-30T17:20:57+0000","severity":"MAJOR","status":"READY","internalKey":"LabelsShouldNotBeUsedCheck","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nLabels are not commonly used in Java, and many developers do not understand how they work.\nMoreover, their usage make the control flow harder to follow, which reduces the code's readability.\n</p>\n\n<p>\nThe following code:\n</p>\n\n<pre>\nint matrix[][] = {\n  {1, 2, 3},\n  {4, 5, 6},\n  {7, 8, 9}\n};\n\nouter: for (int row = 0; row < matrix.length; row++) {   // Non-Compliant\n  for (int col = 0; col < matrix[row].length; col++) {\n    if (col == row) {\n      continue outer;\n    }\n    System.out.println(matrix[row][col]);                // Prints the elements under the diagonal, i.e. 4, 7 and 8\n  }\n}\n</pre>\n\n<p>\nshould be refactored into:\n</p>\n\n<pre>\nfor (int row = 1; row < matrix.length; row++) {          // Compliant\n  for (int col = 0; col < row; col++) {\n    System.out.println(matrix[row][col]);                // Also prints 4, 7 and 8\n  }\n}\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:ForLoopCounterChangedCheck","repo":"squid","name":"Loop counters should not be assigned to from within the loop body","createdAt":"2013-08-30T17:20:57+0000","severity":"MAJOR","status":"READY","internalKey":"ForLoopCounterChangedCheck","isTemplate":false,"tags":[],"sysTags":["bug"],"lang":"java","langName":"Java","htmlDesc":"<p>\nLoop counters should not be modified in the body of the loop.\nHowever other loop control variables representing logical values may be modified in the loop, for example a flag to indicate that something has been completed, which is then tested in the for statement.\n</p>\n\n<p>\nThe following code:\n</p>\n\n<pre>\nString[] names = new String[]{ \"Jack\", \"Jim\", null, \"John\" };\nfor (int i = 0; i < names.length; i++) {\n  if (names[i] == null) {\n    i = names.length;                                             // Non-Compliant\n  } else {\n    System.out.println(names[i]);\n  }\n}\n</pre>\n\n<p>\nshould be refactored into:\n</p>\n\n<pre>\nString[] names = new String[]{ \"Jack\", \"Jim\", null, \"John\" };\nfor (String name: names) {\n  if (name == null) {\n    break;                                                        // Compliant\n  }\n  System.out.println(name);\n}\n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:SwitchLastCaseIsDefaultCheck","repo":"squid","name":"Switch statements should end with a default case","createdAt":"2013-08-30T17:20:57+0000","severity":"MAJOR","status":"READY","internalKey":"SwitchLastCaseIsDefaultCheck","isTemplate":false,"tags":[],"sysTags":["cert","cwe","misra"],"lang":"java","langName":"Java","htmlDesc":"<p>\nThe requirement for a final default clause is defensive programming.\nThis clause should either take appropriate action or contain a suitable comment as to why no action is taken.\n</p>\n\n<p>\nThe following code snippet illustrates this rule:\n</p>\n\n<pre>\nswitch (state) {                       // Non-Compliant - must have a default case\n  case 0:\n  case 1:\n    System.out.println(\"0 or 1!\");\n    break;\n}\n\nswitch (state) {\n  default:                             // Non-Compliant - must be last for better readability\n    throw new IllegalStateException();\n  case 0:\n  case 1:\n    System.out.println(\"0 or 1!\");\n    break;\n}\n\nswitch (state) {\n  case 0:\n  case 1:\n    System.out.println(\"0 or 1!\");\n    break;\n  default:                             // Compliant\n    throw new IllegalStateException();\n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:S1201","repo":"squid","name":"Methods named \"equals\" should override Object.equals(Object)","createdAt":"2013-08-30T17:20:57+0000","severity":"CRITICAL","status":"READY","internalKey":"S1201","isTemplate":false,"tags":[],"sysTags":["pitfall"],"lang":"java","langName":"Java","htmlDesc":"<p>\n\"equals\" as a method name should be exclusively used to override <code>Object.equals(Object)</code> to prevent any confusion.\n</p>\n\n<p>\nIt is tempting to overload the method to take a specific class instead of <code>Object</code> as parameter, to save class comparison check.\nHowever, this will not work as expected.\n</p>\n\n<p>For example:</p>\n\n<pre>\nclass MyClass {\n  private int foo = 1;\n\n  public boolean equals(MyClass o) {                    // Non-Compliant - \"equals\" method which does not override Object.equals(Object)\n    return o != null && o.foo == this.foo;\n  }\n\n  public static void main(String[] args) {\n    MyClass o1 = new MyClass();\n    Object o2 = new MyClass();\n    System.out.println(o1.equals(o2));                  // Will display \"false\" because \"o2\" is of type \"Object\" and not \"MyClass\"\n  }\n}\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\nclass MyClass {\n  private int foo = 1;\n\n  @Override\n  public boolean equals(Object o) {                     // Compliant - overrides Object.equals(Object)\n    if (o == null || !(o instanceof MyClass)) {\n      return false;\n    }\n\n    MyClass other = (MyClass)o;\n    return this.foo == other.foo;\n  }\n\n  /* ... */\n}\n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"ARCHITECTURE_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"ARCHITECTURE_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Architecture","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"squid:ModifiersOrderCheck","repo":"squid","name":"Modifiers should be declared in the correct order","createdAt":"2013-08-30T17:20:57+0000","severity":"MINOR","status":"READY","internalKey":"ModifiersOrderCheck","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","htmlDesc":"<p>\nThe Java Language Specification recommends listing modifiers in the following order:\n</p>\n\n<ul>\n  <li>Annotations</li>\n  <li><code>public</code></li>\n  <li><code>protected</code></li>\n  <li><code>private</code></li>\n  <li><code>abstract</code></li>\n  <li><code>static</code></li>\n  <li><code>final</code></li>\n  <li><code>transient</code></li>\n  <li><code>volatile</code></li>\n  <li><code>synchronized</code></li>\n  <li><code>native</code></li>\n  <li><code>strictfp</code></li>\n</ul>\n\n<p>\nNot following this convention has no technical impact, but will reduce the code's readability because most developers are used to the standard order.\n</p>\n\n<p>\nThe following code:\n</p>\n\n<pre>\nstatic public void main(String[] args) {   // Non-Compliant\n}\n</pre>\n\n<p>\nshould be refactored into:\n</p>\n\n<pre>\npublic static void main(String[] args) {   // Compliant\n}\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"READABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"READABILITY","debtCharName":"Maintainability","debtSubCharName":"Readability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MINOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MINOR","params":[]}]},{"rule":{"key":"squid:S1181","repo":"squid","name":"Throwable and Error classes should not be caught","createdAt":"2013-08-30T17:20:57+0000","severity":"BLOCKER","status":"READY","internalKey":"S1181","isTemplate":false,"tags":[],"sysTags":["error-handling"],"lang":"java","langName":"Java","htmlDesc":"<p>\n<code>Throwable</code> is the superclass of all errors and exceptions in Java.\n<code>Error</code> is the superclass of all errors which are not meant to be caught by applications.\n</p>\n\n<p>\nCatching either <code>Throwable</code> or <code>Error</code> will also catch <code>OutOfMemoryError</code> or <code>InternalError</code> from which an application should not attempt to recover.\n</p>\n\n<p>Only <code>Exception</code> and its subclasses should be caught.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\ntry { /* ... */ } catch (Throwable t) { /* ... */ }\ntry { /* ... */ } catch (Error e) { /* ... */ } \n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\ntry { /* ... */ } catch (Exception e) { /* ... */ }  \ntry { /* ... */ } catch (RuntimeException e) { /* ... */ }  \ntry { /* ... */ } catch (MyException e) { /* ... */ }  \n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"EXCEPTION_HANDLING","debtChar":"RELIABILITY","debtSubChar":"EXCEPTION_HANDLING","debtCharName":"Reliability","debtSubCharName":"Exception handling","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"BLOCKER","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"BLOCKER","params":[]}]},{"rule":{"key":"squid:S1182","repo":"squid","name":"super.clone() should be called when overriding Object.clone()","createdAt":"2013-08-30T17:20:57+0000","severity":"MAJOR","status":"READY","internalKey":"S1182","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>The usual convention for <code>Object.clone()</code> according to Oracle's Javadoc is that:</p>\n<ul>\n  <li><code>x.clone() != x</code></li>\n  <li><code>x.clone().getClass() == x.getClass()</code></li>\n  <li><code>x.clone().equals(x)</code></li>\n</ul>\n\n<p>Obtaining the object that will be returned by calling <code>super.clone()</code> helps to satisfy those invariants:</p>\n<ul>\n  <li><code>super.clone()</code> returns a new object instance</li>\n  <li><code>super.clone()</code> returns an object of the same type as the one <code>clone()</code> was called on</li>\n  <li><code>Object.clone()</code> performs a shallow copy of the object's state</li>\n</ul>\n\n<p>For example, the following code:</p>\n\n<pre>\nclass BaseClass implements Cloneable {\n  @Override\n  public Object clone() throws CloneNotSupportedException {    // Non-Compliant - should return the super.clone() instance\n    return new BaseClass();\n  }\n}\n\nclass DerivedClass extends BaseClass implements Cloneable {\n  /* Does not override clone() */\n\n  public void sayHello() {\n    System.out.println(\"Hello, world!\");\n  }\n}\n\nclass Application {\n  public static void main(String[] args) throws Exception {\n    DerivedClass instance = new DerivedClass();\n    ((DerivedClass) instance.clone()).sayHello();              // Throws a ClassCastException because invariant #2 is violated\n  }\n}\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\nclass BaseClass implements Cloneable {\n  @Override\n  public Object clone() throws CloneNotSupportedException {    // Compliant\n    return super.clone();\n  }\n}\n\nclass DerivedClass extends BaseClass implements Cloneable {\n  /* Does not override clone() */\n\n  public void sayHello() {\n    System.out.println(\"Hello, world!\");\n  }\n}\n\nclass Application {\n  public static void main(String[] args) throws Exception {\n    DerivedClass instance = new DerivedClass();\n    ((DerivedClass) instance.clone()).sayHello();              // Displays \"Hello, world!\" as expected. Invariant #2 is satisfied\n  }\n}\n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"ARCHITECTURE_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"ARCHITECTURE_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Architecture","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:S1186","repo":"squid","name":"Methods should not be empty","createdAt":"2013-08-30T17:20:57+0000","severity":"MAJOR","status":"READY","internalKey":"S1186","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>There are three reasons for a method not to have a method body:</p>\n\n<ul>\n  <li>It is an unintentional omission, and should be fixed.</li>\n  <li>It is not yet, or never will be, supported. In this case an <code>UnsupportedOperationException</code> should be thrown.</li>\n  <li>The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override.</li>\n</ul>\n\n<p>The following code snippet:</p>\n\n<pre>\n// Non-Compliant\npublic void doSomething() {\n}\n</pre>\n\nshould be refactored into:\n\n<pre>\n// Compliant\n@Override\npublic void doSomethingElse() {\n  // Do nothing because of X and Y.\n}\n</pre>\n\nor:\n\n<pre>\n// Compliant\n@Override\npublic void doSomethingElse() {\n  throw new UnsupportedOperationException();\n}\n</pre>\n\n<p>Empty methods not having any nested comments are tolerated in Abstract classes as those empty methods are usual when implementing the visitor pattern.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"ARCHITECTURE_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"ARCHITECTURE_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Architecture","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:S1185","repo":"squid","name":"Overriding methods should do more than simply call the same method in the super class","createdAt":"2013-08-30T17:20:57+0000","severity":"MINOR","status":"READY","internalKey":"S1185","isTemplate":false,"tags":[],"sysTags":["brain-overload"],"lang":"java","langName":"Java","htmlDesc":"<p>Overriding a method just to call the same method from the super class without performing any other actions is useless and misleading.</p>\n\n<p>The following code snippet illustrates this rule:</p>\n\n<pre>\npublic void doSomething() {                     // Non-Compliant\n  super.doSomething();\n}\n\n@Override\npublic boolean isLegal(Action action) {         // Non-Compliant\n  return super.isLegal(action);\n}\n\n@Override\npublic boolean isLegal(Action action) {         // Compliant - not simply forwarding the call\n  return super.isLegal(new Action(/* ... */));\n}\n\n@Id\n@Override\npublic int getId() {                            // Compliant - there is annotation different from @Override\n  return super.getId();\n}\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MINOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MINOR","params":[]}]},{"rule":{"key":"squid:S1188","repo":"squid","name":"Lambdas and anonymous classes should not have too many lines","createdAt":"2013-08-30T17:20:57+0000","severity":"MAJOR","status":"READY","internalKey":"S1188","isTemplate":false,"tags":[],"sysTags":["brain-overload"],"lang":"java","langName":"Java","htmlDesc":"<p>\nAnonymous classes and lambdas (with Java 8) are a very convenient and compact way to inject a behavior without having to create a dedicated class. But those anonymous inner classes and lambdas should be used only if the behavior to be injected can be defined in a few lines of code, otherwise the source code can quickly become unreadable.\n</p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"READABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"READABILITY","debtCharName":"Maintainability","debtSubCharName":"Readability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","params":[{"key":"max","htmlDesc":"Maximum allowed lines in an anonymous class","type":"INTEGER","defaultValue":"20"}]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[{"key":"max","value":"20"}]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[{"key":"max","value":"20"}]}]},{"rule":{"key":"squid:UselessImportCheck","repo":"squid","name":"Useless imports should be removed","createdAt":"2013-08-30T17:20:57+0000","severity":"MINOR","status":"READY","internalKey":"UselessImportCheck","isTemplate":false,"tags":[],"sysTags":["unused"],"lang":"java","langName":"Java","htmlDesc":"<p>\nThe imports part of a file should be handled by the Integrated Development Environment (IDE), not manually by the developer.\nUnused and useless imports should not occur if that is the case.\nLeaving them in reduces the code's readability, since their presence can be confusing.\n</p>\n\n<p>The following code snippet illustrates this rule:</p>\n\n<pre>\npackage my.company;\n\nimport java.lang.String;        // Non-Compliant - java.lang classes are always implicitly imported\nimport my.company.SomeClass;    // Non-Compliant - same package files are always implicitly imported\nimport java.io.File;            // Non-Compliant - File is not used\n\nimport my.company2.SomeType;\nimport my.company2.SomeType;    // Non-Compliant - 'SomeType' is already imported\n\nclass ExampleClass {\n\n  public String someString;\n  public SomeType something;\n\n}\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"READABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"READABILITY","debtCharName":"Maintainability","debtSubCharName":"Readability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MINOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MINOR","params":[]}]},{"rule":{"key":"squid:MissingDeprecatedCheck","repo":"squid","name":"Deprecated elements should have both the annotation and the Javadoc tag","createdAt":"2013-08-30T17:20:57+0000","severity":"MAJOR","status":"READY","internalKey":"MissingDeprecatedCheck","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>Deprecation should be marked with both the <code>@Deprecated</code> annotation and @deprecated Javadoc tag. The annotation enables tools such as IDEs to warn about referencing deprecated elements, and the tag can be used to explain when it was deprecated, why, and how references should be refactored.</p>\n\n<p>The following code illustrates this rule:</p>\n\n<h2>Noncompliant Code Sample</h2>\n<pre>\nclass MyClass {\n\n@Deprecated\npublic void foo1() {\n}\n\n/**\n* @deprecated\n*/\npublic void foo2() {    // Non-Compliant\n}\n\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n\n/**\n* @deprecated (when, why, refactoring advice...)\n*/\n@Deprecated\npublic void foo1() {\n}\n\n/**\n* @deprecated (when, why, refactoring advice...)\n*/\n@Deprecated\npublic void foo2() {    // Non-Compliant\n}\n\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>The members and methods of a deprecated class or interface are ignored by this rule. The classes and interfaces themselves are still subject to it.</p>\n\n<pre>\n/**\n* @deprecated (when, why, &etc...)\n*/\n@Deprecated\nclass Qix  {\n\npublic void foo() {} // Compliant; class is deprecated\n\n}\n\n/**\n* @deprecated (when, why, &etc...)\n*/\n@Deprecated\ninterface Plop {\n\nvoid bar();\n\n}\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:ObjectFinalizeOverridenCheck","repo":"squid","name":"The Object.finalize() method should never be overriden","createdAt":"2013-08-30T17:20:57+0000","severity":"CRITICAL","status":"READY","internalKey":"ObjectFinalizeOverridenCheck","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nThis Object.finalize() method is called by the garbage collector on an object when garbage collection determines that there are no more references to the object.\nBut there is absolutely no warranty that this method will be called AS SOON AS the last references to the object are removed.\nIt can be few microseconds to few minutes later.\nSo when some system resources need to be disposed by an object it's better to not rely on this asynchronous mechanism to dispose them.\n</p>\n\n<p>\nThe following piece of code illustrates this rule:\n</p>\n\n<pre>\npublic class MyClass {\n\n  protected void finalize() {\n    releaseSomeResources();     // Non-Compliant\n  }\n\n}\n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"ARCHITECTURE_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"ARCHITECTURE_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Architecture","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"squid:LowerCaseLongSuffixCheck","repo":"squid","name":"Long suffix \"L\" should be upper case","createdAt":"2013-08-30T17:20:57+0000","severity":"MAJOR","status":"READY","internalKey":"LowerCaseLongSuffixCheck","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","htmlDesc":"<p>\nThe long suffix should always be written in upper case, i.e. 'L', as the lower case 'l' can easily be confused with the digit one '1'.\n</p>\n\n<p>\nThe following code:\n</p>\n\n<pre>\nlong n = 10l;  // Non-Compliant - easily confused with one zero one\n</pre>\n\n<p>\nshould be refactored into:\n</p>\n\n<pre>\nlong n = 10L;  // Compliant\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"READABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"READABILITY","debtCharName":"Maintainability","debtSubCharName":"Readability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:S1118","repo":"squid","name":"Utility classes should not have a public constructor","createdAt":"2013-08-30T17:20:57+0000","severity":"MAJOR","status":"READY","internalKey":"S1118","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nUtility classes, which are a collection of static members, are not meant to be instantiated.\nEven abstract utility classes, which can be extended, should not have public constructors.\n</p>\n\n<p>\nJava adds an implicit public constructor to every class which does not define at least one explicitly.\nHence, at least one non-public constructor should be defined.\n</p>\n</p>\n\n<p>The following code:</p>\n\n<pre>\nclass StringUtils { // Non-Compliant\n\n  public static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\nclass StringUtils { // Compliant\n\n  private StringUtils() {\n  }\n\n  public static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:S1125","repo":"squid","name":"Literal boolean values should not be used in condition expressions","createdAt":"2013-08-30T17:20:57+0000","severity":"MINOR","status":"READY","internalKey":"S1125","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nRemove literal boolean values from conditional expressions to improve readability. Anything that can be tested for equality with a boolean value must itself be a boolean value, and boolean values can be tested atomicly.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nif (booleanVariable == true) { /* ... */ }\nif (booleanVariable != true) { /* ... */ }\nif (booleanVariable || false) { /* ... */ }\ndoSomething(!false);\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nif (booleanVariable) { /* ... */ }\nif (!booleanVariable) { /* ... */ }\nif (booleanVariable) { /* ... */ }\ndoSomething(true);\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MINOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MINOR","params":[]}]},{"rule":{"key":"squid:S1126","repo":"squid","name":"Return of boolean expressions should not be wrapped into an if-then-else statement","createdAt":"2013-08-30T17:20:57+0000","severity":"MAJOR","status":"READY","internalKey":"S1126","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nReturn of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (expression) {\n  return true;\n} else {\n  return false;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nreturn expression;   \n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"READABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"READABILITY","debtCharName":"Maintainability","debtSubCharName":"Readability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:ClassVariableVisibilityCheck","repo":"squid","name":"Class variable fields should not have public accessibility","createdAt":"2013-08-30T17:20:57+0000","severity":"MAJOR","status":"READY","internalKey":"ClassVariableVisibilityCheck","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nPublic class variable fields do not respect the encapsulation principle and has two main disadvantages:\n</p>\n\n<ul>\n  <li>Additional behavior such as validation cannot be added.</li>\n  <li>The internal representation is exposed, and cannot be changed afterwards.</li>\n</ul>\n\n<p>The following code:</p>\n\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  public String firstName;                       // Non-Compliant\n\n}\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  private String firstName;                      // Compliant\n\n  public String getFirstName() {\n    return firstName;\n  }\n\n  public void setFirstName(String firstName) {\n    this.firstName = firstName;\n  }\n\n}\n</pre>","defaultDebtChar":"CHANGEABILITY","defaultDebtSubChar":"ARCHITECTURE_CHANGEABILITY","debtChar":"CHANGEABILITY","debtSubChar":"ARCHITECTURE_CHANGEABILITY","debtCharName":"Changeability","debtSubCharName":"Architecture","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:RightCurlyBraceSameLineAsNextBlockCheck","repo":"squid","name":"Right curly brace and next \"else\", \"catch\" and \"finally\" keywords should be located on the same line","createdAt":"2013-08-30T17:20:57+0000","severity":"MAJOR","status":"READY","internalKey":"RightCurlyBraceSameLineAsNextBlockCheck","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","htmlDesc":"<p>\nSharing some coding conventions is a key point to make it possible for a team to efficiently collaborate.\nThis rule make it mandatory to place closing curly braces on the same line that next <code>else</code>, <code>catch</code> or <code>finally</code> keywords.\n</p>\n\n<p>\nThe following code snippet illustrates this rule:\n</p>\n\n<pre>\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  } else if (somethingElse) {          // Compliant\n    doSomethingElse();\n  }\n  else {                               // Non-Compliant\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  } catch (Exception e) {              // Compliant\n    log(e);\n  }\n  finally {                            // Non-Compliant\n    closeConnection();\n  }\n}\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"READABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"READABILITY","debtCharName":"Maintainability","debtSubCharName":"Readability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:S1066","repo":"squid","name":"Collapsible \"if\" statements should be merged","createdAt":"2013-08-30T17:20:57+0000","severity":"MAJOR","status":"READY","internalKey":"S1066","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nif (file != null) {\n  if (file.isFile() || file.isDirectory()) {\n    /* ... */\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nif (file != null && isFileOrDirectory(file)) { \n  /* ... */\n}\n\nprivate static boolean isFileOrDirectory(File file) {\n  return file.isFile() || file.isDirectory();\n}\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"READABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"READABILITY","debtCharName":"Maintainability","debtSubCharName":"Readability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:S1067","repo":"squid","name":"Expressions should not be too complex","createdAt":"2013-08-30T17:20:57+0000","severity":"MAJOR","status":"READY","internalKey":"S1067","isTemplate":false,"tags":[],"sysTags":["brain-overload"],"lang":"java","langName":"Java","htmlDesc":"<p>\nThe complexity of an expression is defined by the number of <code>&&</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code> operators it contains.\nA single expression's complexity should not become too high to keep the code readable.\n</p>\n\n<p>The following code, with a maximum complexity of 3:</p>\n\n<pre>\nif (condition1 && condition2 && condition3 && condition4) { /* ... */ }  // Non-Compliant\n</pre>\n\n<p>could be refactored into something like:</p>\n\n<pre>\nif (relevantMethodName1() && relevantMethodName2()) { /* ... */ }        // Compliant\n\n/* ... */\n\nprivate boolean relevantMethodName1() {\n  return condition1 && condition2;\n}\n\nprivate boolean relevantMethodName2() {\n  return condition3 && condition4;\n}\n</pre>","defaultDebtChar":"TESTABILITY","defaultDebtSubChar":"UNIT_TESTABILITY","debtChar":"TESTABILITY","debtSubChar":"UNIT_TESTABILITY","debtCharName":"Testability","debtSubCharName":"Unit level","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","params":[{"key":"max","htmlDesc":"Maximum number of allowed conditional operators in an expression","type":"INTEGER","defaultValue":"3"}]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[{"key":"max","value":"3"}]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[{"key":"max","value":"3"}]}]},{"rule":{"key":"squid:EmptyStatementUsageCheck","repo":"squid","name":"Empty statements should be removed","createdAt":"2013-08-30T17:20:57+0000","severity":"MAJOR","status":"READY","internalKey":"EmptyStatementUsageCheck","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>Empty statements, i.e. <code>;</code>, are usually introduced by mistake, for example because:</p>\n\n<ul>\n  <li>It was meant to be replaced by an actual statement, but this was forgotten.</li>\n  <li>There was a typo which lead to the semicolon to be doubled, i.e. <code>;;</code>.</li>\n</ul>\n\n<p>Examples:</p>\n\n<pre>\nvoid doSomething() {\n  ;                                                       // Non-Compliant - was used as a kind of TODO marker\n}\n</pre>\n\n<pre>\nSystem.out.println(\"Hello, world!\");;                     // Non-Compliant - double ;\n</pre>\n\n<p>Rarely, they are used on purpose, as the body of a loop:</p>\n\n<pre>\nfor (int i = 0; i < 3; System.out.println(i), i++);       // Non-Compliant\n</pre>\n\n<p>It is a bad practice to have side-effects outside of the loop body, and therefore that code should be refactored into:</p>\n\n<pre>\nfor (int i = 0; i < 3; i ++) {                            // Compliant\n  System.out.println(i);\n}\n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:S1132","repo":"squid","name":"Strings literals should be placed on the left side when checking for equality","createdAt":"2013-08-30T17:20:57+0000","severity":"MAJOR","status":"READY","internalKey":"S1132","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nIt is preferable to place string literals on the left-hand side of an <code>equals()</code> or <code>equalsIgnoreCase()</code> method call.\nThis prevents null pointer exceptions from being raised, as a string literal can never be null by definition.\n</p>\n\n<p>The following code:</p>\n\n<pre>\nString myString = null;\n\nSystem.out.println(\"Equal? \" + myString.equals(\"foo\"));                        // Non-Compliant - will raise a NPE\nSystem.out.println(\"Equal? \" + (myString != null && myString.equals(\"foo\")));  // Non-Compliant - null check could be removed\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\nSystem.out.println(\"Equal?\" + \"foo\".equals(myString));                         // Compliant - properly deals with the null case\n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:S1133","repo":"squid","name":"Deprecated code should be removed eventually","createdAt":"2013-08-30T17:20:57+0000","severity":"INFO","status":"READY","internalKey":"S1133","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nThis rule is meant to be used as a way to track code which is marked as being deprecated.\nDeprecated code should eventually be removed.\n</p>\n\n<p>\nThe following code illustrates this rule:\n</p>\n\n<pre>\nclass Foo {\n  /**\n    * @deprecated\n    */\n  public void foo() {    // Non-Compliant\n  }\n\n  @Deprecated            // Non-Compliant\n  public void bar() {\n  }\n\n  public void baz() {    // Compliant\n  }\n}\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"INFO","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"INFO","params":[]}]},{"rule":{"key":"squid:S1134","repo":"squid","name":"FIXME tags should be handled","createdAt":"2013-08-30T17:20:57+0000","severity":"MAJOR","status":"READY","internalKey":"S1134","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\n<code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.\nSometimes the developer will not have the time or will simply forget to get back to that tag.\nThis rule is meant to track those tags, and ensure that they do not go unnoticed.\n</p>\n\n<p>The following code illustrates this rule:</p>\n\n<pre>\nint divide(int numerator, int denominator) {\n  return numerator / denominator;              // FIXME denominator = 0, Non-Compliant\n}\n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:S1135","repo":"squid","name":"TODO tags should be handled","createdAt":"2013-08-30T17:20:57+0000","severity":"INFO","status":"READY","internalKey":"S1135","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\n<code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.\nSometimes the developer will not have the time or will simply forget to get back to that tag.\nThis rule is meant to track those tags, and ensure that they do not go unnoticed.\n</p>\n\n<p>The following code illustrates this rule:</p>\n\n<pre>\nvoid doSomething() {\n  // TODO\n}\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"INFO","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"INFO","params":[]}]},{"rule":{"key":"squid:S1197","repo":"squid","name":"Array designators \"[]\" should be on the type, not the variable","createdAt":"2013-08-30T17:20:57+0000","severity":"MINOR","status":"READY","internalKey":"S1197","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","htmlDesc":"<p>\nArray designators should always be located on the type for better code readability.\nOtherwise, developers must look both at the type and the variable name to know whether or not a variable is an array.\n</p>\n\n<p>The following code snippet illustrates this rule:</p>\n\n<pre>\nint matrix[][];   // Non-Compliant\nint[] matrix[];   // Non-Compliant\nint[][] matrix;   // Compliant\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"READABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"READABILITY","debtCharName":"Maintainability","debtSubCharName":"Readability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MINOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MINOR","params":[]}]},{"rule":{"key":"squid:S1199","repo":"squid","name":"Nested code blocks should not be used","createdAt":"2013-08-30T17:20:57+0000","severity":"MAJOR","status":"READY","internalKey":"S1199","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nNested code blocks can be used to create a new scope and restrict the visibility of the variables defined within.\nUsing this feature in a method typically indicates that it takes on too many responsibilities, and should be refactored into smaller ones.\n</p>\n\n<p>The following code:</p>\n\n<pre>\npublic void evaluate(int operator) {\n  switch (operator) {\n    /* ... */\n    case ADD: {                                // Non-Compliant - nested code block '{' ... '}'\n        int a = stack.pop();\n        int b = stack.pop();\n        int result = a + b;\n        stack.push(result);\n        break;\n      }\n    /* ... */\n  }\n}\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\npublic void evaluate(int operator) {\n  switch (operator) {\n    /* ... */\n    case ADD:                                  // Compliant\n      evaluateAdd();\n      break;\n    /* ... */\n  }\n}\n\nprivate void evaluateAdd() {\n  int a = stack.pop();\n  int b = stack.pop();\n  int result = a + b;\n  stack.push(result);\n}\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:S1149","repo":"squid","name":"Synchronized classes Vector, Hashtable, Stack and StringBuffer should not be used","createdAt":"2013-08-30T17:20:57+0000","severity":"MAJOR","status":"READY","internalKey":"S1149","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nEarly classes of the Java API, such as <code>Vector</code>, <code>Hashtable</code> and <code>StringBuffer</code>, were synchronized to make them thread-safe.\nUnfortunately, synchronization has a big negative impact on performance, even when using these collections from a single thread.\n</p>\n\n<p>It is better to use their new unsynchronized replacements:</p>\n\n<ul>\n  <li><code>ArrayList</code> or <code>LinkedList</code> instead of <code>Vector</code></li>\n  <li><code>Deque</code> instead of <code>Stack</code></li>\n  <li><code>HashMap</code> instead of <code>Hashtable</code></li>\n  <li><code>StringBuilder</code> instead of <code>StringBuffer</code></li>\n</ul>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nVector cats = new Vector();\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nArrayList cats = new ArrayList(); \n</pre>\n\n<h2>Exceptions</h2>\n\n<p>Use of those synchronized classes is allowed in method signatures when overriding an existing method.</p>\n\n<pre>\n@Override\npublic Vector getCats() {...} \n</pre>","defaultDebtChar":"EFFICIENCY","defaultDebtSubChar":"CPU_EFFICIENCY","debtChar":"EFFICIENCY","debtSubChar":"CPU_EFFICIENCY","debtCharName":"Efficiency","debtSubCharName":"Processor use","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:UselessParenthesesCheck","repo":"squid","name":"Useless parentheses around expressions should be removed to prevent any misunderstanding","createdAt":"2013-08-30T17:20:57+0000","severity":"MAJOR","status":"READY","internalKey":"UselessParenthesesCheck","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nUseless parentheses can sometimes be misleading and so should be removed.\n</p>\n\n<p>\nThe following code snippet illustrates this rule:\n</p>\n\n<pre>\nreturn 3;             // Compliant\nreturn (x);           // Non-Compliant\nreturn (x + 1);       // Non-Compliant\nint x = (y / 2 + 1);  // Non-Compliant\nint y = (4+X) * y;    // Compliant\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"READABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"READABILITY","debtCharName":"Maintainability","debtSubCharName":"Readability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:S1215","repo":"squid","name":"Execution of the Garbage Collector should be triggered only by the JVM","createdAt":"2013-08-30T17:20:57+0000","severity":"CRITICAL","status":"READY","internalKey":"S1215","isTemplate":false,"tags":[],"sysTags":["bug"],"lang":"java","langName":"Java","htmlDesc":"<p>\nCalling <code>System.gc()</code> or <code>Runtime.getRuntime().gc()</code> is a bad idea for a simple reason:\nthere is no way to know exactly what will be done under the hood by the JVM because the behavior will depend on its vendor, version and options:\n</p>\n\n<ul>\n  <li>Will the whole application be frozen during the call?</li>\n  <li>Is the -XX:DisableExplicitGC option activated?</li>\n  <li>Will the JVM simply ignore the call?</li>\n  <li>...</li>\n</ul>\n\n<p>An application relying on those unpredictable methods is also unpredictable and therefore broken.</p>\n\n<p>The task of running the garbage collector should be left exclusively to the JVM.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"squid:S135","repo":"squid","name":"Loops should not contain more than a single \"break\" or \"continue\" statement","createdAt":"2013-08-30T17:20:57+0000","severity":"MAJOR","status":"READY","internalKey":"S135","isTemplate":false,"tags":[],"sysTags":["brain-overload"],"lang":"java","langName":"Java","htmlDesc":"<p>Restricting the number of <code>break</code> and <code>continue</code> statements in a loop is done in the interest of good structured programming.</p>\n\n<p>\nOne <code>break</code> and <code>continue</code> statement is acceptable in a loop, since it facilitates optimal coding. If there is more than one, the code should be refactored to increase readability.\n</p>\n\n<p>The following code:</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nfor (int i = 1; i <= 10; i++) {     // Noncompliant - 2 continue - one might be tempted to add some logic in between\n  if (i % 2 == 0) {\n    continue;\n  }\n\n  if (i % 3 == 0) {\n    continue;\n  }\n\n  System.out.println(\"i = \" + i);\n}\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:S1150","repo":"squid","name":"Enumeration should not be implemented","createdAt":"2013-08-30T17:20:57+0000","severity":"MAJOR","status":"READY","internalKey":"S1150","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>From the official Oracle Javadoc:</p>\n\n<blockquote>\nNOTE: The functionality of this Enumeration interface is duplicated by the Iterator interface.\nIn addition, Iterator adds an optional remove operation, and has shorter method names.\nNew implementations should consider using Iterator in preference to Enumeration.\n</blockquote>\n\n<p>The following code:</p>\n\n<pre>\npublic class MyClass implements Enumeration {  // Non-Compliant\n  /* ... */\n}\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\npublic class MyClass implements Iterator {     // Compliant\n  /* ... */\n}\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"READABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"READABILITY","debtCharName":"Maintainability","debtSubCharName":"Readability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:S1151","repo":"squid","name":"Switch cases should not have too many lines","createdAt":"2013-08-30T17:20:57+0000","severity":"MAJOR","status":"READY","internalKey":"S1151","isTemplate":false,"tags":[],"sysTags":["brain-overload"],"lang":"java","langName":"Java","htmlDesc":"<p>Switch cases should remain small to keep the overall switch compact and readable.</p>\n\n<p>The following code snippet illustrates this rule with the default threshold of 5:</p>\n\n<pre>\nswitch (myVariable) {\n  case 0:                     // Compliant - 5 lines till following case\n    System.out.println(\"\");\n    System.out.println(\"\");\n    System.out.println(\"\");\n    break;\n  default:                    // Non-Compliant - 6 lines till switch end\n    System.out.println(\"\");\n    System.out.println(\"\");\n    System.out.println(\"\");\n    System.out.println(\"\");\n    break;\n}\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"READABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"READABILITY","debtCharName":"Maintainability","debtSubCharName":"Readability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","params":[{"key":"max","htmlDesc":"Maximum allowed lines in a switch case","type":"INTEGER","defaultValue":"5"}]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[{"key":"max","value":"5"}]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[{"key":"max","value":"5"}]}]},{"rule":{"key":"squid:S1214","repo":"squid","name":"Constants should not be defined in interfaces","createdAt":"2013-08-30T17:20:57+0000","severity":"MINOR","status":"READY","internalKey":"S1214","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>According to Joshua Bloch, author of \"Effective Java\":</p>\n\n<blockquote>\n<p>\nThe constant interface pattern is a poor use of interfaces.\n</p>\n\n<p>\nThat a class uses some constants internally is an implementation detail.\nImplementing a constant interface causes this implementation detail to leak into the class's exported API.\nIt is of no consequence to the users of a class that the class implements a constant interface.\nIn fact, it may even confuse them.\nWorse, it represents a commitment:\nif in a future release the class is modified so that it no longer needs to use the constants,\nit still must implement the interface to ensure binary compatibility.\nIf a nonfinal class implements a constant interface,\nall of its subclasses will have their namespaces polluted by the constants in the interface.\n</p>\n</blockquote>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\ninterface Status {                      // Non-Compliant\n   int OPEN = 1;\n   int CLOSED = 2;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\npublic enum Status {                    // Compliant\n  OPEN,\n  CLOSED;\n}\n</pre>\n\n<p>or</p>\n\n<pre>\npublic final class Status {             // Compliant\n   public static final int OPEN = 1;\n   public static final int CLOSED = 2;\n}\n</pre>","defaultDebtChar":"CHANGEABILITY","defaultDebtSubChar":"ARCHITECTURE_CHANGEABILITY","debtChar":"CHANGEABILITY","debtSubChar":"ARCHITECTURE_CHANGEABILITY","debtCharName":"Changeability","debtSubCharName":"Architecture","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MINOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MINOR","params":[]}]},{"rule":{"key":"squid:ObjectFinalizeCheck","repo":"squid","name":"The Object.finalize() method should never be called","createdAt":"2013-08-30T17:20:57+0000","severity":"CRITICAL","status":"READY","internalKey":"ObjectFinalizeCheck","isTemplate":false,"tags":[],"sysTags":["pitfall"],"lang":"java","langName":"Java","htmlDesc":"<p>\nAccording to the official Java documentation, <code>Object.finalize()</code> is called by the garbage collector on an object when garbage collection determines that there are no more references to the object.\nCalling this method explicitly breaks this contract and so is misleading.\n</p>\n\n<p>\nThe following code snippet illustrates this rule:\n</p>\n\n<pre>\npublic void dispose() throws Throwable {\n  this.finalize();                       // Non-Compliant\n}\n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"ARCHITECTURE_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"ARCHITECTURE_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Architecture","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"squid:LeftCurlyBraceEndLineCheck","repo":"squid","name":"Left curly braces should be located at the end of lines of code","createdAt":"2013-08-30T17:20:57+0000","severity":"MAJOR","status":"READY","internalKey":"LeftCurlyBraceEndLineCheck","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","htmlDesc":"<p>\nSharing some coding conventions is a key point to make it possible for a team to efficiently collaborate.\nThis rule make it mandatory to place left curly braces at the end of lines of code.\n</p>\n\n<p>\nThe following code snippet illustrates this rule:\n</p>\n\n<pre>\npublic void myMethod() {              // Compliant\n  if(something)\n  {                                   // Non-Compliant\n    executeTask();\n  } else {                            // Compliant\n    doSomethingElse();\n  }\n  if( param1 && param2 && param3\n    && something3 && something4)\n  {                                   // Non-Compliant\n    executeAnotherTask();\n  }\n}\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"READABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"READABILITY","debtCharName":"Maintainability","debtSubCharName":"Readability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:RightCurlyBraceStartLineCheck","repo":"squid","name":"Right curly braces should be located at the beginning of lines of code","createdAt":"2013-08-30T17:20:57+0000","severity":"MAJOR","status":"READY","internalKey":"RightCurlyBraceStartLineCheck","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","htmlDesc":"<p>\nSharing some coding conventions is a key point to make it possible for a team to efficiently collaborate.\nThis rule make it mandatory to place right curly braces at the beginning of lines of code.\n</p>\n\n<p>\nThe following code snippet illustrates this rule:\n</p>\n\n<pre>\npublic void myMethod() {\n  if(something) {\n    executeTask();}                   // Non-Compliant\n  else if (somethingElse) {\n    doSomethingElse();\n  }                                   // Compliant\n\n  try {\n    generateOrder();\n  } finally {                         // Compliant\n    closeConnection();\n  }                                   // Compliant\n\n  try {\n    generateOrder();\n  } finally {                         // Compliant\n    closeConnection(); }              // Non-Compliant\n}\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"READABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"READABILITY","debtCharName":"Maintainability","debtSubCharName":"Readability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:S1141","repo":"squid","name":"Try-catch blocks should not be nested","createdAt":"2013-08-30T17:20:57+0000","severity":"MAJOR","status":"READY","internalKey":"S1141","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nNesting <code>try-catch</code> blocks severely impacts the readability of source code because it makes it to difficult to understand which block will catch which exception.\n</p>\n\n<p>The following code:</p>\n\n<pre>\ntry {\n  try {                                     // Non-Compliant\n    doSomething();\n  } catch (RuntimeException e) {\n    /* Ignore */\n  }\n\n  doSomethingElse();\n} catch (Exception e) {\n  /* ... */\n}\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\ntry {\n  dedicatedMethod();                        // Compliant\n  doSomethingElse();\n} catch (Exception e) {\n  /* ... */\n}\n\n/* ... */\n\nprivate void dedicatedMethod() {\n  try {                                     // Compliant\n    doSomething();\n  } catch (RuntimeException e) {\n    /* Ignore */\n  }\n}\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"READABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"READABILITY","debtCharName":"Maintainability","debtSubCharName":"Readability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:S1143","repo":"squid","name":"Return statements should not occur in finally blocks","createdAt":"2013-08-30T17:20:57+0000","severity":"BLOCKER","status":"READY","internalKey":"S1143","isTemplate":false,"tags":[],"sysTags":["bug"],"lang":"java","langName":"Java","htmlDesc":"<p>\nReturning from a <code>finally</code> block suppresses the propagation of any unhandled <code>Throwable</code> which was thrown in the <code>try</code> or <code>catch</code> block.\n</p>\n\n<p>\nThe following code snippet illustrates this rule.\nThe developer expects to get \"ERROR\" in the console whereas \"OK\" is displayed.\n</p>\n\n<pre>\npublic static void main(String[] args) {\n  try {\n    doSomethingWhichThrowsException();\n    System.out.println(\"OK\");\n  } catch (RuntimeException e) {\n    System.out.println(\"ERROR\");\n  }\n}\n\npublic static void doSomethingWhichThrowsException() {\n  try {\n    throw new RuntimeException();\n  } finally {\n    /* ... */\n    return;                                        // Non-Compliant - prevents the RuntimeException from being propagated\n  }\n}\n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"BLOCKER","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"BLOCKER","params":[]}]},{"rule":{"key":"squid:S1191","repo":"squid","name":"Classes from \"com.sun.*\" and \"sun.*\" packages should not be used","createdAt":"2013-08-30T17:20:57+0000","severity":"MAJOR","status":"READY","internalKey":"S1191","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nClasses in <code>com.sun.*</code> and <code>sun.*</code> packages are considered implementation details, and are not part of the Java API.\nThey can cause problems when moving to new versions of Java because there is no backwards compatibility guarantee.\nSuch classes are almost always wrapped by Java API classes that should be used instead.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nimport com.sun.jna.Native;     // Non-Compliant\nimport sun.misc.BASE64Encoder; // Non-Compliant\n</pre>","defaultDebtChar":"PORTABILITY","defaultDebtSubChar":"COMPILER_RELATED_PORTABILITY","debtChar":"PORTABILITY","debtSubChar":"COMPILER_RELATED_PORTABILITY","debtCharName":"Portability","debtSubCharName":"Compiler","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[{"key":"exclude","htmlDesc":"Comma separated list of Sun packages to be ignored by this rule. Example: com.sun.jna,sun.misc","type":"STRING"}]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[{"key":"exclude","value":""}]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[{"key":"exclude","value":""}]}]},{"rule":{"key":"squid:S1190","repo":"squid","name":"\"enum\" should no longer be used as a name","createdAt":"2013-08-30T17:20:57+0000","severity":"MAJOR","status":"READY","internalKey":"S1190","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nAs of Java 5, <code>enum</code> is a keyword and can therefore no longer be used a variable names for instance.\nRecent versions of the Java compiler will generate errors while compiling code still using <code>enum</code> as a name.\n</p>\n\n<p>The following code snippet illustrates this rule:</p>\n\n<pre>\npublic void doSomething() {\n  int enum = 42;            // Non-Compliant\n}\n</pre>","defaultDebtChar":"PORTABILITY","defaultDebtSubChar":"COMPILER_RELATED_PORTABILITY","debtChar":"PORTABILITY","debtSubChar":"COMPILER_RELATED_PORTABILITY","debtCharName":"Portability","debtSubCharName":"Compiler","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:S1145","repo":"squid","name":"If statement conditions should not always evaluate to \"true\" or to \"false\"","createdAt":"2013-08-30T17:20:57+0000","severity":"MAJOR","status":"READY","internalKey":"S1145","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nIf statements with conditions that are always either true or false are not required, and make the code less readable.\n</p>\n\n<p>The following code:</p>\n\n<pre>\npublic void myMethod() {\n  if (true) {                   // Non-Compliant\n    doSomething();\n  }\n}\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\npublic void myMethod() {\n  doSomething();                // Compliant\n}\n</pre>\n\n<p>and the following code:</p>\n\n<pre>\npublic void myMethod() {\n  if (false) {                  // Non-Compliant\n    doSomething();\n  }\n}\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\npublic void myMethod() {        // Compliant\n}\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:S1193","repo":"squid","name":"Exception types should not be tested using \"instanceof\" in catch blocks","createdAt":"2013-08-30T17:20:57+0000","severity":"MAJOR","status":"READY","internalKey":"S1193","isTemplate":false,"tags":[],"sysTags":["error-handling"],"lang":"java","langName":"Java","htmlDesc":"<p>\nMultiple catch blocks of the appropriate type should be used instead of catching a general exception, and then testing on the type.\n</p>\n\n<p>For example, following code:</p>\n\n<pre>\ntry {\n  /* ... */\n} catch (Exception e) {\n  if(e instanceof IOException) { /* ... */ }         // Non-Compliant\n  if(e instanceof NullPointerException{ /* ... */ }  // Non-Compliant\n}\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\ntry {\n  /* ... */\n} catch (IOException e) { /* ... */ }                // Compliant\n} catch (NullPointerException e) { /* ... */ }       // Compliant\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:S1192","repo":"squid","name":"String literals should not be duplicated","createdAt":"2013-08-30T17:20:57+0000","severity":"MINOR","status":"READY","internalKey":"S1192","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\n  Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.\n  On the other hand, constants can be referenced from many places, but only need to be updated in a single place.\n</p>\n\n<h2>Non Compliant Code Example</h2>\n\n<pre>\npublic void run() {\n  prepare(\"action1\");                              // Non-Compliant - \"action1\" is duplicated 3 times\n  execute(\"action1\");\n  release(\"action1\");\n}\n\n@SuppressWarning(\"all\")                            // Compliant - annotations are excluded\nprivate void method1() { /* ... */ }\n@SuppressWarning(\"all\")\nprivate void method2() { /* ... */ }\n\npublic String method3(String a) {\n  System.out.println(\"'\" + a + \"'\");               // Compliant - literal \"'\" has less than 5 characters and is excluded\n  return \"\";                                       // Compliant - literal \"\" has less than 5 characters and is excluded\n}\n</pre>\n\n<h2>Compliant Code Example</h2>\n\n<pre>\nprivate static final String ACTION_1 = \"action1\";  // Compliant\n\npublic void run() {\n  prepare(ACTION_1);                               // Compliant\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"DATA_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"DATA_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Data","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","params":[{"key":"threshold","htmlDesc":"Number of times a literal must be duplicated to trigger an issue","type":"INTEGER","defaultValue":"3"}]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MINOR","params":[{"key":"threshold","value":"3"}]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MINOR","params":[{"key":"threshold","value":"3"}]}]},{"rule":{"key":"squid:S1147","repo":"squid","name":"System.exit(...) and Runtime.getRuntime().exit(...) should not be called","createdAt":"2013-08-30T17:20:57+0000","severity":"CRITICAL","status":"READY","internalKey":"S1147","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nCalling <code>System.exit(int status)</code> or <code>Rutime.getRuntime().exit(int status)</code> calls the shutdown hooks and shuts downs the entire Java virtual machine.\n  Calling <code>Runtime.getRuntime().halt(int)</code> does an immediate shutdown, without calling the shutdown hooks, and skipping finalization.</p>\n\n<p>Each of these methods should be used with extreme care, and only when the intent is to stop the whole Java process. For instance, none of them should be called from applications running in a J2EE container.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nSystem.exit(0);\nRuntime.getRuntime().exit(0);\n  Runtime.getRuntime().halt(0);\n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"ARCHITECTURE_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"ARCHITECTURE_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Architecture","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"squid:S106","repo":"squid","name":"System.out and System.err should not be used as loggers","createdAt":"2013-08-30T17:20:57+0000","severity":"MAJOR","status":"READY","internalKey":"S106","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>Two important requirements must be fulfilled when logging messages:</p>\n\n<ul>\n  <li>The user must be able to easily retrieve the logs.</li>\n  <li>The format of all messages must be uniform to enable users to easily browse them.</li>\n</ul>\n\n<p>\nIf a program directly writes to the standard output, there is absolutely no way to comply with these requirements.\nThat's why defining and using a dedicated logger is highly recommended.\n</p>\n\n<p>\nThe following code snippet illustrates this rule:\n</p>\n\n<pre>\nSystem.out.println(\"My Message\");  // Non-Compliant\n\nlogger.log(\"My Message\");          // Compliant\n</pre>","defaultDebtChar":"SECURITY","defaultDebtSubChar":"ERRORS","debtChar":"SECURITY","debtSubChar":"ERRORS","debtCharName":"Security","debtSubCharName":"Errors","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:S1195","repo":"squid","name":"Array designators \"[]\" should be located after the type in method signatures","createdAt":"2013-08-30T17:20:57+0000","severity":"MINOR","status":"READY","internalKey":"S1195","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","htmlDesc":"<p>\nAccording to the Java Language Specification:\n</p>\n\n<pre>\nFor compatibility with older versions of the Java SE platform,\nthe declaration of a method that returns an array is allowed to place (some or all of) the empty bracket pairs that form the declaration of the array type after the formal parameter list.\nThis obsolescent syntax should not be used in new code.\n</pre>\n\n<p>The following code snippet illustrates this rule:</p>\n\n<pre>\npublic int getVector()[] { /* ... */ }    // Non-Compliant\n\npublic int[] getVector() { /* ... */ }    // Compliant\n\npublic int[] getMatrix()[] { /* ... */ }  // Non-Compliant\n\npublic int[][] getMatrix() { /* ... */ }  // Compliant\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"READABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"READABILITY","debtCharName":"Maintainability","debtSubCharName":"Readability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MINOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MINOR","params":[]}]},{"rule":{"key":"squid:ObjectFinalizeOverridenCallsSuperFinalizeCheck","repo":"squid","name":"super.finalize() should be called at the end of Object.finalize() implementations","createdAt":"2013-08-30T17:20:57+0000","severity":"BLOCKER","status":"READY","internalKey":"ObjectFinalizeOverridenCallsSuperFinalizeCheck","isTemplate":false,"tags":[],"sysTags":["bug"],"lang":"java","langName":"Java","htmlDesc":"<p>\nOverriding the <code>Object.finalize()</code> method must be done with caution to dispose some system resources.\nCalling the <code>super.finalize()</code> at the end of this method implementation is highly recommended in case parent implementations must also dispose some system resources.\n</p>\n\n<p>\nThe following code snippet illustrates this rule:\n</p>\n\n<pre>\nprotected void finalize() {            // Non-Compliant\n  releaseSomeResources();\n}\n\nprotected void finalize() {\n  super.finalize();                    // Non-Compliant\n  releaseSomeResources();\n}\n\nprotected void finalize() {\n  releaseSomeResources();\n  super.finalize();                    // Compliant\n}\n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"BLOCKER","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"BLOCKER","params":[]}]},{"rule":{"key":"squid:S1148","repo":"squid","name":"Throwable.printStackTrace(...) should never be called","createdAt":"2013-08-30T17:20:57+0000","severity":"CRITICAL","status":"READY","internalKey":"S1148","isTemplate":false,"tags":[],"sysTags":["error-handling"],"lang":"java","langName":"Java","htmlDesc":"<p>\n<code>Throwable.printStackTrace(...)</code> prints a throwable and its stack trace to some stream.\n</p>\n\n<p>Loggers should be used instead to print throwables, as they have many advantages:</p>\n<ul>\n  <li>Users are able to easily retrieve the logs.</li>\n  <li>The format of log messages is uniform and allow users to browse the logs easily.</li>\n</ul>\n\n<p>The following code:</p>\n\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  e.printStackTrace();        // Non-Compliant\n}\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  LOGGER.log(\"context\", e);   // Compliant\n}\n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"EXCEPTION_HANDLING","debtChar":"RELIABILITY","debtSubChar":"EXCEPTION_HANDLING","debtCharName":"Reliability","debtSubCharName":"Exception handling","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"squid:S1194","repo":"squid","name":"\"java.lang.Error\" should not be extended","createdAt":"2013-08-30T17:20:57+0000","severity":"MAJOR","status":"READY","internalKey":"S1194","isTemplate":false,"tags":[],"sysTags":["error-handling"],"lang":"java","langName":"Java","htmlDesc":"<p>\n<code>java.lang.Error</code> and its subclasses represent abnormal conditions, such as <code>OutOfMemoryError</code>, which should only be encountered by the Java Virtual Machine.\n</p>\n\n<p>The following code snippet:</p>\n\n<pre>\npublic class MyException extends Error { /* ... */ }       // Non-Compliant\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\npublic class MyException extends Exception { /* ... */ }   // Compliant\n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"EXCEPTION_HANDLING","debtChar":"RELIABILITY","debtSubChar":"EXCEPTION_HANDLING","debtCharName":"Reliability","debtSubCharName":"Exception handling","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:TrailingCommentCheck","repo":"squid","name":"Comments should not be located at the end of lines of code","createdAt":"2013-08-30T17:20:57+0000","severity":"MINOR","status":"READY","internalKey":"TrailingCommentCheck","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","htmlDesc":"<p>\nThis rule verifies that single-line comments are not located at the end of a line of code.\nThe main idea behind this rule is that in order to be really readable, trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of the code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable.\nComments are far better placed on the previous empty line\nof code, where they will always be visible and properly formatted.\n</p>\n\n<p>\nHowever, this rule allows to write trailing \"metadata comments\" - for which the pattern is configurable, as those metadata comments are usually very short and heavily used in some cases.\n</p>\n\n<pre>\n// The following line is non-compliant\nint a1 = b + c; // This is a trailing comment that can be very very long\n\n// This very long comment is better placed before the line of code\nint a2 = b + c;\n\n// The following line is compliant with the default configuration of the rule\nString a3 = \"id\"; // $NON-NLS-1$\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"READABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"READABILITY","debtCharName":"Maintainability","debtSubCharName":"Readability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1min","params":[{"key":"legalCommentPattern","htmlDesc":"Pattern for text of trailing comments that are allowed.","type":"STRING","defaultValue":"^\\s*+[^\\s]++$"}]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MINOR","params":[{"key":"legalCommentPattern","value":"^\\s*+[^\\s]++$"}]}]},{"rule":{"key":"squid:S00112","repo":"squid","name":"Generic exceptions Error, RuntimeException, Throwable and Exception should never be thrown","createdAt":"2013-06-19T09:21:15+0000","severity":"MAJOR","status":"READY","internalKey":"S00112","isTemplate":false,"tags":[],"sysTags":["error-handling"],"lang":"java","langName":"Java","htmlDesc":"<p>\nUsing such generic exception prevents calling methods from handling differently each kind of error.\n</p>\n\n<h2>\nNoncompliant Code Example\n</h2>\n\n<pre>\npublic void foo(String bar) throws Throwable { // Noncompliant\n  throw new RuntimeException(\"My Message\");    // Noncompliant\n}\n</pre>\n\n<h2>\nCompliant Solution\n</h2>\n\n<pre>\npublic void foo(String bar) {\n  throw new MyOwnRuntimeException(\"My Message\");\n}\n</pre>\n\n<h2>\nExceptions\n</h2>\n\n<p>\nGeneric exceptions in signature of overriding methods are excluded\n</p>\n\n<pre>\n@Override\npublic void myMethod() throws Exception {...}\n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"EXCEPTION_HANDLING","debtChar":"RELIABILITY","debtSubChar":"EXCEPTION_HANDLING","debtCharName":"Reliability","debtSubCharName":"Exception handling","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:S00107","repo":"squid","name":"Methods should not have too many parameters","createdAt":"2013-06-19T09:21:15+0000","severity":"MAJOR","status":"READY","internalKey":"S00107","isTemplate":false,"tags":[],"sysTags":["brain-overload"],"lang":"java","langName":"Java","htmlDesc":"<p>\nA long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the method is doing too many things.\n</p>","defaultDebtChar":"TESTABILITY","defaultDebtSubChar":"UNIT_TESTABILITY","debtChar":"TESTABILITY","debtSubChar":"UNIT_TESTABILITY","debtCharName":"Testability","debtSubCharName":"Unit level","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[{"key":"maximumMethodParameters","htmlDesc":"The maximum authorized number of parameters.","type":"INTEGER","defaultValue":"7"}]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[{"key":"maximumMethodParameters","value":"7"}]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[{"key":"maximumMethodParameters","value":"7"}]}]},{"rule":{"key":"squid:S00108","repo":"squid","name":"Nested blocks of code should not be left empty","createdAt":"2013-06-19T09:21:15+0000","severity":"MAJOR","status":"READY","internalKey":"S00108","isTemplate":false,"tags":[],"sysTags":["bug"],"lang":"java","langName":"Java","htmlDesc":"<p>\nMost of the time a block of code is empty when a piece of code is really missing.\nSo such empty block must be either filled or removed.\nWhen a block contains a comment, this block is not considered to be empty.\n</p>\n\n<p>The following code snippet illustrates this rule:</p>\n\n<pre>\nvoid doSomething() {\n  for (int i = 0; i < 42; i++)        // Non-Compliant\n  {\n  }\n  for (int i = 0; i < 42; i++);       // Compliant\n\n  if (myVar == 4)                     // Compliant - contains a comment\n  {\n    // Do nothing because of X and Y\n  }\n  else                                // Compliant\n  {\n    doSomething();\n  }\n\n  try                                 // Non-Compliant\n  {\n  }\n  catch (Exception e)                 // Compliant\n  {\n    // Ignore\n  }\n}\n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:S00105","repo":"squid","name":"Tabulation characters should not be used","createdAt":"2013-06-19T09:21:15+0000","severity":"MINOR","status":"READY","internalKey":"S00105","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","htmlDesc":"<p>\nDevelopers should not need to configure the tab width of their text editors in order to be able to read source code.\nSo the use of tabulation character must be banned.\n</p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"READABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"READABILITY","debtCharName":"Maintainability","debtSubCharName":"Readability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MINOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MINOR","params":[]}]},{"rule":{"key":"squid:S00122","repo":"squid","name":"Statements should be on separate lines","createdAt":"2013-06-19T09:21:15+0000","severity":"MAJOR","status":"READY","internalKey":"S00122","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","htmlDesc":"<p>\nFor better readability, do not put more than one statement on a single line.\n</p>\n\n<p>\nThe following code snippet illustrates this rule:\n</p>\n<pre>\na = \"something\"; b = \"somethingElse\"; // Non-Compliant\nc = \"anotherThing\"; // Compliant\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"READABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"READABILITY","debtCharName":"Maintainability","debtSubCharName":"Readability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:S00120","repo":"squid","name":"Package names should comply with a naming convention","createdAt":"2013-06-19T09:21:15+0000","severity":"MAJOR","status":"READY","internalKey":"S00120","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","htmlDesc":"<p>\nSharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all package names match a provided regular expression.\n</p>\n\n<p>\nThe following code snippet illustrates this rule when the regular expression value is \"^[a-z]+(\\\\.[a-z][a-z0-9]*)*$\":\n</p>\n<pre>\npackage org.Example; // Non-Compliant\n\npackage org.example; // Compliant\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"READABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"READABILITY","debtCharName":"Maintainability","debtSubCharName":"Readability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","params":[{"key":"format","htmlDesc":"Regular expression used to check the package names against.","type":"STRING","defaultValue":"^[a-z]+(\\.[a-z][a-z0-9]*)*$"}]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[{"key":"format","value":"^[a-z]+(\\.[a-z][a-z0-9]*)*$"}]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[{"key":"format","value":"^[a-z]+(\\.[a-z][a-z0-9]*)*$"}]}]},{"rule":{"key":"squid:S00121","repo":"squid","name":"if/else/for/while/do statements should always use curly braces","createdAt":"2013-06-19T09:21:15+0000","severity":"MAJOR","status":"READY","internalKey":"S00121","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","htmlDesc":"<p>\nNot using curly braces could be error-prone in some cases. For instance in the following example, the two statements seems to be attached to the if statement whereas this is the case only for the first one:\n</p>\n<pre>\nif (condition) // Non-Compliant\n  executeSomething();\n  checkSomething();\n\nif (condition) { // Compliant\n  executeSomething();\n}\ncheckSomething();\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"READABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"READABILITY","debtCharName":"Maintainability","debtSubCharName":"Readability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:S00101","repo":"squid","name":"Class names should comply with a naming convention","createdAt":"2013-06-19T09:21:15+0000","severity":"MAJOR","status":"READY","internalKey":"S00101","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","htmlDesc":"<p>\nSharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all class names match a provided regular expression.\n</p>\n\n<p>\nThe following code snippet illustrates this rule when the regular expression value is \"^[A-Z][a-zA-Z0-9]*$\":\n</p>\n<pre>\npublic class MyFirstClass { ... } // Compliant\n\npublic class mySecondClass { ... }    // Non-Compliant\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"READABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"READABILITY","debtCharName":"Maintainability","debtSubCharName":"Readability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","params":[{"key":"format","htmlDesc":"Regular expression used to check the class names against.","type":"STRING","defaultValue":"^[A-Z][a-zA-Z0-9]*$"}]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[{"key":"format","value":"^[A-Z][a-zA-Z0-9]*$"}]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[{"key":"format","value":"^[A-Z][a-zA-Z0-9]*$"}]}]},{"rule":{"key":"squid:S00100","repo":"squid","name":"Method names should comply with a naming convention","createdAt":"2013-06-19T09:21:15+0000","severity":"MAJOR","status":"READY","internalKey":"S00100","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","htmlDesc":"<p>\nSharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all function/method names match a provided regular expression.\n</p>\n\n<h2>\nNoncompliant Code Example\n</h2>\n<p>\nWith default provided regular expression: \"^[a-z][a-zA-Z0-9]*$\":\n</p>\n<pre>\npublic void Do_Something() {...}\n</pre>\n\n<h2>\nCompliant Solution\n</h2>\n<pre>\npublic void doSomething(int value) {…}\n}\n</pre>\n\n<h2>\nExceptions\n</h2>\n<p>\nOverriding methods are excluded.\n</p>\n<pre>\n@Override\npublic void Do_Something() {...}\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"READABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"READABILITY","debtCharName":"Maintainability","debtSubCharName":"Readability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","params":[{"key":"format","htmlDesc":"Regular expression used to check the function names against.","type":"STRING","defaultValue":"^[a-z][a-zA-Z0-9]*$"}]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[{"key":"format","value":"^[a-z][a-zA-Z0-9]*$"}]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[{"key":"format","value":"^[a-z][a-zA-Z0-9]*$"}]}]},{"rule":{"key":"squid:S00119","repo":"squid","name":"Type parameter names should comply with a naming convention","createdAt":"2013-06-19T09:21:15+0000","severity":"MAJOR","status":"READY","internalKey":"S00119","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","htmlDesc":"<p>Shared naming conventions make it possible for a team to collaborate efficiently. Following the established convention of single-letter type parameter names helps users and maintainers of your code quickly see the difference between a type parameter and a poorly named class.</p>\n\n<p>This rule check that all type parameter names match a provided regular expression. The following code snippets use the default regular expression.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass&lt;TYPE&gt; { // Non-Compliant\n  &lt;TYPE&gt; void method(TYPE t) { // Non-compliant\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass&lt;T&gt; {\n  &lt;T&gt; void method(T t) {\n  }\n}\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"READABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"READABILITY","debtCharName":"Maintainability","debtSubCharName":"Readability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","params":[{"key":"format","htmlDesc":"Regular expression used to check the type parameter names against.","type":"STRING","defaultValue":"^[A-Z]$"}]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[{"key":"format","value":"^[A-Z]$"}]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[{"key":"format","value":"^[A-Z]$"}]}]},{"rule":{"key":"squid:S00117","repo":"squid","name":"Local variable and method parameter names should comply with a naming convention","createdAt":"2013-06-19T09:21:15+0000","severity":"MAJOR","status":"READY","internalKey":"S00117","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","htmlDesc":"<p>\nSharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all local variable and method parameter names match a provided regular expression.\n</p>\n\n<p>\nThe following code snippet illustrates this rule when the regular expression value is \"^[a-z][a-zA-Z0-9]*$\":\n</p>\n\n<pre>\npublic class MyClass {\n  public void method() {\n    int FIRST;                      // Non-Compliant\n    int second;                     // Compliant\n  }\n\n  public void method2(int VALUE) {  // Non-Compliant\n  }\n\n  public void method3(int value) {  // Compliant\n  }\n}\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"READABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"READABILITY","debtCharName":"Maintainability","debtSubCharName":"Readability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","params":[{"key":"format","htmlDesc":"Regular expression used to check the names against.","type":"STRING","defaultValue":"^[a-z][a-zA-Z0-9]*$"}]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[{"key":"format","value":"^[a-z][a-zA-Z0-9]*$"}]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[{"key":"format","value":"^[a-z][a-zA-Z0-9]*$"}]}]},{"rule":{"key":"squid:S00116","repo":"squid","name":"Field names should comply with a naming convention","createdAt":"2013-06-19T09:21:15+0000","severity":"MAJOR","status":"READY","internalKey":"S00116","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","htmlDesc":"<p>\nSharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all field names match a provided regular expression.\n</p>\n\n<p>\nThe following code snippet illustrates this rule when the regular expression value is \"^[a-z][a-zA-Z0-9]*$\":\n</p>\n<pre>\npublic class MyClass {\n  public int FIRST = 1; // Non-Compliant\n  public int second = 2; // Compliant\n}\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"READABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"READABILITY","debtCharName":"Maintainability","debtSubCharName":"Readability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","params":[{"key":"format","htmlDesc":"Regular expression used to check the field names against.","type":"STRING","defaultValue":"^[a-z][a-zA-Z0-9]*$"}]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[{"key":"format","value":"^[a-z][a-zA-Z0-9]*$"}]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[{"key":"format","value":"^[a-z][a-zA-Z0-9]*$"}]}]},{"rule":{"key":"squid:S00115","repo":"squid","name":"Constant names should comply with a naming convention","createdAt":"2013-06-19T09:21:15+0000","severity":"MAJOR","status":"READY","internalKey":"S00115","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","htmlDesc":"<p>\nSharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all constant names match a provided regular expression.\n</p>\n\n<p>\nThe following code snippet illustrates this rule when the regular expression value is \"^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\":\n</p>\n<pre>\npublic class MyClass {\n  public static final int first = 1; // Non-Compliant\n  public static final int SECOND = 2; // Compliant\n}\n\npublic enum MyEnum {\n  first, // Non-Compliant\n  SECOND; // Compliant\n}\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"READABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"READABILITY","debtCharName":"Maintainability","debtSubCharName":"Readability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","params":[{"key":"format","htmlDesc":"Regular expression used to check the constant names against.","type":"STRING","defaultValue":"^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$"}]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[{"key":"format","value":"^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$"}]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[{"key":"format","value":"^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$"}]}]},{"rule":{"key":"squid:S00114","repo":"squid","name":"Interface names should comply with a naming convention","createdAt":"2013-06-19T09:21:15+0000","severity":"MAJOR","status":"READY","internalKey":"S00114","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","htmlDesc":"<p>\nSharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all interface names match a provided regular expression.\n</p>\n\n<p>\nThe following code snippet illustrates this rule when the regular expression value is \"^[A-Z][a-zA-Z0-9]*$\":\n</p>\n<pre>\npublic interface MyFirstInterface {...} // Compliant\npublic interface mySecondInterface {...} // Non-Compliant\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"READABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"READABILITY","debtCharName":"Maintainability","debtSubCharName":"Readability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","params":[{"key":"format","htmlDesc":"Regular expression used to check the interface names against.","type":"STRING","defaultValue":"^[A-Z][a-zA-Z0-9]*$"}]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[{"key":"format","value":"^[A-Z][a-zA-Z0-9]*$"}]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[{"key":"format","value":"^[A-Z][a-zA-Z0-9]*$"}]}]},{"rule":{"key":"findbugs:UG_SYNC_SET_UNSYNC_GET","repo":"findbugs","name":"Multithreaded correctness - Unsynchronized get method, synchronized set method","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"UG_SYNC_SET_UNSYNC_GET","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This class contains similarly-named get and set\n  methods where the set method is synchronized and the get method is not.&nbsp;\n  This may result in incorrect behavior at runtime, as callers of the get\n  method will not necessarily see a consistent state for the object.&nbsp;\n  The get method should be made synchronized.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"SYNCHRONIZATION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"SYNCHRONIZATION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Synchronization","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:IC_INIT_CIRCULARITY","repo":"findbugs","name":"Dodgy - Initialization circularity","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"IC_INIT_CIRCULARITY","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> A circularity was detected in the static initializers of the two\n  classes referenced by the bug instance.&nbsp; Many kinds of unexpected\n  behavior may arise from such circularity.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"ARCHITECTURE_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"ARCHITECTURE_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Architecture","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:IC_SUPERCLASS_USES_SUBCLASS_DURING_INITIALIZATION","repo":"findbugs","name":"Bad practice - Superclass uses subclass during initialization","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"IC_SUPERCLASS_USES_SUBCLASS_DURING_INITIALIZATION","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> During the initialization of a class, the class makes an active use of a subclass.\nThat subclass will not yet be initialized at the time of this use.\nFor example, in the following code, <code>foo</code> will be null.</p>\n\n<pre>\npublic class CircularClassInitialization {\n\tstatic class InnerClassSingleton extends CircularClassInitialization {\n\t\tstatic InnerClassSingleton singleton = new InnerClassSingleton();\n\t}\n\t\n\tstatic CircularClassInitialization foo = InnerClassSingleton.singleton;\n}\n</pre>","defaultDebtChar":"CHANGEABILITY","defaultDebtSubChar":"ARCHITECTURE_CHANGEABILITY","debtChar":"CHANGEABILITY","debtSubChar":"ARCHITECTURE_CHANGEABILITY","debtCharName":"Changeability","debtSubCharName":"Architecture","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:SI_INSTANCE_BEFORE_FINALS_ASSIGNED","repo":"findbugs","name":"Bad practice - Static initializer creates instance before all static final fields assigned","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"SI_INSTANCE_BEFORE_FINALS_ASSIGNED","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> The class's static initializer creates an instance of the class\nbefore all of the static final fields are assigned.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"DATA_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"DATA_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Data","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:IT_NO_SUCH_ELEMENT","repo":"findbugs","name":"Bad practice - Iterator next() method can't throw NoSuchElementException","createdAt":"2013-06-19T07:34:52+0000","severity":"MINOR","status":"READY","internalKey":"IT_NO_SUCH_ELEMENT","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This class implements the <code>java.util.Iterator</code> interface.&nbsp;\n  However, its <code>next()</code> method is not capable of throwing\n  <code>java.util.NoSuchElementException</code>.&nbsp; The <code>next()</code>\n  method should be changed so it throws <code>NoSuchElementException</code>\n  if is called when there are no more elements to return.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MINOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MINOR","params":[]}]},{"rule":{"key":"findbugs:IS_FIELD_NOT_GUARDED","repo":"findbugs","name":"Multithreaded correctness - Field not guarded against concurrent access","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"IS_FIELD_NOT_GUARDED","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This field is annotated with net.jcip.annotations.GuardedBy, \nbut can be accessed in a way that seems to violate the annotation.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"SYNCHRONIZATION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"SYNCHRONIZATION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Synchronization","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:ML_SYNC_ON_FIELD_TO_GUARD_CHANGING_THAT_FIELD","repo":"findbugs","name":"Multithreaded correctness - Synchronization on field in futile attempt to guard that field","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"ML_SYNC_ON_FIELD_TO_GUARD_CHANGING_THAT_FIELD","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This method synchronizes on a field in what appears to be an attempt\nto guard against simultaneous updates to that field. But guarding a field\ngets a lock on the referenced object, not on the field. This may not \nprovide the mutual exclusion you need, and other threads might \nbe obtaining locks on the referenced objects (for other purposes). An example\nof this pattern would be:\n\n<p><pre>\nprivate Long myNtfSeqNbrCounter = new Long(0);\nprivate Long getNotificationSequenceNumber() {\n     Long result = null;\n     synchronized(myNtfSeqNbrCounter) {\n         result = new Long(myNtfSeqNbrCounter.longValue() + 1);\n         myNtfSeqNbrCounter = new Long(result.longValue());\n     }\n     return result;\n }\n</pre>\n\n\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"SYNCHRONIZATION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"SYNCHRONIZATION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Synchronization","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:ML_SYNC_ON_UPDATED_FIELD","repo":"findbugs","name":"Multithreaded correctness - Method synchronizes on an updated field","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"ML_SYNC_ON_UPDATED_FIELD","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This method synchronizes on an object\n   referenced from a mutable field.\n   This is unlikely to have useful semantics, since different\nthreads may be synchronizing on different objects.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"SYNCHRONIZATION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"SYNCHRONIZATION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Synchronization","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:MS_OOI_PKGPROTECT","repo":"findbugs","name":"Malicious code vulnerability - Field should be moved out of an interface and made package protected","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"MS_OOI_PKGPROTECT","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\n A final static field that is\ndefined in an interface references a mutable\n   object such as an array or hashtable.\n   This mutable object could\n   be changed by malicious code or\n        by accident from another package.\n   To solve this, the field needs to be moved to a class\n   and made package protected\n   to avoid\n        this vulnerability.</p>","defaultDebtChar":"SECURITY","defaultDebtSubChar":"API_ABUSE","debtChar":"SECURITY","debtSubChar":"API_ABUSE","debtCharName":"Security","debtSubCharName":"API abuse","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:MS_FINAL_PKGPROTECT","repo":"findbugs","name":"Malicious code vulnerability - Field should be both final and package protected","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"MS_FINAL_PKGPROTECT","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\n   A mutable static field could be changed by malicious code or\n        by accident from another package.\n        The field could be made package protected and/or made final\n   to avoid\n        this vulnerability.</p>","defaultDebtChar":"SECURITY","defaultDebtSubChar":"API_ABUSE","debtChar":"SECURITY","debtSubChar":"API_ABUSE","debtCharName":"Security","debtSubCharName":"API abuse","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:MS_SHOULD_BE_FINAL","repo":"findbugs","name":"Malicious code vulnerability - Field isn't final but should be","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"DEPRECATED","internalKey":"MS_SHOULD_BE_FINAL","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\n A mutable static field could be changed by malicious code or\n        by accident from another package.\n        The field could be made final to avoid\n        this vulnerability.</p>\n<p>\n  This rule is deprecated, use <a href='/coding_rules#rule_key=squid:S1444'>S1444</a> instead.\n</p>","defaultDebtChar":"SECURITY","defaultDebtSubChar":"API_ABUSE","debtChar":"SECURITY","debtSubChar":"API_ABUSE","debtCharName":"Security","debtSubCharName":"API abuse","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:MS_PKGPROTECT","repo":"findbugs","name":"Malicious code vulnerability - Field should be package protected","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"MS_PKGPROTECT","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> A mutable static field could be changed by malicious code or\n   by accident.\n   The field could be made package protected to avoid\n   this vulnerability.</p>","defaultDebtChar":"SECURITY","defaultDebtSubChar":"API_ABUSE","debtChar":"SECURITY","debtSubChar":"API_ABUSE","debtCharName":"Security","debtSubCharName":"API abuse","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:MS_MUTABLE_HASHTABLE","repo":"findbugs","name":"Malicious code vulnerability - Field is a mutable Hashtable","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"MS_MUTABLE_HASHTABLE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>A final static field references a Hashtable\n   and can be accessed by malicious code or\n        by accident from another package.\n   This code can freely modify the contents of the Hashtable.</p>","defaultDebtChar":"SECURITY","defaultDebtSubChar":"API_ABUSE","debtChar":"SECURITY","debtSubChar":"API_ABUSE","debtCharName":"Security","debtSubCharName":"API abuse","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:MS_MUTABLE_ARRAY","repo":"findbugs","name":"Malicious code vulnerability - Field is a mutable array","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"MS_MUTABLE_ARRAY","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> A final static field references an array\n   and can be accessed by malicious code or\n        by accident from another package.\n   This code can freely modify the contents of the array.</p>","defaultDebtChar":"SECURITY","defaultDebtSubChar":"API_ABUSE","debtChar":"SECURITY","debtSubChar":"API_ABUSE","debtCharName":"Security","debtSubCharName":"API abuse","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:MS_CANNOT_BE_FINAL","repo":"findbugs","name":"Malicious code vulnerability - Field isn't final and can't be protected from malicious code","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"MS_CANNOT_BE_FINAL","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\n A mutable static field could be changed by malicious code or\n        by accident from another package.\n   Unfortunately, the way the field is used doesn't allow\n   any easy fix to this problem.</p>","defaultDebtChar":"SECURITY","defaultDebtSubChar":"API_ABUSE","debtChar":"SECURITY","debtSubChar":"API_ABUSE","debtCharName":"Security","debtSubCharName":"API abuse","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:NM_FIELD_NAMING_CONVENTION","repo":"findbugs","name":"Field names should start with a lower case letter","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"NM_FIELD_NAMING_CONVENTION","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\n      Names of fields that are not final should be in mixed case \n      with a lowercase first letter and the first letters of subsequent words capitalized.\n      </p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"READABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"READABILITY","debtCharName":"Maintainability","debtSubCharName":"Readability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:NM_SAME_SIMPLE_NAME_AS_INTERFACE","repo":"findbugs","name":"Bad practice - Class names shouldn't shadow simple name of implemented interface","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"NM_SAME_SIMPLE_NAME_AS_INTERFACE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This class/interface has a simple name that is identical to that of an implemented/extended interface, except\nthat the interface is in a different package (e.g., <code>alpha.Foo</code> extends <code>beta.Foo</code>). \nThis can be exceptionally confusing, create lots of situations in which you have to look at import statements\nto resolve references and creates many\nopportunities to accidently define methods that do not override methods in their superclasses.\n</p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:NM_SAME_SIMPLE_NAME_AS_SUPERCLASS","repo":"findbugs","name":"Bad practice - Class names shouldn't shadow simple name of superclass","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"NM_SAME_SIMPLE_NAME_AS_SUPERCLASS","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This class has a simple name that is identical to that of its superclass, except\nthat its superclass is in a different package (e.g., <code>alpha.Foo</code> extends <code>beta.Foo</code>). \nThis can be exceptionally confusing, create lots of situations in which you have to look at import statements\nto resolve references and creates many\nopportunities to accidently define methods that do not override methods in their superclasses.\n</p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:NM_VERY_CONFUSING","repo":"findbugs","name":"Correctness - Very confusing method names","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"NM_VERY_CONFUSING","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> The referenced methods have names that differ only by capitalization. \nThis is very confusing because if the capitalization were\nidentical then one of the methods would override the other.\n</p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:NM_VERY_CONFUSING_INTENTIONAL","repo":"findbugs","name":"Bad practice - Very confusing method names (but perhaps intentional)","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"NM_VERY_CONFUSING_INTENTIONAL","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> The referenced methods have names that differ only by capitalization. \nThis is very confusing because if the capitalization were\nidentical then one of the methods would override the other. From the existence of other methods, it\nseems that the existence of both of these methods is intentional, but is sure is confusing. \nYou should try hard to eliminate one of them, unless you are forced to have both due to frozen APIs.\n</p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:NM_WRONG_PACKAGE","repo":"findbugs","name":"Correctness - Method doesn't override method in superclass due to wrong package for parameter","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"NM_WRONG_PACKAGE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> The method in the subclass doesn't override a similar method in a superclass because the type of a parameter doesn't exactly match\nthe type of the corresponding parameter in the superclass. For example, if you have:</p>\n\n<blockquote>\n<pre>\nimport alpha.Foo;\npublic class A {\n  public int f(Foo x) { return 17; }\n}\n----\nimport beta.Foo;\npublic class B extends A {\n  public int f(Foo x) { return 42; }\n}\n</pre>\n</blockquote>\n\n<p>The <code>f(Foo)</code> method defined in class <code>B</code> doesn't\noverride the \n<code>f(Foo)</code> method defined in class <code>A</code>, because the argument\ntypes are <code>Foo</code>'s from different packages.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"ARCHITECTURE_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"ARCHITECTURE_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Architecture","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:NM_WRONG_PACKAGE_INTENTIONAL","repo":"findbugs","name":"Bad practice - Method doesn't override method in superclass due to wrong package for parameter","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"NM_WRONG_PACKAGE_INTENTIONAL","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> The method in the subclass doesn't override a similar method in a superclass because the type of a parameter doesn't exactly match\nthe type of the corresponding parameter in the superclass. For example, if you have:</p>\n\n<blockquote>\n<pre>\nimport alpha.Foo;\npublic class A {\n  public int f(Foo x) { return 17; }\n}\n----\nimport beta.Foo;\npublic class B extends A {\n  public int f(Foo x) { return 42; }\n  public int f(alpha.Foo x) { return 27; }\n}\n</pre>\n</blockquote>\n\n<p>The <code>f(Foo)</code> method defined in class <code>B</code> doesn't\noverride the \n<code>f(Foo)</code> method defined in class <code>A</code>, because the argument\ntypes are <code>Foo</code>'s from different packages.\n</p>\n\n<p>In this case, the subclass does define a method with a signature identical to the method in the superclass,\nso this is presumably understood. However, such methods are exceptionally confusing. You should strongly consider\nremoving or deprecating the method with the similar but not identical signature.\n</p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:NM_CONFUSING","repo":"findbugs","name":"Bad practice - Confusing method names","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"NM_CONFUSING","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> The referenced methods have names that differ only by capitalization.</p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:NM_METHOD_CONSTRUCTOR_CONFUSION","repo":"findbugs","name":"Correctness - Apparent method/constructor confusion","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"NM_METHOD_CONSTRUCTOR_CONFUSION","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This regular method has the same name as the class it is defined in. It is likely that this was intended to be a constructor.\n      If it was intended to be a constructor, remove the declaration of a void return value.\n\tIf you had accidently defined this method, realized the mistake, defined a proper constructor\n\tbut can't get rid of this method due to backwards compatibility, deprecate the method.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"ARCHITECTURE_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"ARCHITECTURE_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Architecture","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:NM_LCASE_TOSTRING","repo":"findbugs","name":"Class defines tostring(); should it be toString()?","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"NM_LCASE_TOSTRING","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\n      This class defines a method called <code>tostring()</code>.  \n      This method does not override the <code>toString()</code> \n      method in <code>java.lang.Object</code>, which is probably what was intended.\n      </p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"ARCHITECTURE_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"ARCHITECTURE_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Architecture","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:NM_BAD_EQUAL","repo":"findbugs","name":"Class defines equal(Object); should it be equals(Object)?","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"NM_BAD_EQUAL","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\n      This class defines a method <code>equal(Object)</code>.  \n      This method does not override the <code>equals(Object)</code> method \n      in <code>java.lang.Object</code>, which is probably what was intended.\n      </p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"ARCHITECTURE_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"ARCHITECTURE_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Architecture","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:IA_AMBIGUOUS_INVOCATION_OF_INHERITED_OR_OUTER_METHOD","repo":"findbugs","name":"Dodgy - Ambiguous invocation of either an inherited or outer method","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"IA_AMBIGUOUS_INVOCATION_OF_INHERITED_OR_OUTER_METHOD","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> An inner class is invoking a method that could be resolved to either a inherited method or a method defined in an outer class. By the Java semantics,\nit will be resolved to invoke the inherited method, but this may not be want\nyou intend. If you really intend to invoke the inherited method,\ninvoke it by invoking the method on super (e.g., invoke super.foo(17)), and\nthus it will be clear to other readers of your code and to FindBugs\nthat you want to invoke the inherited method, not the method in the outer class.\n</p>","defaultDebtChar":"CHANGEABILITY","defaultDebtSubChar":"ARCHITECTURE_CHANGEABILITY","debtChar":"CHANGEABILITY","debtSubChar":"ARCHITECTURE_CHANGEABILITY","debtCharName":"Changeability","debtSubCharName":"Architecture","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:NM_CLASS_NOT_EXCEPTION","repo":"findbugs","name":"Bad practice - Class is not derived from an Exception, even though it is named as such","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"NM_CLASS_NOT_EXCEPTION","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This class is not derived from another exception, but ends with 'Exception'. This will\nbe confusing to users of this class.</p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:RR_NOT_CHECKED","repo":"findbugs","name":"Bad practice - Method ignores results of InputStream.read()","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"RR_NOT_CHECKED","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This method ignores the return value of one of the variants of\n  <code>java.io.InputStream.read()</code> which can return multiple bytes.&nbsp;\n  If the return value is not checked, the caller will not be able to correctly\n  handle the case where fewer bytes were read than the caller requested.&nbsp;\n  This is a particularly insidious kind of bug, because in many programs,\n  reads from input streams usually do read the full amount of data requested,\n  causing the program to fail only sporadically.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:SR_NOT_CHECKED","repo":"findbugs","name":"Bad practice - Method ignores results of InputStream.skip()","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"SR_NOT_CHECKED","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This method ignores the return value of\n  <code>java.io.InputStream.skip()</code> which can skip multiple bytes.&nbsp;\n  If the return value is not checked, the caller will not be able to correctly\n  handle the case where fewer bytes were skipped than the caller requested.&nbsp;\n  This is a particularly insidious kind of bug, because in many programs,\n  skips from input streams usually do skip the full amount of data requested,\n  causing the program to fail only sporadically. With Buffered streams, however,\n  skip() will only skip data in the buffer, and will routinely fail to skip the\n  requested number of bytes.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:SE_READ_RESOLVE_IS_STATIC","repo":"findbugs","name":"Correctness - The readResolve method must not be declared as a static method.","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"SE_READ_RESOLVE_IS_STATIC","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> In order for the readResolve method to be recognized by the serialization\nmechanism, it must not be declared as a static method.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"ARCHITECTURE_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"ARCHITECTURE_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Architecture","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:SE_PRIVATE_READ_RESOLVE_NOT_INHERITED","repo":"findbugs","name":"Dodgy - private readResolve method not inherited by subclasses","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"SE_PRIVATE_READ_RESOLVE_NOT_INHERITED","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This class defines a private readResolve method. Since it is private, it won't be inherited by subclasses.\nThis might be intentional and OK, but should be reviewed to ensure it is what is intended.\n</p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:SE_TRANSIENT_FIELD_OF_NONSERIALIZABLE_CLASS","repo":"findbugs","name":"Dodgy - Transient field of class that isn't Serializable.","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"SE_TRANSIENT_FIELD_OF_NONSERIALIZABLE_CLASS","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> The field is marked as transient, but the class isn't Serializable, so marking it as transient\nhas absolutely no effect. \nThis may be leftover marking from a previous version of the code in which the class was transient, or\nit may indicate a misunderstanding of how serialization works.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"ARCHITECTURE_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"ARCHITECTURE_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Architecture","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:SE_NO_SUITABLE_CONSTRUCTOR","repo":"findbugs","name":"Bad practice - Class is Serializable but its superclass doesn't define a void constructor","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"SE_NO_SUITABLE_CONSTRUCTOR","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This class implements the <code>Serializable</code> interface\n   and its superclass does not. When such an object is deserialized,\n   the fields of the superclass need to be initialized by\n   invoking the void constructor of the superclass.\n   Since the superclass does not have one,\n   serialization and deserialization will fail at runtime.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"ARCHITECTURE_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"ARCHITECTURE_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Architecture","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:SE_NO_SUITABLE_CONSTRUCTOR_FOR_EXTERNALIZATION","repo":"findbugs","name":"Bad practice - Class is Externalizable but doesn't define a void constructor","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"SE_NO_SUITABLE_CONSTRUCTOR_FOR_EXTERNALIZATION","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This class implements the <code>Externalizable</code> interface, but does\n  not define a void constructor. When Externalizable objects are deserialized,\n   they first need to be constructed by invoking the void\n   constructor. Since this class does not have one,\n   serialization and deserialization will fail at runtime.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"ARCHITECTURE_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"ARCHITECTURE_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Architecture","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:SE_COMPARATOR_SHOULD_BE_SERIALIZABLE","repo":"findbugs","name":"Bad practice - Comparator doesn't implement Serializable","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"SE_COMPARATOR_SHOULD_BE_SERIALIZABLE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This class implements the <code>Comparator</code> interface. You\nshould consider whether or not it should also implement the <code>Serializable</code>\ninterface. If a comparator is used to construct an ordered collection\nsuch as a <code>TreeMap</code>, then the <code>TreeMap</code>\nwill be serializable only if the comparator is also serializable.\nAs most comparators have little or no state, making them serializable\nis generally easy and good defensive programming.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:SE_NO_SERIALVERSIONID","repo":"findbugs","name":"Bad practice - Class is Serializable, but doesn't define serialVersionUID","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"SE_NO_SERIALVERSIONID","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This class implements the <code>Serializable</code> interface, but does\n  not define a <code>serialVersionUID</code> field.&nbsp;\n  A change as simple as adding a reference to a .class object\n    will add synthetic fields to the class,\n   which will unfortunately change the implicit\n   serialVersionUID (e.g., adding a reference to <code>String.class</code>\n   will generate a static field <code>class$java$lang$String</code>).\n   Also, different source code to bytecode compilers may use different\n   naming conventions for synthetic variables generated for\n   references to class objects or inner classes.\n   To ensure interoperability of Serializable across versions,\n   consider adding an explicit serialVersionUID.</p>","defaultDebtChar":"PORTABILITY","defaultDebtSubChar":"COMPILER_RELATED_PORTABILITY","debtChar":"PORTABILITY","debtSubChar":"COMPILER_RELATED_PORTABILITY","debtCharName":"Portability","debtSubCharName":"Compiler","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:SE_READ_RESOLVE_MUST_RETURN_OBJECT","repo":"findbugs","name":"Bad practice - The readResolve method must be declared with a return type of Object.","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"SE_READ_RESOLVE_MUST_RETURN_OBJECT","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> In order for the readResolve method to be recognized by the serialization\nmechanism, it must be declared to have a return type of Object.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:SE_TRANSIENT_FIELD_NOT_RESTORED","repo":"findbugs","name":"Bad practice - Transient field that isn't set by deserialization.","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"SE_TRANSIENT_FIELD_NOT_RESTORED","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This class contains a field that is updated at multiple places in the class, thus it seems to be part of the state of the class. However, since the field is marked as transient and not set in readObject or readResolve, it will contain the default value in any \ndeserialized instance of the class.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"DATA_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"DATA_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Data","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:WS_WRITEOBJECT_SYNC","repo":"findbugs","name":"Multithreaded correctness - Class's writeObject() method is synchronized but nothing else is","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"WS_WRITEOBJECT_SYNC","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This class has a <code>writeObject()</code> method which is synchronized;\n  however, no other method of the class is synchronized.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"SYNCHRONIZATION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"SYNCHRONIZATION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Synchronization","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:RS_READOBJECT_SYNC","repo":"findbugs","name":"Multithreaded correctness - Class's readObject() method is synchronized","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"RS_READOBJECT_SYNC","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This serializable class defines a <code>readObject()</code> which is\n  synchronized.&nbsp; By definition, an object created by deserialization\n  is only reachable by one thread, and thus there is no need for\n  <code>readObject()</code> to be synchronized.&nbsp; If the <code>readObject()</code>\n  method itself is causing the object to become visible to another thread,\n  that is an example of very dubious coding style.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"SYNCHRONIZATION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"SYNCHRONIZATION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Synchronization","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:SE_NONFINAL_SERIALVERSIONID","repo":"findbugs","name":"Bad practice - serialVersionUID isn't final","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"SE_NONFINAL_SERIALVERSIONID","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This class defines a <code>serialVersionUID</code> field that is not final.&nbsp;\n  The field should be made final\n   if it is intended to specify\n   the version UID for purposes of serialization.</p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:SE_NONSTATIC_SERIALVERSIONID","repo":"findbugs","name":"Bad practice - serialVersionUID isn't static","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"SE_NONSTATIC_SERIALVERSIONID","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This class defines a <code>serialVersionUID</code> field that is not static.&nbsp;\n  The field should be made static\n   if it is intended to specify\n   the version UID for purposes of serialization.</p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:SE_NONLONG_SERIALVERSIONID","repo":"findbugs","name":"Bad practice - serialVersionUID isn't long","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"SE_NONLONG_SERIALVERSIONID","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This class defines a <code>serialVersionUID</code> field that is not long.&nbsp;\n  The field should be made long\n   if it is intended to specify\n   the version UID for purposes of serialization.</p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:SE_METHOD_MUST_BE_PRIVATE","repo":"findbugs","name":"Correctness - Method must be private in order for serialization to work","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"SE_METHOD_MUST_BE_PRIVATE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This class implements the <code>Serializable</code> interface, and defines a method\n  for custom serialization/deserialization. But since that method isn't declared private,\n  it will be silently ignored by the serialization/deserialization API.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"ARCHITECTURE_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"ARCHITECTURE_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Architecture","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:SE_BAD_FIELD","repo":"findbugs","name":"Non-transient non-serializable instance field in serializable class","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"SE_BAD_FIELD","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\n      This Serializable class defines a non-primitive instance field which is neither transient, \n      Serializable, or <code>java.lang.Object</code>, and does not appear to implement the <code>Externalizable</code> \n      interface or the <code>readObject()</code> and <code>writeObject()</code> methods.  \n      Objects of this class will not be deserialized correctly if a non-Serializable object is stored in this field.\n      </p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"DATA_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"DATA_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Data","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:SE_INNER_CLASS","repo":"findbugs","name":"Bad practice - Serializable inner class","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"SE_INNER_CLASS","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This Serializable class is an inner class.  Any attempt to serialize\nit will also serialize the associated outer instance. The outer instance is serializable,\nso this won't fail, but it might serialize a lot more data than intended.\nIf possible, making the inner class a static inner class (also known as a nested class) should solve the \nproblem.","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"ARCHITECTURE_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"ARCHITECTURE_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Architecture","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:SE_BAD_FIELD_INNER_CLASS","repo":"findbugs","name":"Bad practice - Non-serializable class has a serializable inner class","createdAt":"2013-06-19T07:34:52+0000","severity":"MINOR","status":"READY","internalKey":"SE_BAD_FIELD_INNER_CLASS","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This Serializable class is an inner class of a non-serializable class.\nThus, attempts to serialize it will also attempt to associate instance of the outer\nclass with which it is associated, leading to a runtime error.\n</p>\n<p>If possible, making the inner class a static inner class should solve the \nproblem. Making the outer class serializable might also work, but that would\nmean serializing an instance of the inner class would always also serialize the instance\nof the outer class, which it often not what you really want.","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"ARCHITECTURE_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"ARCHITECTURE_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Architecture","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MINOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MINOR","params":[]}]},{"rule":{"key":"findbugs:SE_BAD_FIELD_STORE","repo":"findbugs","name":"Bad practice - Non-serializable value stored into instance field of a serializable class","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"SE_BAD_FIELD_STORE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> A non-serializable value is stored into a non-transient field\nof a serializable class.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"ARCHITECTURE_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"ARCHITECTURE_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Architecture","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:SC_START_IN_CTOR","repo":"findbugs","name":"Multithreaded correctness - Constructor invokes Thread.start()","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"SC_START_IN_CTOR","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> The constructor starts a thread. This is likely to be wrong if\n   the class is ever extended/subclassed, since the thread will be started\n   before the subclass constructor is started.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"SYNCHRONIZATION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"SYNCHRONIZATION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Synchronization","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:SF_DEAD_STORE_DUE_TO_SWITCH_FALLTHROUGH","repo":"findbugs","name":"Dead store due to switch statement fall through","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"SF_DEAD_STORE_DUE_TO_SWITCH_FALLTHROUGH","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\n      A value stored in the previous switch case is overwritten here due \n      to a switch fall through. It is likely that you forgot to put a \n      break or return at the end of the previous case.\n      </p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:SS_SHOULD_BE_STATIC","repo":"findbugs","name":"Performance - Unread field: should this field be static?","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"SS_SHOULD_BE_STATIC","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This class contains an instance final field that\n   is initialized to a compile-time static value.\n   Consider making the field static.</p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:UUF_UNUSED_FIELD","repo":"findbugs","name":"Performance - Unused field","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"UUF_UNUSED_FIELD","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This field is never used.&nbsp; Consider removing it from the class.</p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:URF_UNREAD_FIELD","repo":"findbugs","name":"Performance - Unread field","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"URF_UNREAD_FIELD","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This field is never read.&nbsp; Consider removing it from the class.</p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:QF_QUESTIONABLE_FOR_LOOP","repo":"findbugs","name":"Dodgy - Complicated, subtle or wrong increment in for-loop","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"QF_QUESTIONABLE_FOR_LOOP","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>Are you sure this for loop is incrementing the correct variable?\n   It appears that another variable is being initialized and checked\n   by the for loop.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:NP_UNWRITTEN_FIELD","repo":"findbugs","name":"Correctness - Read of unwritten field","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"NP_UNWRITTEN_FIELD","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>The program is dereferencing a field that does not seem to ever have a non-null value written to it. Dereferencing this value will generate a null pointer exception.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:UWF_NULL_FIELD","repo":"findbugs","name":"Correctness - Field only ever set to null","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"UWF_NULL_FIELD","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> All writes to this field are of the constant value null, and thus\nall reads of the field will return null.\nCheck for errors, or remove it if it is useless.</p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:UWF_UNWRITTEN_FIELD","repo":"findbugs","name":"Correctness - Unwritten field","createdAt":"2013-06-19T07:34:52+0000","severity":"MINOR","status":"READY","internalKey":"UWF_UNWRITTEN_FIELD","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>This field is never written.  All reads of it will return the default value. Check for errors (should it have been initialized?), or remove it if it is useless.</p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MINOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MINOR","params":[]}]},{"rule":{"key":"findbugs:SIC_INNER_SHOULD_BE_STATIC","repo":"findbugs","name":"Performance - Should be a static inner class","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"SIC_INNER_SHOULD_BE_STATIC","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This class is an inner class, but does not use its embedded reference\n  to the object which created it.&nbsp; This reference makes the instances\n  of the class larger, and may keep the reference to the creator object\n  alive longer than necessary.&nbsp; If possible, the class should be\n   made static.\n</p>","defaultDebtChar":"EFFICIENCY","defaultDebtSubChar":"MEMORY_EFFICIENCY","debtChar":"EFFICIENCY","debtSubChar":"MEMORY_EFFICIENCY","debtCharName":"Efficiency","debtSubCharName":"Memory use","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS","repo":"findbugs","name":"Performance - Could be refactored into a static inner class","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This class is an inner class, but does not use its embedded reference\n  to the object which created it except during construction of the\ninner object.&nbsp; This reference makes the instances\n  of the class larger, and may keep the reference to the creator object\n  alive longer than necessary.&nbsp; If possible, the class should be\n  made into a <em>static</em> inner class. Since the reference to the\n   outer object is required during construction of the inner instance,\n   the inner class will need to be refactored so as to\n   pass a reference to the outer instance to the constructor\n   for the inner class.</p>","defaultDebtChar":"EFFICIENCY","defaultDebtSubChar":"CPU_EFFICIENCY","debtChar":"EFFICIENCY","debtSubChar":"CPU_EFFICIENCY","debtCharName":"Efficiency","debtSubCharName":"Processor use","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:SIC_INNER_SHOULD_BE_STATIC_ANON","repo":"findbugs","name":"Performance - Could be refactored into a named static inner class","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"SIC_INNER_SHOULD_BE_STATIC_ANON","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This class is an inner class, but does not use its embedded reference\n  to the object which created it.&nbsp; This reference makes the instances\n  of the class larger, and may keep the reference to the creator object\n  alive longer than necessary.&nbsp; If possible, the class should be\n  made into a <em>static</em> inner class. Since anonymous inner\nclasses cannot be marked as static, doing this will require refactoring\nthe inner class so that it is a named inner class.</p>","defaultDebtChar":"EFFICIENCY","defaultDebtSubChar":"CPU_EFFICIENCY","debtChar":"EFFICIENCY","debtSubChar":"CPU_EFFICIENCY","debtCharName":"Efficiency","debtSubCharName":"Processor use","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:WA_NOT_IN_LOOP","repo":"findbugs","name":"Multithreaded correctness - Wait not in loop","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"WA_NOT_IN_LOOP","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This method contains a call to <code>java.lang.Object.wait()</code>\n  which is not in a loop.&nbsp; If the monitor is used for multiple conditions,\n  the condition the caller intended to wait for might not be the one\n  that actually occurred.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"SYNCHRONIZATION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"SYNCHRONIZATION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Synchronization","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:WA_AWAIT_NOT_IN_LOOP","repo":"findbugs","name":"Multithreaded correctness - Condition.await() not in loop","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"WA_AWAIT_NOT_IN_LOOP","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This method contains a call to <code>java.util.concurrent.await()</code>\n   (or variants)\n  which is not in a loop.&nbsp; If the object is used for multiple conditions,\n  the condition the caller intended to wait for might not be the one\n  that actually occurred.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"SYNCHRONIZATION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"SYNCHRONIZATION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Synchronization","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:NO_NOTIFY_NOT_NOTIFYALL","repo":"findbugs","name":"Multithreaded correctness - Using notify() rather than notifyAll()","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"NO_NOTIFY_NOT_NOTIFYALL","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This method calls <code>notify()</code> rather than <code>notifyAll()</code>.&nbsp;\n  Java monitors are often used for multiple conditions.&nbsp; Calling <code>notify()</code>\n  only wakes up one thread, meaning that the thread woken up might not be the\n  one waiting for the condition that the caller just satisfied.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"SYNCHRONIZATION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"SYNCHRONIZATION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Synchronization","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:RV_RETURN_VALUE_IGNORED","repo":"findbugs","name":"Correctness - Method ignores return value","createdAt":"2013-06-19T07:34:52+0000","severity":"MINOR","status":"READY","internalKey":"RV_RETURN_VALUE_IGNORED","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> The return value of this method should be checked. One common\ncause of this warning is to invoke a method on an immutable object,\nthinking that it updates the object. For example, in the following code\nfragment,</p>\n<blockquote>\n<pre>\nString dateString = getHeaderField(name);\ndateString.trim();\n</pre>\n</blockquote>\n<p>the programmer seems to be thinking that the trim() method will update\nthe String referenced by dateString. But since Strings are immutable, the trim()\nfunction returns a new String value, which is being ignored here. The code\nshould be corrected to: </p>\n<blockquote>\n<pre>\nString dateString = getHeaderField(name);\ndateString = dateString.trim();\n</pre>\n</blockquote>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MINOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MINOR","params":[]}]},{"rule":{"key":"findbugs:RV_EXCEPTION_NOT_THROWN","repo":"findbugs","name":"Correctness - Exception created and dropped rather than thrown","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"RV_EXCEPTION_NOT_THROWN","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This code creates an exception (or error) object, but doesn't do anything with it. For example,\nsomething like </p>\n<blockquote>\n<pre>\nif (x &lt; 0)\n  new IllegalArgumentException(\"x must be nonnegative\");\n</pre>\n</blockquote>\n<p>It was probably the intent of the programmer to throw the created exception:</p>\n<blockquote>\n<pre>\nif (x &lt; 0)\n  throw new IllegalArgumentException(\"x must be nonnegative\");\n</pre>\n</blockquote>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"EXCEPTION_HANDLING","debtChar":"RELIABILITY","debtSubChar":"EXCEPTION_HANDLING","debtCharName":"Reliability","debtSubCharName":"Exception handling","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:RV_CHECK_FOR_POSITIVE_INDEXOF","repo":"findbugs","name":"Dodgy - Method checks to see if result of String.indexOf is positive","createdAt":"2013-06-19T07:34:52+0000","severity":"MINOR","status":"READY","internalKey":"RV_CHECK_FOR_POSITIVE_INDEXOF","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> The method invokes String.indexOf and checks to see if the result is positive or non-positive.\n   It is much more typical to check to see if the result is negative or non-negative. It is\n   positive only if the substring checked for occurs at some place other than at the beginning of\n   the String.</p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MINOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MINOR","params":[]}]},{"rule":{"key":"findbugs:RV_DONT_JUST_NULL_CHECK_READLINE","repo":"findbugs","name":"Dodgy - Method discards result of readLine after checking if it is nonnull","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"RV_DONT_JUST_NULL_CHECK_READLINE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> The value returned by readLine is discarded after checking to see if the return\nvalue is non-null. In almost all situations, if the result is non-null, you will want\nto use that non-null value. Calling readLine again will give you a different line.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:NP_ALWAYS_NULL","repo":"findbugs","name":"Correctness - Null pointer dereference","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"NP_ALWAYS_NULL","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> A null pointer is dereferenced here.&nbsp; This will lead to a\n<code>NullPointerException</code> when the code is executed.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:NP_STORE_INTO_NONNULL_FIELD","repo":"findbugs","name":"Correctness - Store of null value into field annotated NonNull","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"NP_STORE_INTO_NONNULL_FIELD","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> A value that could be null is stored into a field that has been annotated as NonNull. </p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"DATA_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"DATA_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Data","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:NP_ALWAYS_NULL_EXCEPTION","repo":"findbugs","name":"Correctness - Null pointer dereference in method on exception path","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"NP_ALWAYS_NULL_EXCEPTION","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> A pointer which is null on an exception path is dereferenced here.&nbsp;\nThis will lead to a <code>NullPointerException</code> when the code is executed.&nbsp;\nNote that because FindBugs currently does not prune infeasible exception paths,\nthis may be a false warning.</p>\n\n<p> Also note that FindBugs considers the default case of a switch statement to\nbe an exception path, since the default case is often infeasible.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:NP_PARAMETER_MUST_BE_NONNULL_BUT_MARKED_AS_NULLABLE","repo":"findbugs","name":"Dodgy - Parameter must be nonnull but is marked as nullable","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"NP_PARAMETER_MUST_BE_NONNULL_BUT_MARKED_AS_NULLABLE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This parameter is always used in a way that requires it to be nonnull,\nbut the parameter is explicitly annotated as being Nullable. Either the use\nof the parameter or the annotation is wrong.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"DATA_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"DATA_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Data","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE","repo":"findbugs","name":"Dodgy - Possible null pointer dereference due to return value of called method","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nThe return value from a method is dereferenced without a null check,\nand the return value of that method is one that should generally be checked for null (which requires to use Findbugs annotations to express the developer's intend).\nThis may lead to a <code>NullPointerException</code> when the code is executed.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic long getTime() {\n  return getDate().getTime();      // NullPointerException may occur\n}\n\n@CheckForNull                      // See javax.annotation.CheckForNull (JSR-305)\npublic Date getDate() { /* ... */ }\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic long getTime() {\n  Date date = getDate();\n  if (date == null) {\n    throw new IllegalStateException(\"...\");\n  }\n  return date.getTime();\n}\n\n@CheckForNull                      // See javax.annotation.CheckForNull (JSR-305)\npublic Date getDate() { /* ... */ }\n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:NP_NULL_ON_SOME_PATH_MIGHT_BE_INFEASIBLE","repo":"findbugs","name":"Dodgy - Possible null pointer dereference on path that might be infeasible","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"NP_NULL_ON_SOME_PATH_MIGHT_BE_INFEASIBLE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> There is a branch of statement that, <em>if executed,</em>  guarantees that\na null value will be dereferenced, which\nwould generate a <code>NullPointerException</code> when the code is executed.\nOf course, the problem might be that the branch or statement is infeasible and that\nthe null pointer exception can't ever be executed; deciding that is beyond the ability of FindBugs.\nDue to the fact that this value had been previously tested for nullness, this is a definite possibility.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:NP_NULL_ON_SOME_PATH","repo":"findbugs","name":"Correctness - Possible null pointer dereference","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"NP_NULL_ON_SOME_PATH","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> There is a branch of statement that, <em>if executed,</em>  guarantees that\na null value will be dereferenced, which\nwould generate a <code>NullPointerException</code> when the code is executed.\nOf course, the problem might be that the branch or statement is infeasible and that\nthe null pointer exception can't ever be executed; deciding that is beyond the ability of FindBugs.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:NP_NULL_ON_SOME_PATH_EXCEPTION","repo":"findbugs","name":"Correctness - Possible null pointer dereference in method on exception path","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"NP_NULL_ON_SOME_PATH_EXCEPTION","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> A reference value which is null on some exception control path is\ndereferenced here.&nbsp; This may lead to a <code>NullPointerException</code>\nwhen the code is executed.&nbsp;\nNote that because FindBugs currently does not prune infeasible exception paths,\nthis may be a false warning.</p>\n\n<p> Also note that FindBugs considers the default case of a switch statement to\nbe an exception path, since the default case is often infeasible.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:NP_NULL_PARAM_DEREF","repo":"findbugs","name":"Correctness - Method call passes null for nonnull parameter","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"NP_NULL_PARAM_DEREF","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\n      This method call passes a null value for a nonnull method parameter.\n\tEither the parameter is annotated as a parameter that should\n\talways be nonnull, or analysis has shown that it will always be \n\tdereferenced.\n      </p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:NP_NULL_PARAM_DEREF_NONVIRTUAL","repo":"findbugs","name":"Correctness - Non-virtual method call passes null for nonnull parameter","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"NP_NULL_PARAM_DEREF_NONVIRTUAL","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\n      A possibly-null value is passed to a nonnull method parameter.\n\tEither the parameter is annotated as a parameter that should\n\talways be nonnull, or analysis has shown that it will always be \n\tdereferenced.\n      </p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"DATA_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"DATA_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Data","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:NP_NULL_PARAM_DEREF_ALL_TARGETS_DANGEROUS","repo":"findbugs","name":"Correctness - Method call passes null for nonnull parameter (ALL_TARGETS_DANGEROUS)","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"NP_NULL_PARAM_DEREF_ALL_TARGETS_DANGEROUS","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\n      A possibly-null value is passed at a call site where all known\n      target methods require the parameter to be nonnull.\n\tEither the parameter is annotated as a parameter that should\n\talways be nonnull, or analysis has shown that it will always be \n\tdereferenced.\n      </p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:NP_NONNULL_PARAM_VIOLATION","repo":"findbugs","name":"Correctness - Method call passes null to a nonnull parameter","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"NP_NONNULL_PARAM_VIOLATION","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\n      This method passes a null value as the parameter of a method which\n\tmust be nonnull. Either this parameter has been explicitly marked\n\tas @Nonnull, or analysis has determined that this parameter is\n\talways dereferenced.\n      </p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:NP_NONNULL_RETURN_VIOLATION","repo":"findbugs","name":"Correctness - Method may return null, but is declared @NonNull","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"NP_NONNULL_RETURN_VIOLATION","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\n      This method may return a null value, but the method (or a superclass method\n      which it overrides) is declared to return @NonNull.\n      </p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"DATA_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"DATA_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Data","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:NP_TOSTRING_COULD_RETURN_NULL","repo":"findbugs","name":"Bad practice - toString method may return null","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"NP_TOSTRING_COULD_RETURN_NULL","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\n\tThis toString method seems to return null in some circumstances. A liberal reading of the\n\tspec could be interpreted as allowing this, but it is probably a bad idea and could cause\n\tother code to break. Return the empty string or some other appropriate string rather than null.\n      </p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:NP_CLONE_COULD_RETURN_NULL","repo":"findbugs","name":"Bad practice - Clone method may return null","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"NP_CLONE_COULD_RETURN_NULL","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\n\tThis clone method seems to return null in some circumstances, but clone is never\n\tallowed to return a null value.  If you are convinced this path is unreachable, throw an AssertionError\n\tinstead.\n      </p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:NP_LOAD_OF_KNOWN_NULL_VALUE","repo":"findbugs","name":"Dodgy - Load of known null value","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"NP_LOAD_OF_KNOWN_NULL_VALUE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> The variable referenced at this point is known to be null due to an earlier\n   check against null. Although this is valid, it might be a mistake (perhaps you\nintended to refer to a different variable, or perhaps the earlier check to see if the\nvariable is null should have been a check to see if it was nonnull).\n</p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:NP_GUARANTEED_DEREF","repo":"findbugs","name":"Correctness - Null value is guaranteed to be dereferenced","createdAt":"2013-06-19T07:34:52+0000","severity":"BLOCKER","status":"READY","internalKey":"NP_GUARANTEED_DEREF","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\n\t\t\t  There is a statement or branch that if executed guarantees that\n\t\t\t  a value is null at this point, and that \n\t\t\t  value that is guaranteed to be dereferenced\n\t\t\t  (except on forward paths involving runtime exceptions).\n\t\t\t  </p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"BLOCKER","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"BLOCKER","params":[]}]},{"rule":{"key":"findbugs:NP_GUARANTEED_DEREF_ON_EXCEPTION_PATH","repo":"findbugs","name":"Correctness - Value is null and guaranteed to be dereferenced on exception path","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"NP_GUARANTEED_DEREF_ON_EXCEPTION_PATH","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\n\t\t\t  There is a statement or branch on an exception path\n\t\t\t\tthat if executed guarantees that\n\t\t\t  a value is null at this point, and that \n\t\t\t  value that is guaranteed to be dereferenced\n\t\t\t  (except on forward paths involving runtime exceptions).\n\t\t\t  </p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:OS_OPEN_STREAM","repo":"findbugs","name":"Bad practice - Method may fail to close stream","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"OS_OPEN_STREAM","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> The method creates an IO stream object, does not assign it to any\nfields, pass it to other methods that might close it, \nor return it, and does not appear to close\nthe stream on all paths out of the method.&nbsp; This may result in\na file descriptor leak.&nbsp; It is generally a good\nidea to use a <code>finally</code> block to ensure that streams are\nclosed.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:OS_OPEN_STREAM_EXCEPTION_PATH","repo":"findbugs","name":"Bad practice - Method may fail to close stream on exception","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"OS_OPEN_STREAM_EXCEPTION_PATH","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> The method creates an IO stream object, does not assign it to any\nfields, pass it to other methods, or return it, and does not appear to close\nit on all possible exception paths out of the method.&nbsp;\nThis may result in a file descriptor leak.&nbsp; It is generally a good\nidea to use a <code>finally</code> block to ensure that streams are\nclosed.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"EXCEPTION_HANDLING","debtChar":"RELIABILITY","debtSubChar":"EXCEPTION_HANDLING","debtCharName":"Reliability","debtSubCharName":"Exception handling","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:UCF_USELESS_CONTROL_FLOW","repo":"findbugs","name":"Dodgy - Useless control flow","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"UCF_USELESS_CONTROL_FLOW","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This method contains a useless control flow statement, where\ncontrol flow continues onto the same place regardless of whether or not\nthe branch is taken. For example,\nthis is caused by having an empty statement\nblock for an <code>if</code> statement:</p>\n<pre>\n    if (argv.length == 0) {\n\t// TODO: handle this case\n\t}\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"READABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"READABILITY","debtCharName":"Maintainability","debtSubCharName":"Readability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:UCF_USELESS_CONTROL_FLOW_NEXT_LINE","repo":"findbugs","name":"Correctness - Useless control flow to next line","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"UCF_USELESS_CONTROL_FLOW_NEXT_LINE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This method contains a useless control flow statement in which control\nflow follows to the same or following line regardless of whether or not\nthe branch is taken.\nOften, this is caused by inadvertently using an empty statement as the\nbody of an <code>if</code> statement, e.g.:</p>\n<pre>\n    if (argv.length == 1);\n        System.out.println(\"Hello, \" + argv[0]);\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE","repo":"findbugs","name":"Dodgy - Redundant nullcheck of value known to be null","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This method contains a redundant check of a known null value against\nthe constant null.</p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE","repo":"findbugs","name":"Correctness - Nullcheck of value previously dereferenced","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> A value is checked here to see whether it is null, but this value can't\nbe null because it was previously dereferenced and if it were null a null pointer\nexception would have occurred at the earlier dereference. \nEssentially, this code and the previous dereference\ndisagree as to whether this value is allowed to be null. Either the check is redundant\nor the previous dereference is erroneous.</p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE","repo":"findbugs","name":"Dodgy - Redundant nullcheck of value known to be non-null","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This method contains a redundant check of a known non-null value against\nthe constant null.</p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:RCN_REDUNDANT_COMPARISON_TWO_NULL_VALUES","repo":"findbugs","name":"Dodgy - Redundant comparison of two null values","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"RCN_REDUNDANT_COMPARISON_TWO_NULL_VALUES","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This method contains a redundant comparison of two references known to\nboth be definitely null.</p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:RCN_REDUNDANT_COMPARISON_OF_NULL_AND_NONNULL_VALUE","repo":"findbugs","name":"Dodgy - Redundant comparison of non-null value to null","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"RCN_REDUNDANT_COMPARISON_OF_NULL_AND_NONNULL_VALUE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This method contains a reference known to be non-null with another reference\nknown to be null.</p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:UL_UNRELEASED_LOCK","repo":"findbugs","name":"Multithreaded correctness - Method does not release lock on all paths","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"UL_UNRELEASED_LOCK","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This method acquires a JSR-166 (<code>java.util.concurrent</code>) lock,\nbut does not release it on all paths out of the method.  In general, the correct idiom\nfor using a JSR-166 lock is:\n</p>\n<pre>\n    Lock l = ...;\n    l.lock();\n    try {\n        // do something\n    } finally {\n        l.unlock();\n    }\n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"SYNCHRONIZATION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"SYNCHRONIZATION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Synchronization","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:UL_UNRELEASED_LOCK_EXCEPTION_PATH","repo":"findbugs","name":"Multithreaded correctness - Method does not release lock on all exception paths","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"UL_UNRELEASED_LOCK_EXCEPTION_PATH","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This method acquires a JSR-166 (<code>java.util.concurrent</code>) lock,\nbut does not release it on all exception paths out of the method.  In general, the correct idiom\nfor using a JSR-166 lock is:\n</p>\n<pre>\n    Lock l = ...;\n    l.lock();\n    try {\n        // do something\n    } finally {\n        l.unlock();\n    }\n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"SYNCHRONIZATION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"SYNCHRONIZATION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Synchronization","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:RC_REF_COMPARISON","repo":"findbugs","name":"Bad practice - Suspicious reference comparison","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"RC_REF_COMPARISON","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This method compares two reference values using the == or != operator,\nwhere the correct way to compare instances of this type is generally\nwith the equals() method.  Examples of classes which should generally\nnot be compared by reference are java.lang.Integer, java.lang.Float, etc.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:VA_PRIMITIVE_ARRAY_PASSED_TO_OBJECT_VARARG","repo":"findbugs","name":"Correctness - Primitive array passed to function expecting a variable number of object arguments","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"VA_PRIMITIVE_ARRAY_PASSED_TO_OBJECT_VARARG","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nThis code passes a primitive array to a function that takes a variable number of object arguments.\nThis creates an array of length one to hold the primitive array and passes it to the function.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"DATA_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"DATA_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Data","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:VA_FORMAT_STRING_NO_PREVIOUS_ARGUMENT","repo":"findbugs","name":"Correctness - No previous argument for format string","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"VA_FORMAT_STRING_NO_PREVIOUS_ARGUMENT","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nThe format string specifies a relative index to request that the argument for the previous format specifier\nbe reused. However, there is no previous argument.\nFor example, \n</p>\n<p><code>formatter.format(\"%&lt;s %s\", \"a\", \"b\")</code>\n</p>\n<p>would throw a MissingFormatArgumentException when executed.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:VA_FORMAT_STRING_BAD_ARGUMENT","repo":"findbugs","name":"Correctness - Format string placeholder incompatible with passed argument","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"VA_FORMAT_STRING_BAD_ARGUMENT","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nThe format string placeholder is incompatible with the corresponding\nargument. For example,\n<code>\n  System.out.println(\"%d\\n\", \"hello\");\n</code>\n<p>The %d placeholder requires a numeric argument, but a string value is\npassed instead. \nA runtime exception will occur when \nthis statement is executed.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:VA_FORMAT_STRING_MISSING_ARGUMENT","repo":"findbugs","name":"Correctness - Format string references missing argument","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"VA_FORMAT_STRING_MISSING_ARGUMENT","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nNot enough arguments are passed to satisfy a placeholder in the format string.\nA runtime exception will occur when \nthis statement is executed.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:VA_FORMAT_STRING_ILLEGAL","repo":"findbugs","name":"Correctness - Illegal format string","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"VA_FORMAT_STRING_ILLEGAL","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nThe format string is syntactically invalid, \nand a runtime exception will occur when \nthis statement is executed.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:VA_FORMAT_STRING_EXTRA_ARGUMENTS_PASSED","repo":"findbugs","name":"Correctness - More arguments are passed that are actually used in the format string","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"VA_FORMAT_STRING_EXTRA_ARGUMENTS_PASSED","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nA format-string method with a variable number of arguments is called,\nbut more arguments are passed than are actually used by the format string.\nThis won't cause a runtime exception, but the code may be silently omitting \ninformation that was intended to be included in the formatted string.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:EC_UNRELATED_TYPES_USING_POINTER_EQUALITY","repo":"findbugs","name":"Correctness - Using pointer equality to compare different types","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"EC_UNRELATED_TYPES_USING_POINTER_EQUALITY","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This method uses using pointer equality to compare two references that seem to be of\ndifferent types.  The result of this comparison will always be false at runtime.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:EC_UNRELATED_TYPES","repo":"findbugs","name":"Correctness - Call to equals() comparing different types","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"EC_UNRELATED_TYPES","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This method calls equals(Object) on two references of different\nclass types with no common subclasses.\nTherefore, the objects being compared\nare unlikely to be members of the same class at runtime\n(unless some application classes were not analyzed, or dynamic class\nloading can occur at runtime).\nAccording to the contract of equals(),\nobjects of different\nclasses should always compare as unequal; therefore, according to the\ncontract defined by java.lang.Object.equals(Object),\nthe result of this comparison will always be false at runtime.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"ARCHITECTURE_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"ARCHITECTURE_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Architecture","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:EC_ARRAY_AND_NONARRAY","repo":"findbugs","name":"Correctness - equals() used to compare array and nonarray","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"EC_ARRAY_AND_NONARRAY","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nThis method invokes the .equals(Object o) to compare an array and a reference that doesn't seem\nto be an array. If things being compared are of different types, they are guaranteed to be unequal\nand the comparison is almost certainly an error. Even if they are both arrays, the equals method\non arrays only determines of the two arrays are the same object.\nTo compare the\ncontents of the arrays, use java.util.Arrays.equals(Object[], Object[]).\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:EC_NULL_ARG","repo":"findbugs","name":"Correctness - Call to equals() with null argument","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"EC_NULL_ARG","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This method calls equals(Object), passing a null value as\nthe argument. According to the contract of the equals() method,\nthis call should always return <code>false</code>.</p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:EC_UNRELATED_INTERFACES","repo":"findbugs","name":"Correctness - Call to equals() comparing different interface types","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"EC_UNRELATED_INTERFACES","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This method calls equals(Object) on two references of unrelated\ninterface types, where neither is a subtype of the other,\nand there are no known non-abstract classes which implement both interfaces.\nTherefore, the objects being compared\nare unlikely to be members of the same class at runtime\n(unless some application classes were not analyzed, or dynamic class\nloading can occur at runtime).\nAccording to the contract of equals(),\nobjects of different\nclasses should always compare as unequal; therefore, according to the\ncontract defined by java.lang.Object.equals(Object),\nthe result of this comparison will always be false at runtime.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"ARCHITECTURE_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"ARCHITECTURE_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Architecture","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:EC_UNRELATED_CLASS_AND_INTERFACE","repo":"findbugs","name":"Correctness - Call to equals() comparing unrelated class and interface","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"EC_UNRELATED_CLASS_AND_INTERFACE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nThis method calls equals(Object) on two references,  one of which is a class\nand the other an interface, where neither the class nor any of its\nnon-abstract subclasses implement the interface.\nTherefore, the objects being compared\nare unlikely to be members of the same class at runtime\n(unless some application classes were not analyzed, or dynamic class\nloading can occur at runtime).\nAccording to the contract of equals(),\nobjects of different\nclasses should always compare as unequal; therefore, according to the\ncontract defined by java.lang.Object.equals(Object),\nthe result of this comparison will always be false at runtime.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"ARCHITECTURE_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"ARCHITECTURE_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Architecture","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:MWN_MISMATCHED_WAIT","repo":"findbugs","name":"Multithreaded correctness - Mismatched wait()","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"MWN_MISMATCHED_WAIT","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This method calls Object.wait() without obviously holding a lock\non the object.&nbsp;  Calling wait() without a lock held will result in\nan <code>IllegalMonitorStateException</code> being thrown.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"SYNCHRONIZATION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"SYNCHRONIZATION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Synchronization","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:MWN_MISMATCHED_NOTIFY","repo":"findbugs","name":"Multithreaded correctness - Mismatched notify()","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"MWN_MISMATCHED_NOTIFY","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This method calls Object.notify() or Object.notifyAll() without obviously holding a lock\non the object.&nbsp;  Calling notify() or notifyAll() without a lock held will result in\nan <code>IllegalMonitorStateException</code> being thrown.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"SYNCHRONIZATION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"SYNCHRONIZATION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Synchronization","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:SA_LOCAL_SELF_ASSIGNMENT","repo":"findbugs","name":"Dodgy - Self assignment of local variable","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"SA_LOCAL_SELF_ASSIGNMENT","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This method contains a self assignment of a local variable; e.g.</p>\n<pre>\n  public void foo() {\n    int x = 3;\n    x = x;\n  }\n</pre>\n<p>\nSuch assignments are useless, and may indicate a logic error or typo.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:INT_BAD_COMPARISON_WITH_SIGNED_BYTE","repo":"findbugs","name":"Correctness - Bad comparison of signed byte","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"INT_BAD_COMPARISON_WITH_SIGNED_BYTE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> Signed bytes can only have a value in the range -128 to 127. Comparing\na signed byte with a value outside that range is vacuous and likely to be incorrect.\nTo convert a signed byte <code>b</code> to an unsigned value in the range 0..255,\nuse <code>0xff &amp; b</code>\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:INT_BAD_COMPARISON_WITH_NONNEGATIVE_VALUE","repo":"findbugs","name":"Correctness - Bad comparison of nonnegative value with negative constant","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"INT_BAD_COMPARISON_WITH_NONNEGATIVE_VALUE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This code compares a value that is guaranteed to be non-negative with a negative constant.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:INT_BAD_REM_BY_1","repo":"findbugs","name":"Correctness - Integer remainder modulo 1","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"INT_BAD_REM_BY_1","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> Any expression (exp % 1) is guaranteed to always return zero.\nDid you mean (exp &amp; 1) or (exp % 2) instead?\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:INT_VACUOUS_COMPARISON","repo":"findbugs","name":"Dodgy - Vacuous comparison of integer value","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"INT_VACUOUS_COMPARISON","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> There is an integer comparison that always returns\nthe same value (e.g., x &lt;= Integer.MAX_VALUE).\n</p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:BIT_IOR_OF_SIGNED_BYTE","repo":"findbugs","name":"Correctness - Bitwise OR of signed byte value","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"BIT_IOR_OF_SIGNED_BYTE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> Loads a value from a byte array and performs a bitwise OR with\nthat value. Values loaded from a byte array are sign extended to 32 bits\nbefore any any bitwise operations are performed on the value.\nThus, if <code>b[0]</code> contains the value <code>0xff</code>, and\n<code>x</code> is initially 0, then the code \n<code>((x &lt;&lt; 8) | b[0])</code>  will sign extend <code>0xff</code>\nto get <code>0xffffffff</code>, and thus give the value\n<code>0xffffffff</code> as the result.\n</p>\n\n<p>In particular, the following code for packing a byte array into an int is badly wrong: </p>\n<pre>\nint result = 0;\nfor(int i = 0; i &lt; 4; i++) \n  result = ((result &lt;&lt; 8) | b[i]);\n</pre>\n\n<p>The following idiom will work instead: </p>\n<pre>\nint result = 0;\nfor(int i = 0; i &lt; 4; i++) \n  result = ((result &lt;&lt; 8) | (b[i] &amp; 0xff));\n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:BIT_SIGNED_CHECK","repo":"findbugs","name":"Bad practice - Check for sign of bitwise operation","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"BIT_SIGNED_CHECK","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This method compares an expression such as\n<pre>((event.detail &amp; SWT.SELECTED) &gt; 0)</pre>.\nUsing bit arithmetic and then comparing with the greater than operator can\nlead to unexpected results (of course depending on the value of\nSWT.SELECTED). If SWT.SELECTED is a negative number, this is a candidate\nfor a bug. Even when SWT.SELECTED is not negative, it seems good practice\nto use '!= 0' instead of '&gt; 0'.\n</p>\n<p>\n<em>Boris Bokowski</em>\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:BIT_SIGNED_CHECK_HIGH_BIT","repo":"findbugs","name":"Correctness - Check for sign of bitwise operation","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"BIT_SIGNED_CHECK_HIGH_BIT","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This method compares an expression such as\n<pre>((event.detail &amp; SWT.SELECTED) &gt; 0)</pre>.\nUsing bit arithmetic and then comparing with the greater than operator can\nlead to unexpected results (of course depending on the value of\nSWT.SELECTED). If SWT.SELECTED is a negative number, this is a candidate\nfor a bug. Even when SWT.SELECTED is not negative, it seems good practice\nto use '!= 0' instead of '&gt; 0'.\n</p>\n<p>\n<em>Boris Bokowski</em>\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:BIT_AND","repo":"findbugs","name":"Correctness - Incompatible bit masks (BIT_AND)","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"BIT_AND","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This method compares an expression of the form (e &amp; C) to D,\nwhich will always compare unequal\ndue to the specific values of constants C and D.\nThis may indicate a logic error or typo.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:BIT_AND_ZZ","repo":"findbugs","name":"Correctness - Check to see if ((...) & 0) == 0","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"BIT_AND_ZZ","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This method compares an expression of the form (e &amp; 0) to 0,\nwhich will always compare equal.\nThis may indicate a logic error or typo.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:BIT_IOR","repo":"findbugs","name":"Correctness - Incompatible bit masks (BIT_IOR)","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"BIT_IOR","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This method compares an expression of the form (e | C) to D.\nwhich will always compare unequal\ndue to the specific values of constants C and D.\nThis may indicate a logic error or typo.</p>\n\n<p> Typically, this bug occurs because the code wants to perform\na membership test in a bit set, but uses the bitwise OR\noperator (\"|\") instead of bitwise AND (\"&amp;\").</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:SA_FIELD_SELF_ASSIGNMENT","repo":"findbugs","name":"Correctness - Self assignment of field","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"SA_FIELD_SELF_ASSIGNMENT","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This method contains a self assignment of a field; e.g.\n</p>\n<pre>\n  int x;\n  public void foo() {\n    x = x;\n  }\n</pre>\n<p>Such assignments are useless, and may indicate a logic error or typo.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:SA_LOCAL_DOUBLE_ASSIGNMENT","repo":"findbugs","name":"Dodgy - Double assignment of local variable","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"SA_LOCAL_DOUBLE_ASSIGNMENT","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This method contains a double assignment of a local variable; e.g.\n</p>\n<pre>\n  public void foo() {\n    int x,y;\n    x = x = 17;\n  }\n</pre>\n<p>Assigning the same value to a variable twice is useless, and may indicate a logic error or typo.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:SA_FIELD_DOUBLE_ASSIGNMENT","repo":"findbugs","name":"Correctness - Double assignment of field","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"SA_FIELD_DOUBLE_ASSIGNMENT","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This method contains a double assignment of a field; e.g.\n</p>\n<pre>\n  int x,y;\n  public void foo() {\n    x = x = 17;\n  }\n</pre>\n<p>Assigning to a field twice is useless, and may indicate a logic error or typo.</p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:SA_FIELD_SELF_COMPUTATION","repo":"findbugs","name":"Correctness - Nonsensical self computation involving a field (e.g., x & x)","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"SA_FIELD_SELF_COMPUTATION","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This method performs a nonsensical computation of a field with another\nreference to the same field (e.g., x&x or x-x). Because of the nature\nof the computation, this operation doesn't seem to make sense,\nand may indicate a typo or\na logic error.  Double check the computation.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:SA_LOCAL_SELF_COMPUTATION","repo":"findbugs","name":"Correctness - Nonsensical self computation involving a variable (e.g., x & x)","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"SA_LOCAL_SELF_COMPUTATION","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This method performs a nonsensical computation of a local variable with another\nreference to the same variable (e.g., x&x or x-x). Because of the nature\nof the computation, this operation doesn't seem to make sense,\nand may indicate a typo or\na logic error.  Double check the computation.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:SA_FIELD_SELF_COMPARISON","repo":"findbugs","name":"Correctness - Self comparison of field with itself","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"SA_FIELD_SELF_COMPARISON","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This method compares a field with itself, and may indicate a typo or\na logic error.  Make sure that you are comparing the right things.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:SA_LOCAL_SELF_COMPARISON","repo":"findbugs","name":"Correctness - Self comparison of value with itself","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"SA_LOCAL_SELF_COMPARISON","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This method compares a local variable with itself, and may indicate a typo or\na logic error.  Make sure that you are comparing the right things.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:LI_LAZY_INIT_STATIC","repo":"findbugs","name":"Multithreaded correctness - Incorrect lazy initialization of static field","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"LI_LAZY_INIT_STATIC","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This method contains an unsynchronized lazy initialization of a non-volatile static field.\nBecause the compiler or processor may reorder instructions,\nthreads are not guaranteed to see a completely initialized object,\n<em>if the method can be called by multiple threads</em>.\nYou can make the field volatile to correct the problem.\nFor more information, see the\n<a href=\"http://www.cs.umd.edu/~pugh/java/memoryModel/\">Java Memory Model web site</a>.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"SYNCHRONIZATION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"SYNCHRONIZATION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Synchronization","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:LI_LAZY_INIT_UPDATE_STATIC","repo":"findbugs","name":"Multithreaded correctness - Incorrect lazy initialization and update of static field","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"LI_LAZY_INIT_UPDATE_STATIC","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This method contains an unsynchronized lazy initialization of a static field.\nAfter the field is set, the object stored into that location is further accessed. \nThe setting of the field is visible to other threads as soon as it is set. If the\nfuther accesses in the method that set the field serve to initialize the object, then\nyou have a <em>very serious</em> multithreading bug, unless something else prevents\nany other thread from accessing the stored object until it is fully initialized.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"SYNCHRONIZATION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"SYNCHRONIZATION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Synchronization","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:JLM_JSR166_LOCK_MONITORENTER","repo":"findbugs","name":"Multithreaded correctness - Synchronization performed on java.util.concurrent Lock","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"JLM_JSR166_LOCK_MONITORENTER","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This method performs synchronization on an implementation of\n<code>java.util.concurrent.locks.Lock</code>.  You should use\nthe <code>lock()</code> and <code>unlock()</code> methods instead.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"SYNCHRONIZATION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"SYNCHRONIZATION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Synchronization","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS","repo":"findbugs","name":"Correctness - Uncallable method defined in anonymous class","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This anonymous class defined a method that is not directly invoked and does not override\na method in a superclass. Since methods in other classes cannot directly invoke methods\ndeclared in an anonymous class, it seems that this method is uncallable. The method\nmight simply be dead code, but it is also possible that the method is intended to\noverride a method declared in a superclass, and due to an typo or other error the method does not,\nin fact, override the method it is intended to.\n</p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:ODR_OPEN_DATABASE_RESOURCE","repo":"findbugs","name":"Bad practice - Method may fail to close database resource","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"ODR_OPEN_DATABASE_RESOURCE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> The method creates a database resource (such as a database connection\nor row set), does not assign it to any\nfields, pass it to other methods, or return it, and does not appear to close\nthe object on all paths out of the method.&nbsp; Failure to\nclose database resources on all paths out of a method may\nresult in poor performance, and could cause the application to\nhave problems communicating with the database.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH","repo":"findbugs","name":"Bad practice - Method may fail to close database resource on exception","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> The method creates a database resource (such as a database connection\nor row set), does not assign it to any\nfields, pass it to other methods, or return it, and does not appear to close\nthe object on all exception paths out of the method.&nbsp; Failure to\nclose database resources on all paths out of a method may\nresult in poor performance, and could cause the application to\nhave problems communicating with the database.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"EXCEPTION_HANDLING","debtChar":"RELIABILITY","debtSubChar":"EXCEPTION_HANDLING","debtCharName":"Reliability","debtSubCharName":"Exception handling","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:ITA_INEFFICIENT_TO_ARRAY","repo":"findbugs","name":"Performance - Method uses toArray() with zero-length array argument","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"ITA_INEFFICIENT_TO_ARRAY","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This method uses the toArray() method of a collection derived class, and passes\nin a zero-length prototype array argument.  It is more efficient to use\n<code>myCollection.toArray(new Foo[myCollection.size()])</code>\nIf the array passed in is big enough to store all of the\nelements of the collection, then it is populated and returned\ndirectly. This avoids the need to create a second array\n(by reflection) to return as the result.</p>","defaultDebtChar":"EFFICIENCY","defaultDebtSubChar":"CPU_EFFICIENCY","debtChar":"EFFICIENCY","debtSubChar":"CPU_EFFICIENCY","debtCharName":"Efficiency","debtSubCharName":"Processor use","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:IJU_ASSERT_METHOD_INVOKED_FROM_RUN_METHOD","repo":"findbugs","name":"Correctness - JUnit assertion in run method will not be noticed by JUnit","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"IJU_ASSERT_METHOD_INVOKED_FROM_RUN_METHOD","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> A JUnit assertion is performed in a run method. Failed JUnit assertions\njust result in exceptions being thrown.\nThus, if this exception occurs in a thread other than the thread that invokes\nthe test method, the exception will terminate the thread but not result\nin the test failing.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:IJU_BAD_SUITE_METHOD","repo":"findbugs","name":"Correctness - TestCase declares a bad suite method","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"IJU_BAD_SUITE_METHOD","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> Class is a JUnit TestCase and defines a suite() method.\nHowever, the suite method needs to be declared as either\n<pre>public static junit.framework.Test suite()</pre>\nor \n<pre>public static junit.framework.TestSuite suite()</pre>\n</p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:IJU_SETUP_NO_SUPER","repo":"findbugs","name":"Correctness - TestCase defines setUp that doesn't call super.setUp()","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"IJU_SETUP_NO_SUPER","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> Class is a JUnit TestCase and implements the setUp method. The setUp method should call\nsuper.setUp(), but doesn't.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"ARCHITECTURE_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"ARCHITECTURE_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Architecture","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:IJU_TEARDOWN_NO_SUPER","repo":"findbugs","name":"Correctness - TestCase defines tearDown that doesn't call super.tearDown()","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"IJU_TEARDOWN_NO_SUPER","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> Class is a JUnit TestCase and implements the tearDown method. The tearDown method should call\nsuper.tearDown(), but doesn't.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"ARCHITECTURE_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"ARCHITECTURE_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Architecture","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:IJU_SUITE_NOT_STATIC","repo":"findbugs","name":"Correctness - TestCase implements a non-static suite method","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"IJU_SUITE_NOT_STATIC","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> Class is a JUnit TestCase and implements the suite() method.\n The suite method should be declared as being static, but isn't.</p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:IJU_NO_TESTS","repo":"findbugs","name":"Correctness - TestCase has no tests","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"IJU_NO_TESTS","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> Class is a JUnit TestCase but has not implemented any test methods</p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:BOA_BADLY_OVERRIDDEN_ADAPTER","repo":"findbugs","name":"Correctness - Class overrides a method implemented in super class Adapter wrongly","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"BOA_BADLY_OVERRIDDEN_ADAPTER","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This method overrides a method found in a parent class, where that class is an Adapter that implements\na listener defined in the java.awt.event or javax.swing.event package. As a result, this method will not\nget called when the event occurs.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"ARCHITECTURE_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"ARCHITECTURE_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Architecture","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:SQL_BAD_RESULTSET_ACCESS","repo":"findbugs","name":"Correctness - Method attempts to access a result set field with index 0","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"SQL_BAD_RESULTSET_ACCESS","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> A call to getXXX or updateXXX methods of a result set was made where the\nfield index is 0. As ResultSet fields start at index 1, this is always a mistake.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:SQL_BAD_PREPARED_STATEMENT_ACCESS","repo":"findbugs","name":"Correctness - Method attempts to access a prepared statement parameter with index 0","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"SQL_BAD_PREPARED_STATEMENT_ACCESS","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> A call to a setXXX method of a prepared statement was made where the\nparameter index is 0. As parameter indexes start at index 1, this is always a mistake.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:SIO_SUPERFLUOUS_INSTANCEOF","repo":"findbugs","name":"Correctness - Unnecessary type check done using instanceof operator","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"SIO_SUPERFLUOUS_INSTANCEOF","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> Type check performed using the instanceof operator where it can be statically determined whether the object\nis of the type requested. </p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:EC_BAD_ARRAY_COMPARE","repo":"findbugs","name":"Correctness - Invocation of equals() on an array, which is equivalent to ==","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"DEPRECATED","internalKey":"EC_BAD_ARRAY_COMPARE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nThis method invokes the .equals(Object o) method on an array. Since arrays do not override the equals\nmethod of Object, calling equals on an array is the same as comparing their addresses. To compare the\ncontents of the arrays, use java.util.Arrays.equals(Object[], Object[]).\n</p>\n<p>\n  This rule is deprecated, use <a href='/coding_rules#rule_key=squid:S1294'>S1294</a> instead.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:STI_INTERRUPTED_ON_CURRENTTHREAD","repo":"findbugs","name":"Correctness - Unneeded use of currentThread() call, to call interrupted()","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"STI_INTERRUPTED_ON_CURRENTTHREAD","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nThis method invokes the Thread.currentThread() call, just to call the interrupted() method. As interrupted() is a\nstatic method, is more simple and clear to use Thread.interrupted().\n</p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:STI_INTERRUPTED_ON_UNKNOWNTHREAD","repo":"findbugs","name":"Correctness - Static Thread.interrupted() method invoked on thread instance","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"STI_INTERRUPTED_ON_UNKNOWNTHREAD","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nThis method invokes the Thread.interrupted() method on a Thread object that appears to be a Thread object that is\nnot the current thread. As the interrupted() method is static, the interrupted method will be called on a different\nobject than the one the author intended.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:DLS_DEAD_LOCAL_STORE_IN_RETURN","repo":"findbugs","name":"Correctness - Useless assignment in return statement","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"DLS_DEAD_LOCAL_STORE_IN_RETURN","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nThis statement assigns to a local variable in a return statement. This assignment \nhas effect. Please verify that this statement does the right thing.\n</p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:DLS_DEAD_STORE_OF_CLASS_LITERAL","repo":"findbugs","name":"Correctness - Dead store of class literal","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"DLS_DEAD_STORE_OF_CLASS_LITERAL","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nThis instruction assigns a class literal to a variable and then never uses it.\n<a href=\"//java.sun.com/j2se/1.5.0/compatibility.html#literal\">The behavior of this differs in Java 1.4 and in Java 5.</a>\nIn Java 1.4 and earlier, a reference to <code>Foo.class</code> would force the static initializer\nfor <code>Foo</code> to be executed, if it has not been executed already.\nIn Java 5 and later, it does not.\n</p>\n<p>See Sun's <a href=\"//java.sun.com/j2se/1.5.0/compatibility.html#literal\">article on Java SE compatibility</a>\nfor more details and examples, and suggestions on how to force class initialization in Java 5.\n</p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:DLS_DEAD_LOCAL_STORE","repo":"findbugs","name":"Dodgy - Dead store to local variable","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"DLS_DEAD_LOCAL_STORE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nThis instruction assigns a value to a local variable,\nbut the value is not read or used in any subsequent instruction.\nOften, this indicates an error, because the value computed is never\nused.\n</p>\n<p>\nNote that Sun's javac compiler often generates dead stores for\nfinal local variables.  Because FindBugs is a bytecode-based tool,\nthere is no easy way to eliminate these false positives.\n</p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:DLS_DEAD_LOCAL_STORE_OF_NULL","repo":"findbugs","name":"Dodgy - Dead store of null to local variable","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"DLS_DEAD_LOCAL_STORE_OF_NULL","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>The code stores null into a local variable, and the stored value is not\nread. This store may have been introduced to assist the garbage collector, but\nas of Java SE 6.0, this is no longer needed or useful.\n</p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:IP_PARAMETER_IS_DEAD_BUT_OVERWRITTEN","repo":"findbugs","name":"Correctness - A parameter is dead upon entry to a method but overwritten","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"IP_PARAMETER_IS_DEAD_BUT_OVERWRITTEN","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nThe initial value of this parameter is ignored, and the parameter\nis overwritten here. This often indicates a mistaken belief that\nthe write to the parameter will be conveyed back to\nthe caller.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:MF_METHOD_MASKS_FIELD","repo":"findbugs","name":"Correctness - Method defines a variable that obscures a field","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"MF_METHOD_MASKS_FIELD","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This method defines a local variable with the same name as a field\nin this class or a superclass.  This may cause the method to\nread an uninitialized value from the field, leave the field uninitialized,\nor both.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"DATA_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"DATA_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Data","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:MF_CLASS_MASKS_FIELD","repo":"findbugs","name":"Correctness - Class defines field that masks a superclass field","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"MF_CLASS_MASKS_FIELD","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This class defines a field with the same name as a visible\ninstance field in a superclass.  This is confusing, and\nmay indicate an error if methods update or access one of\nthe fields when they wanted the other.</p>","defaultDebtChar":"CHANGEABILITY","defaultDebtSubChar":"ARCHITECTURE_CHANGEABILITY","debtChar":"CHANGEABILITY","debtSubChar":"ARCHITECTURE_CHANGEABILITY","debtCharName":"Changeability","debtSubCharName":"Architecture","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:WMI_WRONG_MAP_ITERATOR","repo":"findbugs","name":"Performance - Inefficient use of keySet iterator instead of entrySet iterator","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"WMI_WRONG_MAP_ITERATOR","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This method accesses the value of a Map entry, using a key that was retrieved from\na keySet iterator. It is more efficient to use an iterator on the entrySet of the map, to avoid the\nMap.get(key) lookup.</p>","defaultDebtChar":"EFFICIENCY","defaultDebtSubChar":"CPU_EFFICIENCY","debtChar":"EFFICIENCY","debtSubChar":"CPU_EFFICIENCY","debtCharName":"Efficiency","debtSubCharName":"Processor use","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:ISC_INSTANTIATE_STATIC_CLASS","repo":"findbugs","name":"Bad practice - Needless instantiation of class that only supplies static methods","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"ISC_INSTANTIATE_STATIC_CLASS","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This class allocates an object that is based on a class that only supplies static methods. This object\ndoes not need to be created, just access the static methods directly using the class name as a qualifier.</p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:REC_CATCH_EXCEPTION","repo":"findbugs","name":"Dodgy - Exception is caught when Exception is not thrown","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"REC_CATCH_EXCEPTION","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\n  This method uses a try-catch block that catches Exception objects, but Exception is not\n  thrown within the try block, and RuntimeException is not explicitly caught.  It is a common bug pattern to\n  say try { ... } catch (Exception e) { something } as a shorthand for catching a number of types of exception\n  each of whose catch blocks is identical, but this construct also accidentally catches RuntimeException as well,\n  masking potential bugs.\n  </p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:FE_FLOATING_POINT_EQUALITY","repo":"findbugs","name":"Dodgy - Test for floating point equality","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"FE_FLOATING_POINT_EQUALITY","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\n    This operation compares two floating point values for equality.\n    Because floating point calculations may involve rounding,\n   calculated float and double values may not be accurate.\n    For values that must be precise, such as monetary values,\n   consider using a fixed-precision type such as BigDecimal.\n    For values that need not be precise, consider comparing for equality\n    within some range, for example:\n    <code>if ( Math.abs(x - y) &lt; .0000001 )</code>.\n   See the Java Language Specification, section 4.2.4.\n    </p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:FE_TEST_IF_EQUAL_TO_NOT_A_NUMBER","repo":"findbugs","name":"Correctness - Doomed test for equality to NaN","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"FE_TEST_IF_EQUAL_TO_NOT_A_NUMBER","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\n    This code checks to see if a floating point value is equal to the special\n\tNot A Number value (e.g., <code>if (x == Double.NaN)</code>). However,\n\tbecause of the special semantics of <code>NaN</code>, no value\n\tis equal to <code>Nan</code>, including <code>NaN</code>. Thus,\n\t<code>x == Double.NaN</code> always evaluates to false.\n\n\tTo check to see if a value contained in <code>x</code>\n\tis the special Not A Number value, use \n\t<code>Double.isNaN(x)</code> (or <code>Float.isNaN(x)</code> if\n\t<code>x</code> is floating point precision).\n    </p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:UM_UNNECESSARY_MATH","repo":"findbugs","name":"Performance - Method calls static Math class method on a constant value","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"UM_UNNECESSARY_MATH","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This method uses a static method from java.lang.Math on a constant value. This method's\nresult in this case, can be determined statically, and is faster and sometimes more accurate to\njust use the constant. Methods detected are:\n</p>\n<table>\n<tr>\n   <th>Method</th> <th>Parameter</th>\n</tr>\n<tr>\n   <td>abs</td> <td>-any-</td>\n</tr>\n<tr>\n   <td>acos</td> <td>0.0 or 1.0</td>\n</tr>\n<tr>\n   <td>asin</td> <td>0.0 or 1.0</td>\n</tr>\n<tr>\n   <td>atan</td> <td>0.0 or 1.0</td>\n</tr>\n<tr>\n   <td>atan2</td> <td>0.0</td>\n</tr>\n<tr>\n   <td>cbrt</td> <td>0.0 or 1.0</td>\n</tr>\n<tr>\n   <td>ceil</td> <td>-any-</td>\n</tr>\n<tr>\n   <td>cos</td> <td>0.0</td>\n</tr>\n<tr>\n   <td>cosh</td> <td>0.0</td>\n</tr>\n<tr>\n   <td>exp</td> <td>0.0 or 1.0</td>\n</tr>\n<tr>\n   <td>expm1</td> <td>0.0</td>\n</tr>\n<tr>\n   <td>floor</td> <td>-any-</td>\n</tr>\n<tr>\n   <td>log</td> <td>0.0 or 1.0</td>\n</tr>\n<tr>\n   <td>log10</td> <td>0.0 or 1.0</td>\n</tr>\n<tr>\n   <td>rint</td> <td>-any-</td>\n</tr>\n<tr>\n   <td>round</td> <td>-any-</td>\n</tr>\n<tr>\n   <td>sin</td> <td>0.0</td>\n</tr>\n<tr>\n   <td>sinh</td> <td>0.0</td>\n</tr>\n<tr>\n   <td>sqrt</td> <td>0.0 or 1.0</td>\n</tr>\n<tr>\n   <td>tan</td> <td>0.0</td>\n</tr>\n<tr>\n   <td>tanh</td> <td>0.0</td>\n</tr>\n<tr>\n   <td>toDegrees</td> <td>0.0 or 1.0</td>\n</tr>\n<tr>\n   <td>toRadians</td> <td>0.0</td>\n</tr>\n</table>","defaultDebtChar":"EFFICIENCY","defaultDebtSubChar":"CPU_EFFICIENCY","debtChar":"EFFICIENCY","debtSubChar":"CPU_EFFICIENCY","debtCharName":"Efficiency","debtSubCharName":"Processor use","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:RI_REDUNDANT_INTERFACES","repo":"findbugs","name":"Dodgy - Class implements same interface as superclass","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"RI_REDUNDANT_INTERFACES","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\n    This class declares that it implements an interface that is also implemented by a superclass.\n    This is redundant because once a superclass implements an interface, all subclasses by default also\n    implement this interface. It may point out that the inheritance hierarchy has changed since\n    this class was created, and consideration should be given to the ownership of\n    the interface's implementation.\n    </p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:MTIA_SUSPECT_STRUTS_INSTANCE_FIELD","repo":"findbugs","name":"Dodgy - Class extends Struts Action class and uses instance variables","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"MTIA_SUSPECT_STRUTS_INSTANCE_FIELD","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\n    This class extends from a Struts Action class, and uses an instance member variable. Since only\n    one instance of a struts Action class is created by the Struts framework, and used in a\n    multithreaded way, this paradigm is highly discouraged and most likely problematic. Consider\n    only using method local variables. Only instance fields that are written outside of a monitor\n    are reported. \n    </p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"DATA_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"DATA_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Data","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:MTIA_SUSPECT_SERVLET_INSTANCE_FIELD","repo":"findbugs","name":"Dodgy - Class extends Servlet class and uses instance variables","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"MTIA_SUSPECT_SERVLET_INSTANCE_FIELD","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\n    This class extends from a Servlet class, and uses an instance member variable. Since only\n    one instance of a Servlet class is created by the J2EE framework, and used in a\n    multithreaded way, this paradigm is highly discouraged and most likely problematic. Consider\n    only using method local variables.\n    </p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"DATA_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"DATA_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Data","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:ICAST_INTEGER_MULTIPLY_CAST_TO_LONG","repo":"findbugs","name":"Dodgy - Result of integer multiplication cast to long","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"ICAST_INTEGER_MULTIPLY_CAST_TO_LONG","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nThis code performs integer multiply and then converts the result to a long,\nas in:\n<code>\n<pre> \n\tlong convertDaysToMilliseconds(int days) { return 1000*3600*24*days; } \n</pre></code>\nIf the multiplication is done using long arithmetic, you can avoid\nthe possibility that the result will overflow. For example, you\ncould fix the above code to:\n<code>\n<pre> \n\tlong convertDaysToMilliseconds(int days) { return 1000L*3600*24*days; } \n</pre></code>\nor \n<code>\n<pre> \n\tstatic final long MILLISECONDS_PER_DAY = 24L*3600*1000;\n\tlong convertDaysToMilliseconds(int days) { return days * MILLISECONDS_PER_DAY; } \n</pre></code>\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:ICAST_IDIV_CAST_TO_DOUBLE","repo":"findbugs","name":"Dodgy - int division result cast to double or float","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"ICAST_IDIV_CAST_TO_DOUBLE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nThis code casts the result of an integer division operation to double or \nfloat.\nDoing division on integers truncates the result\nto the integer value closest to zero.  The fact that the result\nwas cast to double suggests that this precision should have been retained.\nWhat was probably meant was to cast one or both of the operands to\ndouble <em>before</em> performing the division.  Here is an example:\n</p>\n<blockquote>\n<pre>\nint x = 2;\nint y = 5;\n// Wrong: yields result 0.0\ndouble value1 =  x / y;\n\n// Right: yields result 0.4\ndouble value2 =  x / (double) y;\n</pre>\n</blockquote>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:ICAST_INT_CAST_TO_DOUBLE_PASSED_TO_CEIL","repo":"findbugs","name":"Correctness - int value cast to double and then passed to Math.ceil","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"ICAST_INT_CAST_TO_DOUBLE_PASSED_TO_CEIL","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nThis code converts an int value to a double precision\nfloating point number and then\npassing the result to the Math.ceil() function, which rounds a double to\nthe next higher integer value. This operation should always be a no-op,\nsince the converting an integer to a double should give a number with no fractional part.\nIt is likely that the operation that generated the value to be passed\nto Math.ceil was intended to be performed using double precision\nfloating point arithmetic.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:ICAST_INT_CAST_TO_FLOAT_PASSED_TO_ROUND","repo":"findbugs","name":"Correctness - int value cast to float and then passed to Math.round","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"ICAST_INT_CAST_TO_FLOAT_PASSED_TO_ROUND","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nThis code converts an int value to a float precision\nfloating point number and then\npassing the result to the Math.round() function, which returns the int/long closest\nto the argument. This operation should always be a no-op,\nsince the converting an integer to a float should give a number with no fractional part.\nIt is likely that the operation that generated the value to be passed\nto Math.round was intended to be performed using \nfloating point arithmetic.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:NP_NULL_INSTANCEOF","repo":"findbugs","name":"Correctness - A known null value is checked to see if it is an instance of a type","createdAt":"2013-06-19T07:34:52+0000","severity":"BLOCKER","status":"READY","internalKey":"NP_NULL_INSTANCEOF","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nThis instanceof test will always return false, since the value being checked is guaranteed to be null.\nAlthough this is safe, make sure it isn't\nan indication of some misunderstanding or some other logic error.\n</p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"BLOCKER","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"BLOCKER","params":[]}]},{"rule":{"key":"findbugs:DMI_RANDOM_USED_ONLY_ONCE","repo":"findbugs","name":"Bad practice - Random object created and used only once","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"DMI_RANDOM_USED_ONLY_ONCE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This code creates a java.util.Random object, uses it to generate one random number, and then discards\nthe Random object. This produces mediocre quality random numbers and is inefficient. \nIf possible, rewrite the code so that the Random object is created once and saved, and each time a new random number\nis required invoke a method on the existing Random object to obtain it.\n</p>\n\n<p>If it is important that the generated Random numbers not be guessable, you <em>must</em> not create a new Random for each random\nnumber; the values are too easily guessable. You should strongly consider using a java.security.SecureRandom instead\n(and avoid allocating a new SecureRandom for each random number needed).\n</p>","defaultDebtChar":"SECURITY","defaultDebtSubChar":"SECURITY_FEATURES","debtChar":"SECURITY","debtSubChar":"SECURITY_FEATURES","debtCharName":"Security","debtSubCharName":"Security features","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:DMI_LONG_BITS_TO_DOUBLE_INVOKED_ON_INT","repo":"findbugs","name":"Correctness - Double.longBitsToDouble invoked on an int","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"DMI_LONG_BITS_TO_DOUBLE_INVOKED_ON_INT","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> The Double.longBitsToDouble method is invoked, but a 32 bit int value is passed\n\tas an argument. This almostly certainly is not intended and is unlikely \n\tto give the intended result.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:BC_EQUALS_METHOD_SHOULD_WORK_FOR_ALL_OBJECTS","repo":"findbugs","name":"Bad practice - Equals method should not assume anything about the type of its argument","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"BC_EQUALS_METHOD_SHOULD_WORK_FOR_ALL_OBJECTS","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nThe <code>equals(Object o)</code> method shouldn't make any assumptions\nabout the type of <code>o</code>. It should simply return\nfalse if <code>o</code> is not the same type as <code>this</code>.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"DATA_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"DATA_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Data","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:BC_BAD_CAST_TO_CONCRETE_COLLECTION","repo":"findbugs","name":"Dodgy - Questionable cast to concrete collection","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"BC_BAD_CAST_TO_CONCRETE_COLLECTION","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nThis code casts an abstract collection (such as a Collection, List, or Set)\nto a specific concrete implementation (such as an ArrayList or HashSet).\nThis might not be correct, and it may make your code fragile, since\nit makes it harder to switch to other concrete implementations at a future\npoint. Unless you have a particular reason to do so, just use the abstract\ncollection class.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:BC_UNCONFIRMED_CAST","repo":"findbugs","name":"Dodgy - Unchecked/unconfirmed cast","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"BC_UNCONFIRMED_CAST","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nThis cast is unchecked, and not all instances of the type casted from can be cast to\nthe type it is being cast to. Ensure that your program logic ensures that this\ncast will not fail.\n</p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:BC_IMPOSSIBLE_CAST","repo":"findbugs","name":"Correctness - Impossible cast","createdAt":"2013-06-19T07:34:52+0000","severity":"BLOCKER","status":"READY","internalKey":"BC_IMPOSSIBLE_CAST","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nThis cast will always throw a ClassCastException.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"BLOCKER","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"BLOCKER","params":[]}]},{"rule":{"key":"findbugs:BC_IMPOSSIBLE_INSTANCEOF","repo":"findbugs","name":"Correctness - instanceof will always return false","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"BC_IMPOSSIBLE_INSTANCEOF","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nThis instanceof test will always return false. Although this is safe, make sure it isn't\nan indication of some misunderstanding or some other logic error.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:BC_VACUOUS_INSTANCEOF","repo":"findbugs","name":"Dodgy - instanceof will always return true","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"BC_VACUOUS_INSTANCEOF","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nThis instanceof test will always return true (unless the value being tested is null). \nAlthough this is safe, make sure it isn't\nan indication of some misunderstanding or some other logic error.\nIf you really want to test the value for being null, perhaps it would be clearer to do\nbetter to do a null test rather than an instanceof test.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:BC_BAD_CAST_TO_ABSTRACT_COLLECTION","repo":"findbugs","name":"Dodgy - Questionable cast to abstract collection","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"BC_BAD_CAST_TO_ABSTRACT_COLLECTION","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nThis code casts a Collection to an abstract collection\n(such as <code>List</code>, <code>Set</code>, or <code>Map</code>).\nEnsure that you are guaranteed that the object is of the type\nyou are casting to. If all you need is to be able\nto iterate through a collection, you don't need to cast it to a Set or List.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:RE_POSSIBLE_UNINTENDED_PATTERN","repo":"findbugs","name":"Correctness - \".\" used for regular expression","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"RE_POSSIBLE_UNINTENDED_PATTERN","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nA String function is being invoked and \".\" is being passed\nto a parameter that takes a regular expression as an argument. Is this what you intended?\nFor example\ns.replaceAll(\".\", \"/\") will return a String in which <em>every</em>\ncharacter has been replaced by a / character.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"DATA_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"DATA_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Data","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:RE_BAD_SYNTAX_FOR_REGULAR_EXPRESSION","repo":"findbugs","name":"Correctness - Invalid syntax for regular expression","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"RE_BAD_SYNTAX_FOR_REGULAR_EXPRESSION","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nThe code here uses a regular expression that is invalid according to the syntax\nfor regular expressions. This statement will throw a PatternSyntaxException when\nexecuted.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:RE_CANT_USE_FILE_SEPARATOR_AS_REGULAR_EXPRESSION","repo":"findbugs","name":"Correctness - File.separator used for regular expression","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"RE_CANT_USE_FILE_SEPARATOR_AS_REGULAR_EXPRESSION","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nThe code here uses <code>File.separator</code> \nwhere a regular expression is required. This will fail on Windows\nplatforms, where the <code>File.separator</code> is a backslash, which is interpreted in a\nregular expression as an escape character. Amoung other options, you can just use\n<code>File.separatorChar=='\\\\' &amp; \"\\\\\\\\\" : File.separator</code> instead of\n<code>File.separator</code>\n\n</p>","defaultDebtChar":"PORTABILITY","defaultDebtSubChar":"OS_RELATED_PORTABILITY","debtChar":"PORTABILITY","debtSubChar":"OS_RELATED_PORTABILITY","debtCharName":"Portability","debtSubCharName":"OS","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:DLS_OVERWRITTEN_INCREMENT","repo":"findbugs","name":"Correctness - Overwritten increment","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"DLS_OVERWRITTEN_INCREMENT","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nThe code performs an increment operation (e.g., <code>i++</code>) and then\nimmediately overwrites it. For example, <code>i = i++</code> immediately\noverwrites the incremented value with the original value.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:ICAST_BAD_SHIFT_AMOUNT","repo":"findbugs","name":"Correctness - Integer shift by an amount not in the range 0..31","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"ICAST_BAD_SHIFT_AMOUNT","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nThe code performs an integer shift by a constant amount outside\nthe range 0..31.\nThe effect of this is to use the lower 5 bits of the integer\nvalue to decide how much to shift by. This probably isn't want was expected,\nand it at least confusing.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:IM_MULTIPLYING_RESULT_OF_IREM","repo":"findbugs","name":"Correctness - Integer multiply of result of integer remainder","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"IM_MULTIPLYING_RESULT_OF_IREM","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nThe code multiplies the result of an integer remaining by an integer constant.\nBe sure you don't have your operator precedence confused. For example\ni % 60 * 1000 is (i % 60) * 1000, not i % (60 * 1000).\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:IM_BAD_CHECK_FOR_ODD","repo":"findbugs","name":"Dodgy - Check for oddness that won't work for negative numbers","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"IM_BAD_CHECK_FOR_ODD","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nThe code uses x % 2 == 1 to check to see if a value is odd, but this won't work\nfor negative numbers (e.g., (-5) % 2 == -1). If this code is intending to check\nfor oddness, consider using x &amp; 1 == 1, or x % 2 != 0.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:IM_AVERAGE_COMPUTATION_COULD_OVERFLOW","repo":"findbugs","name":"Dodgy - Computation of average could overflow","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"IM_AVERAGE_COMPUTATION_COULD_OVERFLOW","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>The code computes the average of two integers using either division or signed right shift,\nand then uses the result as the index of an array.\nIf the values being averaged are very large, this can overflow (resulting in the computation\nof a negative average).  Assuming that the result is intended to be nonnegative, you \ncan use an unsigned right shift instead. In other words, rather that using <code>(low+high)/2</code>,\nuse <code>(low+high) &gt;&gt;&gt; 1</code>\n</p>\n<p>This bug exists in many earlier implementations of binary search and merge sort.\nMartin Buchholz <a href=\"http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6412541\">found and fixed it</a>\nin the JDK libraries, and Joshua Bloch\n<a href=\"http://googleresearch.blogspot.com/2006/06/extra-extra-read-all-about-it-nearly.html\">widely\npublicized the bug pattern</a>.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:DMI_INVOKING_TOSTRING_ON_ARRAY","repo":"findbugs","name":"Correctness - Invocation of toString on an array","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"DMI_INVOKING_TOSTRING_ON_ARRAY","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nThe code invokes toString on an array, which will generate a fairly useless result\nsuch as [C@16f0472. Consider using Arrays.toString to convert the array into a readable\nString that gives the contents of the array. See Programming Puzzlers, chapter 3, puzzle 12.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:DMI_INVOKING_TOSTRING_ON_ANONYMOUS_ARRAY","repo":"findbugs","name":"Correctness - Invocation of toString on an anonymous array","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"DMI_INVOKING_TOSTRING_ON_ANONYMOUS_ARRAY","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nThe code invokes toString on an (anonymous) array.  Calling toString on an array generates a fairly useless result\nsuch as [C@16f0472. Consider using Arrays.toString to convert the array into a readable\nString that gives the contents of the array. See Programming Puzzlers, chapter 3, puzzle 12.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:ICAST_QUESTIONABLE_UNSIGNED_RIGHT_SHIFT","repo":"findbugs","name":"Dodgy - Unsigned right shift cast to short/byte","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"ICAST_QUESTIONABLE_UNSIGNED_RIGHT_SHIFT","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nThe code performs an unsigned right shift, whose result is then\ncast to a short or byte, which discards the upper bits of the result.\nSince the upper bits are discarded, there may be no difference between\na signed and unsigned right shift (depending upon the size of the shift).\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:DMI_HARDCODED_ABSOLUTE_FILENAME","repo":"findbugs","name":"Dodgy - Code contains a hard coded reference to an absolute pathname","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"DMI_HARDCODED_ABSOLUTE_FILENAME","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>This code constructs a File object using a hard coded to an absolute pathname\n(e.g., <code>new File(\"/home/dannyc/workspace/j2ee/src/share/com/sun/enterprise/deployment\");</code>\n</p>","defaultDebtChar":"PORTABILITY","defaultDebtSubChar":"HARDWARE_RELATED_PORTABILITY","debtChar":"PORTABILITY","debtSubChar":"HARDWARE_RELATED_PORTABILITY","debtCharName":"Portability","debtSubCharName":"Hardware","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:DMI_BAD_MONTH","repo":"findbugs","name":"Correctness - Bad constant value for month","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"DMI_BAD_MONTH","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nThis code passes a constant month\nvalue outside the expected range of 0..11 to a method.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:DMI_USELESS_SUBSTRING","repo":"findbugs","name":"Dodgy - Invocation of substring(0), which returns the original value","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"DMI_USELESS_SUBSTRING","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nThis code invokes substring(0) on a String, which returns the original value.\n</p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:DMI_CALLING_NEXT_FROM_HASNEXT","repo":"findbugs","name":"Correctness - hasNext method invokes next","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"DMI_CALLING_NEXT_FROM_HASNEXT","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nThe hasNext() method invokes the next() method. This is almost certainly wrong,\nsince the hasNext() method is not supposed to change the state of the iterator,\nand the next method is supposed to change the state of the iterator.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD","repo":"findbugs","name":"Dodgy - Write to static field from instance method","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This instance method writes to a static field. This is tricky to get\ncorrect if multiple instances are being manipulated,\nand generally bad practice.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"ARCHITECTURE_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"ARCHITECTURE_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Architecture","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:SWL_SLEEP_WITH_LOCK_HELD","repo":"findbugs","name":"Multithreaded correctness - Method calls Thread.sleep() with a lock held","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"SWL_SLEEP_WITH_LOCK_HELD","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\n      This method calls Thread.sleep() with a lock held.  This may result\n      in very poor performance and scalability, or a deadlock, since other threads may\n      be waiting to acquire the lock.  It is a much better idea to call\n      wait() on the lock, which releases the lock and allows other threads\n      to run.\n      </p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"SYNCHRONIZATION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"SYNCHRONIZATION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Synchronization","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:J2EE_STORE_OF_NON_SERIALIZABLE_OBJECT_INTO_SESSION","repo":"findbugs","name":"Bad practice - Store of non serializable object into HttpSession","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"J2EE_STORE_OF_NON_SERIALIZABLE_OBJECT_INTO_SESSION","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nThis code seems to be storing a non-serializable object into an HttpSession.\nIf this session is passivated or migrated, an error will result.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"ARCHITECTURE_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"ARCHITECTURE_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Architecture","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:DMI_NONSERIALIZABLE_OBJECT_WRITTEN","repo":"findbugs","name":"Dodgy - Non serializable object written to ObjectOutput","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"DMI_NONSERIALIZABLE_OBJECT_WRITTEN","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nThis code seems to be passing a non-serializable object to the ObjectOutput.writeObject method.\nIf the object is, indeed, non-serializable, an error will result.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:DB_DUPLICATE_BRANCHES","repo":"findbugs","name":"Dodgy - Method uses the same code for two branches","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"DB_DUPLICATE_BRANCHES","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\n      This method uses the same code to implement two branches of a conditional branch.\n\tCheck to ensure that this isn't a coding mistake.\n      </p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:DB_DUPLICATE_SWITCH_CLAUSES","repo":"findbugs","name":"Dodgy - Method uses the same code for two switch clauses","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"DB_DUPLICATE_SWITCH_CLAUSES","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\n      This method uses the same code to implement two clauses of a switch statement.\n\tThis could be a case of duplicate code, but it might also indicate\n\ta coding mistake.\n      </p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:XFB_XML_FACTORY_BYPASS","repo":"findbugs","name":"Dodgy - Method directly allocates a specific implementation of xml interfaces","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"XFB_XML_FACTORY_BYPASS","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\n      This method allocates a specific implementation of an xml interface. It is preferable to use\n      the supplied factory classes to create these objects so that the implementation can be\n      changed at runtime. See\n      </p>\n      <ul>\n         <li>javax.xml.parsers.DocumentBuilderFactory</li>\n         <li>javax.xml.parsers.SAXParserFactory</li>\n         <li>javax.xml.transform.TransformerFactory</li>\n         <li>org.w3c.dom.Document.create<i>XXXX</i></li>\n      </ul>\n      <p>for details.</p>","defaultDebtChar":"PORTABILITY","defaultDebtSubChar":"SOFTWARE_RELATED_PORTABILITY","debtChar":"PORTABILITY","debtSubChar":"SOFTWARE_RELATED_PORTABILITY","debtCharName":"Portability","debtSubCharName":"Software","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:CI_CONFUSED_INHERITANCE","repo":"findbugs","name":"Dodgy - Class is final but declares protected field","createdAt":"2013-06-19T07:34:52+0000","severity":"MINOR","status":"READY","internalKey":"CI_CONFUSED_INHERITANCE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\n      This class is declared to be final, but declares fields to be protected. Since the class\n      is final, it can not be derived from, and the use of protected is confusing. The access\n      modifier for the field should be changed to private or public to represent the true\n      use for the field.\n      </p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MINOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MINOR","params":[]}]},{"rule":{"key":"findbugs:QBA_QUESTIONABLE_BOOLEAN_ASSIGNMENT","repo":"findbugs","name":"Correctness - Method assigns boolean literal in boolean expression","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"QBA_QUESTIONABLE_BOOLEAN_ASSIGNMENT","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\n      This method assigns a literal boolean value (true or false) to a boolean variable inside\n      an if or while expression. Most probably this was supposed to be a boolean comparison using \n      ==, not an assignment using =.\n      </p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:GC_UNRELATED_TYPES","repo":"findbugs","name":"Correctness - No relationship between generic parameter and method argument","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"GC_UNRELATED_TYPES","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This call to a generic collection method contains an argument\n     with an incompatible class from that of the collection's parameter\n\t(i.e., the type of the argument is neither a supertype nor a subtype \n\t\tof the corresponding generic type argument).\n     Therefore, it is unlikely that the collection contains any objects \n\tthat are equal to the method argument used here.\n\tMost likely, the wrong value is being passed to the method.</p>\n\t<p>In general, instances of two unrelated classes are not equal. \n\tFor example, if the <code>Foo</code> and <code>Bar</code> classes\n\tare not related by subtyping, then an instance of <code>Foo</code>\n\t\tshould not be equal to an instance of <code>Bar</code>.\n\tAmong other issues, doing so will likely result in an equals method\n\tthat is not symmetrical. For example, if you define the <code>Foo</code> class\n\tso that a <code>Foo</code> can be equal to a <code>String</code>,\n\tyour equals method isn't symmetrical since a <code>String</code> can only be equal\n\tto a <code>String</code>.\n\t</p>\n\t<p>In rare cases, people do define nonsymmetrical equals methods and still manage to make \n\ttheir code work. Although none of the APIs document or guarantee it, it is typically\n\tthe case that if you check if a <code>Collection&lt;String&gt;</code> contains\n\ta <code>Foo</code>, the equals method of argument (e.g., the equals method of the \n\t<code>Foo</code> class) used to perform the equality checks.\n\t</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"ARCHITECTURE_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"ARCHITECTURE_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Architecture","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:TQ_ALWAYS_VALUE_USED_WHERE_NEVER_REQUIRED","repo":"findbugs","name":"Correctness - Value annotated as carrying a type qualifier used where a value that must not carry that qualifier is required","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"TQ_ALWAYS_VALUE_USED_WHERE_NEVER_REQUIRED","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\n        A value specified as carrying a type qualifier annotation is\n        consumed in a location or locations requiring that the value not\n        carry that annotation.\n        </p>\n        \n        <p>\n        More precisely, a value annotated with a type qualifier specifying when=ALWAYS\n        is guaranteed to reach a use or uses where the same type qualifier specifies when=NEVER.\n        </p>\n        \n        <p>\n        For example, say that @NonNegative is a nickname for\n        the type qualifier annotation @Negative(when=When.NEVER).\n        The following code will generate this warning because\n        the return statement requires a @NonNegative value,\n        but receives one that is marked as @Negative.   \n        </p>\n        <blockquote>\n<pre>\npublic @NonNegative Integer example(@Negative Integer value) {\n    return value;\n}\n</pre>\n        </blockquote>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:TQ_NEVER_VALUE_USED_WHERE_ALWAYS_REQUIRED","repo":"findbugs","name":"Correctness - Value annotated as never carrying a type qualifier used where value carrying that qualifier is required","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"TQ_NEVER_VALUE_USED_WHERE_ALWAYS_REQUIRED","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\n        A value specified as not carrying a type qualifier annotation is guaranteed\n        to be consumed in a location or locations requiring that the value does\n        carry that annotation.\n        </p>\n        \n        <p>\n        More precisely, a value annotated with a type qualifier specifying when=NEVER\n        is guaranteed to reach a use or uses where the same type qualifier specifies when=ALWAYS.\n        </p>\n\n        <p>\n        TODO: example\n        </p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:TQ_MAYBE_SOURCE_VALUE_REACHES_ALWAYS_SINK","repo":"findbugs","name":"Correctness - Value that might not carry a type qualifier is always used in a way requires that type qualifier","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"TQ_MAYBE_SOURCE_VALUE_REACHES_ALWAYS_SINK","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\n      A value that is annotated as possibility not being an instance of\n\tthe values denoted by the type qualifier, and the value is guaranteed to be used\n\tin a way that requires values denoted by that type qualifier.\n      </p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"DATA_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"DATA_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Data","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:TQ_MAYBE_SOURCE_VALUE_REACHES_NEVER_SINK","repo":"findbugs","name":"Correctness - Value that might carry a type qualifier is always used in a way prohibits it from having that type qualifier","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"TQ_MAYBE_SOURCE_VALUE_REACHES_NEVER_SINK","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\n      A value that is annotated as possibility being an instance of\n\tthe values denoted by the type qualifier, and the value is guaranteed to be used\n\tin a way that prohibits values denoted by that type qualifier.\n      </p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"DATA_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"DATA_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Data","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:TQ_EXPLICIT_UNKNOWN_SOURCE_VALUE_REACHES_NEVER_SINK","repo":"findbugs","name":"Correctness - Value required to not have type qualifier, but marked as unknown","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"TQ_EXPLICIT_UNKNOWN_SOURCE_VALUE_REACHES_NEVER_SINK","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\n      A value is used in a way that requires it to be never be a value denoted by a type qualifier, but\n\tthere is an explicit annotation stating that it is not known where the value is prohibited from having that type qualifier.\n\tEither the usage or the annotation is incorrect.\n      </p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:TQ_EXPLICIT_UNKNOWN_SOURCE_VALUE_REACHES_ALWAYS_SINK","repo":"findbugs","name":"Correctness - Value required to have type qualifier, but marked as unknown","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"TQ_EXPLICIT_UNKNOWN_SOURCE_VALUE_REACHES_ALWAYS_SINK","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\n      A value is used in a way that requires it to be always be a value denoted by a type qualifier, but\n\tthere is an explicit annotation stating that it is not known where the value is required to have that type qualifier.\n\tEither the usage or the annotation is incorrect.\n      </p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:SKIPPED_CLASS_TOO_BIG","repo":"findbugs","name":"Dodgy - Class too big for analysis","createdAt":"2013-06-19T07:34:52+0000","severity":"MINOR","status":"READY","internalKey":"SKIPPED_CLASS_TOO_BIG","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>This class is bigger than can be effectively handled, and was not fully analyzed for errors.\n</p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"READABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"READABILITY","debtCharName":"Maintainability","debtSubCharName":"Readability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"3h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"3h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MINOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MINOR","params":[]}]},{"rule":{"key":"findbugs:DMI_SCHEDULED_THREAD_POOL_EXECUTOR_WITH_ZERO_CORE_THREADS","repo":"findbugs","name":"Correctness - Creation of ScheduledThreadPoolExecutor with zero core threads","createdAt":"2013-06-19T07:34:52+0000","severity":"MINOR","status":"READY","internalKey":"DMI_SCHEDULED_THREAD_POOL_EXECUTOR_WITH_ZERO_CORE_THREADS","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>(<a href=\"http://java.sun.com/javase/6/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html#ScheduledThreadPoolExecutor(int)\">Javadoc</a>)\nA ScheduledThreadPoolExecutor with zero core threads will never execute anything; changes to the max pool size are ignored.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"ARCHITECTURE_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"ARCHITECTURE_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Architecture","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MINOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MINOR","params":[]}]},{"rule":{"key":"findbugs:DMI_FUTILE_ATTEMPT_TO_CHANGE_MAXPOOL_SIZE_OF_SCHEDULED_THREAD_POOL_EXECUTOR","repo":"findbugs","name":"Correctness - Futile attempt to change max pool size of ScheduledThreadPoolExecutor","createdAt":"2013-06-19T07:34:52+0000","severity":"MINOR","status":"READY","internalKey":"DMI_FUTILE_ATTEMPT_TO_CHANGE_MAXPOOL_SIZE_OF_SCHEDULED_THREAD_POOL_EXECUTOR","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>(<a href=\"http://java.sun.com/javase/6/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html\">Javadoc</a>)\nWhile ScheduledThreadPoolExecutor inherits from ThreadPoolExecutor, a few of the inherited tuning methods are not useful for it. In particular, because it acts as a fixed-sized pool using corePoolSize threads and an unbounded queue, adjustments to maximumPoolSize have no useful effect.\n\t</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MINOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MINOR","params":[]}]},{"rule":{"key":"findbugs:FL_MATH_USING_FLOAT_PRECISION","repo":"findbugs","name":"Correctness - Method performs math using floating point precision","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"FL_MATH_USING_FLOAT_PRECISION","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\n   The method performs math operations using floating point precision.\n   Floating point precision is very imprecise. For example,\n   16777216.0f + 1.0f = 16777216.0f. Consider using double math instead.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"DATA_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"DATA_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Data","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:EQ_CHECK_FOR_OPERAND_NOT_COMPATIBLE_WITH_THIS","repo":"findbugs","name":"Bad practice - Equals checks for noncompatible operand","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"EQ_CHECK_FOR_OPERAND_NOT_COMPATIBLE_WITH_THIS","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This equals method is checking to see if the argument is some incompatible type\n(i.e., a class that is neither a supertype nor subtype of the class that defines\nthe equals method). For example, the Foo class might have an equals method\nthat looks like:\n\n<p><code><pre>\npublic boolean equals(Object o) {\n  if (o instanceof Foo)\n    return name.equals(((Foo)o).name);\n  else if (o instanceof String)\n    return name.equals(o);\n  else return false;\n</pre></code></p>\n\n<p>This is considered bad practice, as it makes it very hard to implement an equals method that\nis symmetric and transitive. Without those properties, very unexpected behavoirs are possible.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:HE_SIGNATURE_DECLARES_HASHING_OF_UNHASHABLE_CLASS","repo":"findbugs","name":"Correctness - Signature declares use of unhashable class in hashed construct","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"HE_SIGNATURE_DECLARES_HASHING_OF_UNHASHABLE_CLASS","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> A method, field or class declares a generic signature where a non-hashable class\nis used in context where a hashable class is required.\nA class that declares an equals method but inherits a hashCode() method\nfrom Object is unhashable, since it doesn't fulfill the requirement that\nequal objects have equal hashCodes.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:IS_INCONSISTENT_SYNC","repo":"findbugs","name":"Multithreaded correctness - Inconsistent synchronization","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"IS_INCONSISTENT_SYNC","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> The fields of this class appear to be accessed inconsistently with respect\n  to synchronization.&nbsp; This bug report indicates that the bug pattern detector\n  judged that\n  </p>\n  <ol>\n  <li> The class contains a mix of locked and unlocked accesses,</li>\n  <li> At least one locked access was performed by one of the class's own methods, and</li>\n  <li> The number of unsynchronized field accesses (reads and writes) was no more than\n       one third of all accesses, with writes being weighed twice as high as reads</li>\n  </ol>\n\n  <p> A typical bug matching this bug pattern is forgetting to synchronize\n  one of the methods in a class that is intended to be thread-safe.</p>\n\n  <p> Note that there are various sources of inaccuracy in this detector;\n  for example, the detector cannot statically detect all situations in which\n  a lock is held.&nbsp; Also, even when the detector is accurate in\n  distinguishing locked vs. unlocked accesses, the code in question may still\n  be correct.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"SYNCHRONIZATION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"SYNCHRONIZATION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Synchronization","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:SF_DEAD_STORE_DUE_TO_SWITCH_FALLTHROUGH_TO_THROW","repo":"findbugs","name":"Dead store due to switch statement fall through to throw","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"SF_DEAD_STORE_DUE_TO_SWITCH_FALLTHROUGH_TO_THROW","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\n      A value stored in the previous switch case is ignored here due to a switch fall through to a place where an exception is thrown. \n      It is likely that you forgot to put a break or return at the end of the previous case.\n      </p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:RV_RETURN_VALUE_IGNORED_BAD_PRACTICE","repo":"findbugs","name":"Bad practice - Method ignores exceptional return value","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This method returns a value that is not checked. The return value should be checked\nsince it can indicate an unusual or unexpected function execution. For\nexample, the <code>File.delete()</code> method returns false\nif the file could not be successfully deleted (rather than \nthrowing an Exception).\nIf you don't check the result, you won't notice if the method invocation\nsignals unexpected behavior by returning an atypical return value.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:RV_RETURN_VALUE_IGNORED2","repo":"findbugs","name":"Correctness - Method ignores return value","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"RV_RETURN_VALUE_IGNORED2","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> The return value of this method should be checked. One common\ncause of this warning is to invoke a method on an immutable object,\nthinking that it updates the object. For example, in the following code\nfragment,</p>\n<blockquote>\n<pre>\nString dateString = getHeaderField(name);\ndateString.trim();\n</pre>\n</blockquote>\n<p>the programmer seems to be thinking that the trim() method will update\nthe String referenced by dateString. But since Strings are immutable, the trim()\nfunction returns a new String value, which is being ignored here. The code\nshould be corrected to: </p>\n<blockquote>\n<pre>\nString dateString = getHeaderField(name);\ndateString = dateString.trim();\n</pre>\n</blockquote>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:INT_VACUOUS_BIT_OPERATION","repo":"findbugs","name":"Dodgy - Vacuous bit mask operation on integer value","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"INT_VACUOUS_BIT_OPERATION","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This is an integer bit operation (and, or, or exclusive or) that doesn't do any useful work\n(e.g., <code>v & 0xffffffff</code>).\n\n</p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:BIT_ADD_OF_SIGNED_BYTE","repo":"findbugs","name":"Correctness - Bitwise add of signed byte value","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"BIT_ADD_OF_SIGNED_BYTE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> Adds a byte value and a value which is known to the 8 lower bits clear.\nValues loaded from a byte array are sign extended to 32 bits\nbefore any any bitwise operations are performed on the value.\nThus, if <code>b[0]</code> contains the value <code>0xff</code>, and\n<code>x</code> is initially 0, then the code \n<code>((x &lt;&lt; 8) + b[0])</code>  will sign extend <code>0xff</code>\nto get <code>0xffffffff</code>, and thus give the value\n<code>0xffffffff</code> as the result.\n</p>\n\n<p>In particular, the following code for packing a byte array into an int is badly wrong: </p>\n<pre>\nint result = 0;\nfor(int i = 0; i &lt; 4; i++) \n  result = ((result &lt;&lt; 8) + b[i]);\n</pre>\n\n<p>The following idiom will work instead: </p>\n<pre>\nint result = 0;\nfor(int i = 0; i &lt; 4; i++) \n  result = ((result &lt;&lt; 8) + (b[i] &amp; 0xff));\n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:PS_PUBLIC_SEMAPHORES","repo":"findbugs","name":"Dodgy - Class exposes synchronization and semaphores in its public interface","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"PS_PUBLIC_SEMAPHORES","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\n    This class uses synchronization along with wait(), notify() or notifyAll() on itself (the this\n    reference). Client classes that use this class, may, in addition, use an instance of this class\n    as a synchronizing object. Because two classes are using the same object for synchronization,\n    Multithread correctness is suspect. You should not synchronize nor call semaphore methods on\n    a public reference. Consider using a internal private member variable to control synchronization.\n    </p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"SYNCHRONIZATION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"SYNCHRONIZATION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Synchronization","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:NP_ARGUMENT_MIGHT_BE_NULL","repo":"findbugs","name":"Correctness - Method does not check for null argument","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"NP_ARGUMENT_MIGHT_BE_NULL","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\n\tA parameter to this method has been identified as a value that should\n\talways be checked to see whether or not it is null, but it is being dereferenced\n\twithout a preceding null check.\n      </p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"DATA_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"DATA_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Data","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:NP_EQUALS_SHOULD_HANDLE_NULL_ARGUMENT","repo":"findbugs","name":"Bad practice - equals() method does not check for null argument","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"NP_EQUALS_SHOULD_HANDLE_NULL_ARGUMENT","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\n      This implementation of equals(Object) violates the contract defined\n      by java.lang.Object.equals() because it does not check for null\n      being passed as the argument.  All equals() methods should return\n      false if passed a null value.\n      </p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:NP_DEREFERENCE_OF_READLINE_VALUE","repo":"findbugs","name":"Dodgy - Dereference of the result of readLine() without nullcheck","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"NP_DEREFERENCE_OF_READLINE_VALUE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> The result of invoking readLine() is dereferenced without checking to see if the result is null. If there are no more lines of text\nto read, readLine() will return null and dereferencing that will generate a null pointer exception.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:NP_IMMEDIATE_DEREFERENCE_OF_READLINE","repo":"findbugs","name":"Dodgy - Immediate dereference of the result of readLine()","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"NP_IMMEDIATE_DEREFERENCE_OF_READLINE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> The result of invoking readLine() is immediately dereferenced. If there are no more lines of text\nto read, readLine() will return null and dereferencing that will generate a null pointer exception.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:RV_ABSOLUTE_VALUE_OF_RANDOM_INT","repo":"findbugs","name":"Correctness - Bad attempt to compute absolute value of signed 32-bit random integer","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"RV_ABSOLUTE_VALUE_OF_RANDOM_INT","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This code generates a random signed integer and then computes\nthe absolute value of that random integer.  If the number returned by the random number\ngenerator is <code>Integer.MIN_VALUE</code>, then the result will be negative as well (since \n<code>Math.abs(Integer.MIN_VALUE) == Integer.MIN_VALUE</code>).\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:RV_ABSOLUTE_VALUE_OF_HASHCODE","repo":"findbugs","name":"Correctness - Bad attempt to compute absolute value of signed 32-bit hashcode","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"RV_ABSOLUTE_VALUE_OF_HASHCODE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This code generates a hashcode and then computes\nthe absolute value of that hashcode.  If the hashcode \nis <code>Integer.MIN_VALUE</code>, then the result will be negative as well (since \n<code>Math.abs(Integer.MIN_VALUE) == Integer.MIN_VALUE</code>).\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:RV_REM_OF_RANDOM_INT","repo":"findbugs","name":"Dodgy - Remainder of 32-bit signed random integer","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"RV_REM_OF_RANDOM_INT","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This code generates a random signed integer and then computes\nthe remainder of that value modulo another value. Since the random\nnumber can be negative, the result of the remainder operation\ncan also be negative. Be sure this is intended, and strongly\nconsider using the Random.nextInt(int) method instead.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:RV_REM_OF_HASHCODE","repo":"findbugs","name":"Dodgy - Remainder of hashCode could be negative","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"RV_REM_OF_HASHCODE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This code computes a hashCode, and then computes\nthe remainder of that value modulo another value. Since the hashCode\ncan be negative, the result of the remainder operation\ncan also be negative. </p>\n<p> Assuming you want to ensure that the result of your computation is nonnegative,\nyou may need to change your code.\nIf you know the divisor is a power of 2,\nyou can use a bitwise and operator instead (i.e., instead of\nusing <code>x.hashCode()%n</code>, use <code>x.hashCode()&amp;(n-1)</code>. \nThis is probably faster than computing the remainder as well.\nIf you don't know that the divisor is a power of 2, take the absolute\nvalue of the result of the remainder operation (i.e., use\n<code>Math.abs(x.hashCode()%n)</code>\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:RV_01_TO_INT","repo":"findbugs","name":"Correctness - Random value from 0 to 1 is coerced to the integer 0","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"RV_01_TO_INT","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>A random value from 0 to 1 is being coerced to the integer value 0. You probably\nwant to multiple the random value by something else before coercing it to an integer, or use the <code>Random.nextInt(n)</code> method.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:DM_NEXTINT_VIA_NEXTDOUBLE","repo":"findbugs","name":"Performance - Use the nextInt method of Random rather than nextDouble to generate a random integer","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"DM_NEXTINT_VIA_NEXTDOUBLE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>If <code>r</code> is a <code>java.util.Random</code>, you can generate a random number from <code>0</code> to <code>n-1</code>\nusing <code>r.nextInt(n)</code>, rather than using <code>(int)(r.nextDouble() * n)</code>.\n</p>","defaultDebtChar":"EFFICIENCY","defaultDebtSubChar":"CPU_EFFICIENCY","debtChar":"EFFICIENCY","debtSubChar":"CPU_EFFICIENCY","debtCharName":"Efficiency","debtSubCharName":"Processor use","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:DM_USELESS_THREAD","repo":"findbugs","name":"Multithreaded correctness - A thread was created using the default empty run method","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"DM_USELESS_THREAD","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>This method creates a thread without specifying a run method either by deriving from the Thread class, or\n  by passing a Runnable object. This thread, then, does nothing but waste time.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE","repo":"findbugs","name":"Security - Nonconstant string passed to execute method on an SQL statement","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE","isTemplate":false,"tags":[],"sysTags":["cwe","owasp-top10"],"lang":"java","langName":"Java","htmlDesc":"<p>The method invokes the execute method on an SQL statement with a String that seems\nto be dynamically generated. Consider using\na prepared statement instead. It is more efficient and less vulnerable to\nSQL injection attacks.\n</p>","defaultDebtChar":"SECURITY","defaultDebtSubChar":"INPUT_VALIDATION_AND_REPRESENTATION","debtChar":"SECURITY","debtSubChar":"INPUT_VALIDATION_AND_REPRESENTATION","debtCharName":"Security","debtSubCharName":"Input validation and representation","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING","repo":"findbugs","name":"Security - A prepared statement is generated from a nonconstant String","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING","isTemplate":false,"tags":[],"sysTags":["cwe","owasp-top10"],"lang":"java","langName":"Java","htmlDesc":"<p>The code creates an SQL prepared statement from a nonconstant String.\nIf unchecked, tainted data from a user is used in building this String, SQL injection could\nbe used to make the prepared statement do something unexpected and undesirable.\n</p>","defaultDebtChar":"SECURITY","defaultDebtSubChar":"INPUT_VALIDATION_AND_REPRESENTATION","debtChar":"SECURITY","debtSubChar":"INPUT_VALIDATION_AND_REPRESENTATION","debtCharName":"Security","debtSubCharName":"Input validation and representation","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:DC_DOUBLECHECK","repo":"findbugs","name":"Multithreaded correctness - Possible double check of field","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"DC_DOUBLECHECK","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This method may contain an instance of double-checked locking.&nbsp;\n  This idiom is not correct according to the semantics of the Java memory\n  model.&nbsp; For more information, see the web page\n  <a href=\"http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html\"\n  >http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html</a>.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"SYNCHRONIZATION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"SYNCHRONIZATION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Synchronization","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:FI_PUBLIC_SHOULD_BE_PROTECTED","repo":"findbugs","name":"Malicious code vulnerability - Finalizer should be protected, not public","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"FI_PUBLIC_SHOULD_BE_PROTECTED","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> A class's <code>finalize()</code> method should have protected access,\n   not public.</p>","defaultDebtChar":"SECURITY","defaultDebtSubChar":"API_ABUSE","debtChar":"SECURITY","debtSubChar":"API_ABUSE","debtCharName":"Security","debtSubCharName":"API abuse","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:FI_EMPTY","repo":"findbugs","name":"Bad practice - Empty finalizer should be deleted","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"FI_EMPTY","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> Empty <code>finalize()</code> methods are useless, so they should\n  be deleted.</p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:FI_NULLIFY_SUPER","repo":"findbugs","name":"Bad practice - Finalizer nullifies superclass finalizer","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"FI_NULLIFY_SUPER","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This empty <code>finalize()</code> method explicitly negates the\n  effect of any finalizer defined by its superclass.&nbsp; Any finalizer\n  actions defined for the superclass will not be performed.&nbsp;\n  Unless this is intended, delete this method.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:FI_USELESS","repo":"findbugs","name":"Bad practice - Finalizer does nothing but call superclass finalizer","createdAt":"2013-06-19T07:34:52+0000","severity":"MINOR","status":"READY","internalKey":"FI_USELESS","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> The only thing this <code>finalize()</code> method does is call\n  the superclass's <code>finalize()</code> method, making it\n  redundant.&nbsp; Delete it.</p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MINOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MINOR","params":[]}]},{"rule":{"key":"findbugs:FI_MISSING_SUPER_CALL","repo":"findbugs","name":"Bad practice - Finalizer does not call superclass finalizer","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"FI_MISSING_SUPER_CALL","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This <code>finalize()</code> method does not make a call to its\n  superclass's <code>finalize()</code> method.&nbsp; So, any finalizer\n  actions defined for the superclass will not be performed.&nbsp;\n  Add a call to <code>super.finalize()</code>.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:EQ_COMPARING_CLASS_NAMES","repo":"findbugs","name":"Correctness - equals method compares class names rather than class objects","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"EQ_COMPARING_CLASS_NAMES","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This method checks to see if two objects are the same class by checking to see if the names\nof their classes are equal. You can have different classes with the same name if they are loaded by\ndifferent class loaders. Just check to see if the class objects are the same.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:EQ_UNUSUAL","repo":"findbugs","name":"Dodgy - Unusual equals method","createdAt":"2013-06-19T07:34:52+0000","severity":"MINOR","status":"READY","internalKey":"EQ_UNUSUAL","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This class doesn't do any of the patterns we recognize for checking that the type of the argument \nis compatible with the type of the <code>this</code> object. There might not be anything wrong with\nthis code, but it is worth reviewing.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MINOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MINOR","params":[]}]},{"rule":{"key":"findbugs:EQ_GETCLASS_AND_CLASS_CONSTANT","repo":"findbugs","name":"Bad practice - equals method fails for subtypes","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"EQ_GETCLASS_AND_CLASS_CONSTANT","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This class has an equals method that will be broken if it is inherited by subclasses.\nIt compares a class literal with the class of the argument (e.g., in class <code>Foo</code>\nit might check if <code>Foo.class == o.getClass()</code>).\nIt is better to check if <code>this.getClass() == o.getClass()</code>.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"ARCHITECTURE_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"ARCHITECTURE_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Architecture","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:EQ_ALWAYS_TRUE","repo":"findbugs","name":"Correctness - equals method always returns true","createdAt":"2013-06-19T07:34:52+0000","severity":"BLOCKER","status":"READY","internalKey":"EQ_ALWAYS_TRUE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This class defines an equals method that always returns true. This is imaginative, but not very smart.\nPlus, it means that the equals method is not symmetric.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"BLOCKER","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"BLOCKER","params":[]}]},{"rule":{"key":"findbugs:EQ_ALWAYS_FALSE","repo":"findbugs","name":"Correctness - equals method always returns false","createdAt":"2013-06-19T07:34:52+0000","severity":"BLOCKER","status":"READY","internalKey":"EQ_ALWAYS_FALSE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This class defines an equals method that always returns false. This means that an object is not equal to itself, and it is impossible to create useful Maps or Sets of this class. More fundamentally, it means\nthat equals is not reflexive, one of the requirements of the equals method.</p>\n<p>The likely intended semantics are object identity: that an object is equal to itself. This is the behavior inherited from class <code>Object</code>. If you need to override an equals inherited from a different \nsuperclass, you can use use:\n<pre>\npublic boolean equals(Object o) { return this == o; }\n</pre>\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"BLOCKER","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"BLOCKER","params":[]}]},{"rule":{"key":"findbugs:EQ_OVERRIDING_EQUALS_NOT_SYMMETRIC","repo":"findbugs","name":"Correctness - equals method overrides equals in superclass and may not be symmetric","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"EQ_OVERRIDING_EQUALS_NOT_SYMMETRIC","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This class defines an equals method that overrides an equals method in a superclass. Both equals methods\nmethods use <code>instanceof</code> in the determination of whether two objects are equal. This is fraught with peril,\nsince it is important that the equals method is symmetrical (in other words, <code>a.equals(b) == b.equals(a)</code>).\nIf B is a subtype of A, and A's equals method checks that the argument is an instanceof A, and B's equals method\nchecks that the argument is an instanceof B, it is quite likely that the equivalence relation defined by these\nmethods is not symmetric.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:EQ_OTHER_USE_OBJECT","repo":"findbugs","name":"Correctness - equals() method defined that doesn't override Object.equals(Object)","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"EQ_OTHER_USE_OBJECT","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This class defines an <code>equals()</code>\n  method, that doesn't override the normal <code>equals(Object)</code> method\n  defined in the base <code>java.lang.Object</code> class.&nbsp;\n  The class should probably define a <code>boolean equals(Object)</code> method.\n  </p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"ARCHITECTURE_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"ARCHITECTURE_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Architecture","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:CO_SELF_NO_OBJECT","repo":"findbugs","name":"Bad practice - Covariant compareTo() method defined","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"CO_SELF_NO_OBJECT","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This class defines a covariant version of <code>compareTo()</code>.&nbsp;\n  To correctly override the <code>compareTo()</code> method in the\n  <code>Comparable</code> interface, the parameter of <code>compareTo()</code>\n  must have type <code>java.lang.Object</code>.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:ES_COMPARING_STRINGS_WITH_EQ","repo":"findbugs","name":"Bad practice - Comparison of String objects using == or !=","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"ES_COMPARING_STRINGS_WITH_EQ","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>This code compares <code>java.lang.String</code> objects for reference\nequality using the == or != operators.\nUnless both strings are either constants in a source file, or have been\ninterned using the <code>String.intern()</code> method, the same string\nvalue may be represented by two different String objects. Consider\nusing the <code>equals(Object)</code> method instead.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:ES_COMPARING_PARAMETER_STRING_WITH_EQ","repo":"findbugs","name":"Bad practice - Comparison of String parameter using == or !=","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"ES_COMPARING_PARAMETER_STRING_WITH_EQ","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>This code compares a <code>java.lang.String</code> parameter for reference\nequality using the == or != operators. Requiring callers to \npass only String constants or interned strings to a method is unnecessarily\nfragile, and rarely leads to measurable performance gains. Consider\nusing the <code>equals(Object)</code> method instead.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:HE_USE_OF_UNHASHABLE_CLASS","repo":"findbugs","name":"Correctness - Use of class without a hashCode() method in a hashed data structure","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"HE_USE_OF_UNHASHABLE_CLASS","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> A class defines an equals(Object)  method but not a hashCode() method,\nand thus doesn't fulfill the requirement that equal objects have equal hashCodes.\nAn instance of this class is used in a hash data structure, making the need to\nfix this problem of highest importance.","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"ARCHITECTURE_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"ARCHITECTURE_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Architecture","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:HE_INHERITS_EQUALS_USE_HASHCODE","repo":"findbugs","name":"Bad practice - Class inherits equals() and uses Object.hashCode()","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"HE_INHERITS_EQUALS_USE_HASHCODE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This class inherits <code>equals(Object)</code> from an abstract\n  superclass, and <code>hashCode()</code> from\n<code>java.lang.Object</code> (which returns\n  the identity hash code, an arbitrary value assigned to the object\n  by the VM).&nbsp; Therefore, the class is very likely to violate the\n  invariant that equal objects must have equal hashcodes.</p>\n\n  <p>If you don't want to define a hashCode method, and/or don't\n   believe the object will ever be put into a HashMap/Hashtable,\n   define the <code>hashCode()</code> method\n   to throw <code>UnsupportedOperationException</code>.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:CO_ABSTRACT_SELF","repo":"findbugs","name":"Bad practice - Abstract class defines covariant compareTo() method","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"CO_ABSTRACT_SELF","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This class defines a covariant version of <code>compareTo()</code>.&nbsp;\n  To correctly override the <code>compareTo()</code> method in the\n  <code>Comparable</code> interface, the parameter of <code>compareTo()</code>\n  must have type <code>java.lang.Object</code>.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:DL_SYNCHRONIZATION_ON_SHARED_CONSTANT","repo":"findbugs","name":"Multithreaded correctness - Synchronization on interned String could lead to deadlock","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"DL_SYNCHRONIZATION_ON_SHARED_CONSTANT","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> The code synchronizes on interned String.\n<pre>\nprivate static String LOCK = \"LOCK\";\n...\n  synchronized(LOCK) { ...}\n...\n</pre>\n</p>\n<p>Constant Strings are interned and shared across all other classes loaded by the JVM. Thus, this could\nis locking on something that other code might also be locking. This could result in very strange and hard to diagnose\nblocking and deadlock behavior. See <a href=\"http://www.javalobby.org/java/forums/t96352.html\">http://www.javalobby.org/java/forums/t96352.html</a> and <a href=\"http://jira.codehaus.org/browse/JETTY-352\">http://jira.codehaus.org/browse/JETTY-352</a>.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"SYNCHRONIZATION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"SYNCHRONIZATION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Synchronization","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:DL_SYNCHRONIZATION_ON_BOOLEAN","repo":"findbugs","name":"Multithreaded correctness - Synchronization on Boolean could lead to deadlock","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"DL_SYNCHRONIZATION_ON_BOOLEAN","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> The code synchronizes on a boxed primitive constant, such as an Boolean.\n<pre>\nprivate static Boolean inited = Boolean.FALSE;\n...\n  synchronized(inited) { \n    if (!inited) {\n       init();\n       inited = Boolean.TRUE;\n       }\n     }\n...\n</pre>\n</p>\n<p>Since there normally exist only two Boolean objects, this code could be synchronizing on the same object as other, unrelated code, leading to unresponsiveness\nand possible deadlock</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"SYNCHRONIZATION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"SYNCHRONIZATION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Synchronization","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:DL_SYNCHRONIZATION_ON_BOXED_PRIMITIVE","repo":"findbugs","name":"Multithreaded correctness - Synchronization on boxed primitive could lead to deadlock","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"DL_SYNCHRONIZATION_ON_BOXED_PRIMITIVE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> The code synchronizes on a boxed primitive constant, such as an Integer.\n<pre>\nprivate static Integer count = 0;\n...\n  synchronized(count) { \n     count++;\n     }\n...\n</pre>\n</p>\n<p>Since Integer objects can be cached and shared,\nthis code could be synchronizing on the same object as other, unrelated code, leading to unresponsiveness\nand possible deadlock</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"SYNCHRONIZATION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"SYNCHRONIZATION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Synchronization","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:DL_SYNCHRONIZATION_ON_UNSHARED_BOXED_PRIMITIVE","repo":"findbugs","name":"Multithreaded correctness - Synchronization on boxed primitive values","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"DL_SYNCHRONIZATION_ON_UNSHARED_BOXED_PRIMITIVE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> The code synchronizes on an apparently unshared boxed primitive, \nsuch as an Integer.\n<pre>\nprivate static final Integer fileLock = new Integer(1);\n...\n  synchronized(fileLock) { \n     .. do something ..\n     }\n...\n</pre>\n</p>\n<p>It would be much better, in this code, to redeclare fileLock as\n<pre>\nprivate static final Object fileLock = new Object();\n</pre>\nThe existing code might be OK, but it is confusing and a \nfuture refactoring, such as the \"Remove Boxing\" refactoring in IntelliJ,\nmight replace this with the use of an interned Integer object shared \nthroughout the JVM, leading to very confusing behavior and potential deadlock.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"SYNCHRONIZATION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"SYNCHRONIZATION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Synchronization","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:WL_USING_GETCLASS_RATHER_THAN_CLASS_LITERAL","repo":"findbugs","name":"Multithreaded correctness - Sychronization on getClass rather than class literal","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"WL_USING_GETCLASS_RATHER_THAN_CLASS_LITERAL","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\n     This instance method synchronizes on <code>this.getClass()</code>. If this class is subclassed,\n     subclasses will synchronize on the class object for the subclass, which isn't likely what was intended.\n     For example, consider this code from java.awt.Label:\n     <pre>\n     private static final String base = \"label\";\n     private static int nameCounter = 0;\n     String constructComponentName() {\n        synchronized (getClass()) {\n            return base + nameCounter++;\n        }\n     }\n     </pre></p>\n     <p>Subclasses of <code>Label</code> won't synchronize on the same subclass, giving rise to a datarace.\n     Instead, this code should be synchronizing on <code>Label.class</code>\n      <pre>\n     private static final String base = \"label\";\n     private static int nameCounter = 0;\n     String constructComponentName() {\n        synchronized (Label.class) {\n            return base + nameCounter++;\n        }\n     }\n     </pre></p>\n      <p>Bug pattern contributed by Jason Mehrens</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"SYNCHRONIZATION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"SYNCHRONIZATION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Synchronization","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:ESync_EMPTY_SYNC","repo":"findbugs","name":"Multithreaded correctness - Empty synchronized block","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"ESync_EMPTY_SYNC","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> The code contains an empty synchronized block:</p>\n<pre>\nsynchronized() {}\n</pre>\n<p>Empty synchronized blocks are far more subtle and hard to use correctly\nthan most people recognize, and empty synchronized blocks\nare almost never a better solution\nthan less contrived solutions.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"SYNCHRONIZATION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"SYNCHRONIZATION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Synchronization","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:MSF_MUTABLE_SERVLET_FIELD","repo":"findbugs","name":"Multithreaded correctness - Mutable servlet field","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"MSF_MUTABLE_SERVLET_FIELD","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>A web server generally only creates one instance of servlet or jsp class (i.e., treats\nthe class as a Singleton), \nand will \nhave multiple threads invoke methods on that instance to service multiple \nsimultaneous requests.\nThus, having a mutable instance field generally creates race conditions.","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"SYNCHRONIZATION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"SYNCHRONIZATION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Synchronization","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:IS2_INCONSISTENT_SYNC","repo":"findbugs","name":"Multithreaded correctness - Inconsistent synchronization","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"IS2_INCONSISTENT_SYNC","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> The fields of this class appear to be accessed inconsistently with respect\n  to synchronization.&nbsp; This bug report indicates that the bug pattern detector\n  judged that\n  </p>\n  <ol>\n  <li> The class contains a mix of locked and unlocked accesses,</li>\n  <li> At least one locked access was performed by one of the class's own methods, and</li>\n  <li> The number of unsynchronized field accesses (reads and writes) was no more than\n       one third of all accesses, with writes being weighed twice as high as reads</li>\n  </ol>\n\n  <p> A typical bug matching this bug pattern is forgetting to synchronize\n  one of the methods in a class that is intended to be thread-safe.</p>\n\n  <p> You can select the nodes labeled \"Unsynchronized access\" to show the\n  code locations where the detector believed that a field was accessed\n  without synchronization.</p>\n\n  <p> Note that there are various sources of inaccuracy in this detector;\n  for example, the detector cannot statically detect all situations in which\n  a lock is held.&nbsp; Also, even when the detector is accurate in\n  distinguishing locked vs. unlocked accesses, the code in question may still\n  be correct.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"SYNCHRONIZATION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"SYNCHRONIZATION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Synchronization","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:NN_NAKED_NOTIFY","repo":"findbugs","name":"Multithreaded correctness - Naked notify","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"NN_NAKED_NOTIFY","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> A call to <code>notify()</code> or <code>notifyAll()</code>\n  was made without any (apparent) accompanying\n  modification to mutable object state.&nbsp; In general, calling a notify\n  method on a monitor is done because some condition another thread is\n  waiting for has become true.&nbsp; However, for the condition to be meaningful,\n  it must involve a heap object that is visible to both threads.</p>\n\n  <p> This bug does not necessarily indicate an error, since the change to\n  mutable object state may have taken place in a method which then called\n  the method containing the notification.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"SYNCHRONIZATION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"SYNCHRONIZATION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Synchronization","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:MS_EXPOSE_REP","repo":"findbugs","name":"Malicious code vulnerability - Public static method may expose internal representation by returning array","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"MS_EXPOSE_REP","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> A public static method returns a reference to\n   an array that is part of the static state of the class.\n   Any code that calls this method can freely modify\n   the underlying array.\n   One fix is to return a copy of the array.</p>","defaultDebtChar":"SECURITY","defaultDebtSubChar":"INPUT_VALIDATION_AND_REPRESENTATION","debtChar":"SECURITY","debtSubChar":"INPUT_VALIDATION_AND_REPRESENTATION","debtCharName":"Security","debtSubCharName":"Input validation and representation","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:EI_EXPOSE_REP","repo":"findbugs","name":"Malicious code vulnerability - May expose internal representation by returning reference to mutable object","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"EI_EXPOSE_REP","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> Returning a reference to a mutable object value stored in one of the object's fields\n  exposes the internal representation of the object.&nbsp;\n   If instances\n   are accessed by untrusted code, and unchecked changes to\n   the mutable object would compromise security or other\n   important properties, you will need to do something different.\n  Returning a new copy of the object is better approach in many situations.</p>","defaultDebtChar":"SECURITY","defaultDebtSubChar":"INPUT_VALIDATION_AND_REPRESENTATION","debtChar":"SECURITY","debtSubChar":"INPUT_VALIDATION_AND_REPRESENTATION","debtCharName":"Security","debtSubCharName":"Input validation and representation","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:EI_EXPOSE_REP2","repo":"findbugs","name":"Malicious code vulnerability - May expose internal representation by incorporating reference to mutable object","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"EI_EXPOSE_REP2","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This code stores a reference to an externally mutable object into the\n  internal representation of the object.&nbsp;\n   If instances\n   are accessed by untrusted code, and unchecked changes to\n   the mutable object would compromise security or other\n   important properties, you will need to do something different.\n  Storing a copy of the object is better approach in many situations.</p>","defaultDebtChar":"SECURITY","defaultDebtSubChar":"INPUT_VALIDATION_AND_REPRESENTATION","debtChar":"SECURITY","debtSubChar":"INPUT_VALIDATION_AND_REPRESENTATION","debtCharName":"Security","debtSubCharName":"Input validation and representation","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:EI_EXPOSE_STATIC_REP2","repo":"findbugs","name":"Malicious code vulnerability - May expose internal static state by storing a mutable object into a static field","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"EI_EXPOSE_STATIC_REP2","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This code stores a reference to an externally mutable object into a static\n   field.\n   If unchecked changes to\n   the mutable object would compromise security or other\n   important properties, you will need to do something different.\n  Storing a copy of the object is better approach in many situations.</p>","defaultDebtChar":"SECURITY","defaultDebtSubChar":"INPUT_VALIDATION_AND_REPRESENTATION","debtChar":"SECURITY","debtSubChar":"INPUT_VALIDATION_AND_REPRESENTATION","debtCharName":"Security","debtSubCharName":"Input validation and representation","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:SP_SPIN_ON_FIELD","repo":"findbugs","name":"Multithreaded correctness - Method spins on field","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"SP_SPIN_ON_FIELD","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This method spins in a loop which reads a field.&nbsp; The compiler\n  may legally hoist the read out of the loop, turning the code into an\n  infinite loop.&nbsp; The class should be changed so it uses proper\n  synchronization (including wait and notify calls).</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"SYNCHRONIZATION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"SYNCHRONIZATION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Synchronization","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:NS_NON_SHORT_CIRCUIT","repo":"findbugs","name":"Dodgy - Questionable use of non-short-circuit logic","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"NS_NON_SHORT_CIRCUIT","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This code seems to be using non-short-circuit logic (e.g., &amp;\nor |)\nrather than short-circuit logic (&amp;&amp; or ||).\nNon-short-circuit logic causes both sides of the expression\nto be evaluated even when the result can be inferred from\nknowing the left-hand side. This can be less efficient and\ncan result in errors if the left-hand side guards cases\nwhen evaluating the right-hand side can generate an error.\n\n<p>See <a href=\"http://java.sun.com/docs/books/jls/third_edition/html/expressions.html#15.22.2\">the Java\nLanguage Specification</a> for details\n\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:NS_DANGEROUS_NON_SHORT_CIRCUIT","repo":"findbugs","name":"Dodgy - Potentially dangerous use of non-short-circuit logic","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"NS_DANGEROUS_NON_SHORT_CIRCUIT","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This code seems to be using non-short-circuit logic (e.g., &amp;\nor |)\nrather than short-circuit logic (&amp;&amp; or ||). In addition, \nit seem possible that, depending on the value of the left hand side, you might not\nwant to evaluate the right hand side (because it would have side effects, could cause an exception\nor could be expensive.</p>\n<p>\nNon-short-circuit logic causes both sides of the expression\nto be evaluated even when the result can be inferred from\nknowing the left-hand side. This can be less efficient and\ncan result in errors if the left-hand side guards cases\nwhen evaluating the right-hand side can generate an error.\n</p>\n\n<p>See <a href=\"http://java.sun.com/docs/books/jls/third_edition/html/expressions.html#15.22.2\">the Java\nLanguage Specification</a> for details\n\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:TLW_TWO_LOCK_WAIT","repo":"findbugs","name":"Multithreaded correctness - Wait with two locks held","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"TLW_TWO_LOCK_WAIT","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> Waiting on a monitor while two locks are held may cause\n  deadlock.\n   &nbsp;\n   Performing a wait only releases the lock on the object\n   being waited on, not any other locks.\n   &nbsp;\nThis not necessarily a bug, but is worth examining\n  closely.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"SYNCHRONIZATION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"SYNCHRONIZATION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Synchronization","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:UW_UNCOND_WAIT","repo":"findbugs","name":"Multithreaded correctness - Unconditional wait","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"UW_UNCOND_WAIT","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This method contains a call to <code>java.lang.Object.wait()</code> which\n  is not guarded by conditional control flow.&nbsp; The code should\n\tverify that condition it intends to wait for is not already satisfied\n\tbefore calling wait; any previous notifications will be ignored.\n  </p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"SYNCHRONIZATION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"SYNCHRONIZATION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Synchronization","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:UR_UNINIT_READ","repo":"findbugs","name":"Correctness - Uninitialized read of field in constructor","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"UR_UNINIT_READ","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This constructor reads a field which has not yet been assigned a value.&nbsp;\n  This is often caused when the programmer mistakenly uses the field instead\n  of one of the constructor's parameters.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"DATA_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"DATA_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Data","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:XSS_REQUEST_PARAMETER_TO_SEND_ERROR","repo":"findbugs","name":"Security - Servlet reflected cross site scripting vulnerability","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"XSS_REQUEST_PARAMETER_TO_SEND_ERROR","isTemplate":false,"tags":[],"sysTags":["cwe","owasp-top10"],"lang":"java","langName":"Java","htmlDesc":"<p>This code directly writes an HTTP parameter to a Server error page (using HttpServletResponse.sendError). Echoing this untrusted input allows\nfor a reflected cross site scripting\nvulnerability. See <a href=\"http://en.wikipedia.org/wiki/Cross-site_scripting\">http://en.wikipedia.org/wiki/Cross-site_scripting</a>\nfor more information.</p>\n<p>FindBugs looks only for the most blatant, obvious cases of cross site scripting.\nIf FindBugs found <em>any</em>, you <em>almost certainly</em> have more cross site scripting\nvulnerabilities that FindBugs doesn't report. If you are concerned about cross site scripting, you should seriously \nconsider using a commercial static analysis or pen-testing tool.\n</p>","defaultDebtChar":"SECURITY","defaultDebtSubChar":"INPUT_VALIDATION_AND_REPRESENTATION","debtChar":"SECURITY","debtSubChar":"INPUT_VALIDATION_AND_REPRESENTATION","debtCharName":"Security","debtSubCharName":"Input validation and representation","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"3h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"3h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:XSS_REQUEST_PARAMETER_TO_SERVLET_WRITER","repo":"findbugs","name":"Security - Servlet reflected cross site scripting vulnerability","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"XSS_REQUEST_PARAMETER_TO_SERVLET_WRITER","isTemplate":false,"tags":[],"sysTags":["cwe","owasp-top10"],"lang":"java","langName":"Java","htmlDesc":"<p>This code directly writes an HTTP parameter to Servlet output, which allows for a reflected cross site scripting\nvulnerability. See <a href=\"http://en.wikipedia.org/wiki/Cross-site_scripting\">http://en.wikipedia.org/wiki/Cross-site_scripting</a>\nfor more information.</p>\n<p>FindBugs looks only for the most blatant, obvious cases of cross site scripting.\nIf FindBugs found <em>any</em>, you <em>almost certainly</em> have more cross site scripting\nvulnerabilities that FindBugs doesn't report. If you are concerned about cross site scripting, you should seriously \nconsider using a commercial static analysis or pen-testing tool.\n</p>","defaultDebtChar":"SECURITY","defaultDebtSubChar":"INPUT_VALIDATION_AND_REPRESENTATION","debtChar":"SECURITY","debtSubChar":"INPUT_VALIDATION_AND_REPRESENTATION","debtCharName":"Security","debtSubCharName":"Input validation and representation","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"3h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"3h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:XSS_REQUEST_PARAMETER_TO_JSP_WRITER","repo":"findbugs","name":"Security - JSP reflected cross site scripting vulnerability","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"XSS_REQUEST_PARAMETER_TO_JSP_WRITER","isTemplate":false,"tags":[],"sysTags":["cwe","owasp-top10"],"lang":"java","langName":"Java","htmlDesc":"<p>This code directly writes an HTTP parameter to JSP output, which allows for a cross site scripting\nvulnerability. See <a href=\"http://en.wikipedia.org/wiki/Cross-site_scripting\">http://en.wikipedia.org/wiki/Cross-site_scripting</a>\nfor more information.</p>\n<p>FindBugs looks only for the most blatant, obvious cases of cross site scripting.\nIf FindBugs found <em>any</em>, you <em>almost certainly</em> have more cross site scripting\nvulnerabilities that FindBugs doesn't report. If you are concerned about cross site scripting, you should seriously \nconsider using a commercial static analysis or pen-testing tool.\n</p>","defaultDebtChar":"SECURITY","defaultDebtSubChar":"INPUT_VALIDATION_AND_REPRESENTATION","debtChar":"SECURITY","debtSubChar":"INPUT_VALIDATION_AND_REPRESENTATION","debtCharName":"Security","debtSubCharName":"Input validation and representation","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"3h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"3h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:HRS_REQUEST_PARAMETER_TO_HTTP_HEADER","repo":"findbugs","name":"Security - HTTP Response splitting vulnerability","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"HRS_REQUEST_PARAMETER_TO_HTTP_HEADER","isTemplate":false,"tags":[],"sysTags":["cwe","owasp-top10"],"lang":"java","langName":"Java","htmlDesc":"<p>This code directly writes an HTTP parameter to an HTTP header, which allows for a HTTP response splitting\nvulnerability. See <a href=\"http://en.wikipedia.org/wiki/HTTP_response_splitting\">http://en.wikipedia.org/wiki/HTTP_response_splitting</a>\nfor more information.</p>\n<p>FindBugs looks only for the most blatant, obvious cases of HTTP response splitting.\nIf FindBugs found <em>any</em>, you <em>almost certainly</em> have more \nvulnerabilities that FindBugs doesn't report. If you are concerned about HTTP response splitting, you should seriously \nconsider using a commercial static analysis or pen-testing tool.\n</p>","defaultDebtChar":"SECURITY","defaultDebtSubChar":"INPUT_VALIDATION_AND_REPRESENTATION","debtChar":"SECURITY","debtSubChar":"INPUT_VALIDATION_AND_REPRESENTATION","debtCharName":"Security","debtSubCharName":"Input validation and representation","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:HRS_REQUEST_PARAMETER_TO_COOKIE","repo":"findbugs","name":"Security - HTTP cookie formed from untrusted input","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"HRS_REQUEST_PARAMETER_TO_COOKIE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>This code constructs an HTTP Cookie using an untrusted HTTP parameter. If this cookie is added to an HTTP response, it will allow a HTTP response splitting\nvulnerability. See <a href=\"http://en.wikipedia.org/wiki/HTTP_response_splitting\">http://en.wikipedia.org/wiki/HTTP_response_splitting</a>\nfor more information.</p>\n<p>FindBugs looks only for the most blatant, obvious cases of HTTP response splitting.\nIf FindBugs found <em>any</em>, you <em>almost certainly</em> have more \nvulnerabilities that FindBugs doesn't report. If you are concerned about HTTP response splitting, you should seriously \nconsider using a commercial static analysis or pen-testing tool.\n</p>","defaultDebtChar":"SECURITY","defaultDebtSubChar":"INPUT_VALIDATION_AND_REPRESENTATION","debtChar":"SECURITY","debtSubChar":"INPUT_VALIDATION_AND_REPRESENTATION","debtCharName":"Security","debtSubCharName":"Input validation and representation","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:STCAL_STATIC_CALENDAR_INSTANCE","repo":"findbugs","name":"Multithreaded correctness - Static Calendar","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"STCAL_STATIC_CALENDAR_INSTANCE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>Even though the JavaDoc does not contain a hint about it, Calendars are inherently unsafe for multihtreaded use. \nSharing a single instance across thread boundaries without proper synchronization will result in erratic behavior of the\napplication. Under 1.4 problems seem to surface less often than under Java 5 where you will probably see\nrandom ArrayIndexOutOfBoundsExceptions or IndexOutOfBoundsExceptions in sun.util.calendar.BaseCalendar.getCalendarDateFromFixedDate().</p>\n<p>You may also experience serialization problems.</p>\n<p>Using an instance field is recommended.</p>\n<p>For more information on this see <a href=\"http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6231579\">Sun Bug #6231579</a>\nand <a href=\"http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6178997\">Sun Bug #6178997</a>.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"SYNCHRONIZATION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"SYNCHRONIZATION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Synchronization","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:STCAL_STATIC_SIMPLE_DATE_FORMAT_INSTANCE","repo":"findbugs","name":"Multithreaded correctness - Static DateFormat","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"STCAL_STATIC_SIMPLE_DATE_FORMAT_INSTANCE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>As the JavaDoc states, DateFormats are inherently unsafe for multithreaded use. \nSharing a single instance across thread boundaries without proper synchronization will result in erratic behavior of the\napplication.</p>\n<p>You may also experience serialization problems.</p>\n<p>Using an instance field is recommended.</p>\n<p>For more information on this see <a href=\"http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6231579\">Sun Bug #6231579</a>\nand <a href=\"http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6178997\">Sun Bug #6178997</a>.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"SYNCHRONIZATION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"SYNCHRONIZATION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Synchronization","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:STCAL_INVOKE_ON_STATIC_CALENDAR_INSTANCE","repo":"findbugs","name":"Multithreaded correctness - Call to static Calendar","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"STCAL_INVOKE_ON_STATIC_CALENDAR_INSTANCE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>Even though the JavaDoc does not contain a hint about it, Calendars are inherently unsafe for multihtreaded use. \nThe detector has found a call to an instance of Calendar that has been obtained via a static\nfield. This looks suspicous.</p>\n<p>For more information on this see <a href=\"http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6231579\">Sun Bug #6231579</a>\nand <a href=\"http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6178997\">Sun Bug #6178997</a>.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"SYNCHRONIZATION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"SYNCHRONIZATION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Synchronization","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:STCAL_INVOKE_ON_STATIC_DATE_FORMAT_INSTANCE","repo":"findbugs","name":"Multithreaded correctness - Call to static DateFormat","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"STCAL_INVOKE_ON_STATIC_DATE_FORMAT_INSTANCE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>As the JavaDoc states, DateFormats are inherently unsafe for multithreaded use. \nThe detector has found a call to an instance of DateFormat that has been obtained via a static\nfield. This looks suspicous.</p>\n<p>For more information on this see <a href=\"http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6231579\">Sun Bug #6231579</a>\nand <a href=\"http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6178997\">Sun Bug #6178997</a>.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"SYNCHRONIZATION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"SYNCHRONIZATION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Synchronization","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:NP_SYNC_AND_NULL_CHECK_FIELD","repo":"findbugs","name":"Multithreaded correctness - Synchronize and null check on the same field.","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"NP_SYNC_AND_NULL_CHECK_FIELD","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>Since the field is synchronized on, it seems not likely to be null.\nIf it is null and then synchronized on a NullPointerException will be\nthrown and the check would be pointless. Better to synchronize on \nanother field.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"SYNCHRONIZATION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"SYNCHRONIZATION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Synchronization","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:NP_BOOLEAN_RETURN_NULL","repo":"findbugs","name":"Bad practice - Method with Boolean return type returns explicit null","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"NP_BOOLEAN_RETURN_NULL","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\n\tA method that returns either Boolean.TRUE, Boolean.FALSE or null is an accident waiting to happen.\n\tThis method can be invoked as though it returned a value of type boolean, and\n\tthe compiler will insert automatic unboxing of the Boolean value. If a null value is returned,\n\tthis will result in a NullPointerException.\n  \t </p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:SW_SWING_METHODS_INVOKED_IN_SWING_THREAD","repo":"findbugs","name":"Bad practice - Certain swing methods needs to be invoked in Swing thread","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"SW_SWING_METHODS_INVOKED_IN_SWING_THREAD","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>(<a href=\"http://java.sun.com/developer/JDCTechTips/2003/tt1208.html#1\">From JDC Tech Tip</a>): The Swing methods\nshow(), setVisible(), and pack() will create the associated peer for the frame.\nWith the creation of the peer, the system creates the event dispatch thread.\nThis makes things problematic because the event dispatch thread could be notifying\nlisteners while pack and validate are still processing. This situation could result in\ntwo threads going through the Swing component-based GUI -- it's a serious flaw that\ncould result in deadlocks or other related threading issues. A pack call causes\ncomponents to be realized. As they are being realized (that is, not necessarily\nvisible), they could trigger listener notification on the event dispatch thread.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"SYNCHRONIZATION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"SYNCHRONIZATION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Synchronization","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:IL_INFINITE_LOOP","repo":"findbugs","name":"Correctness - An apparent infinite loop","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"IL_INFINITE_LOOP","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>This loop doesn't seem to have a way to terminate (other than by perhaps\nthrowing an exception).</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:IO_APPENDING_TO_OBJECT_OUTPUT_STREAM","repo":"findbugs","name":"Correctness - Doomed attempt to append to an object output stream","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"IO_APPENDING_TO_OBJECT_OUTPUT_STREAM","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\n     This code opens a file in append mode and then wraps the result in an object output stream. \n     This won't allow you to append to an existing object output stream stored in a file. If you want to be\n     able to append to an object output stream, you need to keep the object output stream open.\n      </p>\n      <p>The only situation in which opening a file in append mode and the writing an object output stream\n      could work is if on reading the file you plan to open it in random access mode and seek to the byte offset\n      where the append started.\n      </p> \n      \n      <p>\n      TODO: example.\n      </p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:IL_INFINITE_RECURSIVE_LOOP","repo":"findbugs","name":"Correctness - An apparent infinite recursive loop","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"IL_INFINITE_RECURSIVE_LOOP","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>This method unconditionally invokes itself. This would seem to indicate\nan infinite recursive loop that will result in a stack overflow.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:FI_FINALIZER_ONLY_NULLS_FIELDS","repo":"findbugs","name":"Bad practice - Finalizer only nulls fields","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"FI_FINALIZER_ONLY_NULLS_FIELDS","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This finalizer does nothing except null out fields. This is completely pointless, and requires that\nthe object be garbage collected, finalized, and then garbage collected again. You should just remove the finalize\nmethod.","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:FI_FINALIZER_NULLS_FIELDS","repo":"findbugs","name":"Bad practice - Finalizer nulls fields","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"FI_FINALIZER_NULLS_FIELDS","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This finalizer nulls out fields.  This is usually an error, as it does not aid garbage collection,\n  and the object is going to be garbage collected anyway.","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:IL_CONTAINER_ADDED_TO_ITSELF","repo":"findbugs","name":"Correctness - A collection is added to itself","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"IL_CONTAINER_ADDED_TO_ITSELF","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>A collection is added to itself. As a result, computing the hashCode of this\nset will throw a StackOverflowException.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:VO_VOLATILE_REFERENCE_TO_ARRAY","repo":"findbugs","name":"Multithreaded correctness - A volatile reference to an array doesn't treat the array elements as volatile","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"VO_VOLATILE_REFERENCE_TO_ARRAY","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>This declares a volatile reference to an array, which might not be what\nyou want. With a volatile reference to an array, reads and writes of\nthe reference to the array are treated as volatile, but the array elements\nare non-volatile. To get volatile array elements, you will need to use\none of the atomic array classes in java.util.concurrent (provided\nin Java 5.0).</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"DATA_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"DATA_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Data","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:UI_INHERITANCE_UNSAFE_GETRESOURCE","repo":"findbugs","name":"Bad practice - Usage of GetResource may be unsafe if class is extended","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"UI_INHERITANCE_UNSAFE_GETRESOURCE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>Calling <code>this.getClass().getResource(...)</code> could give\nresults other than expected if this class is extended by a class in\nanother package.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"ARCHITECTURE_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"ARCHITECTURE_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Architecture","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:HSC_HUGE_SHARED_STRING_CONSTANT","repo":"findbugs","name":"Performance - Huge string constants is duplicated across multiple class files","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"HSC_HUGE_SHARED_STRING_CONSTANT","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\n\tA large String constant is duplicated across multiple class files. \n\tThis is likely because a final field is initialized to a String constant, and the Java language\n\tmandates that all references to a final field from other classes be inlined into\nthat classfile. See <a href=\"http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6447475\">JDK bug 6447475</a>\n\tfor a description of an occurrence of this bug in the JDK and how resolving it reduced\n\tthe size of the JDK by 1 megabyte.\n</p>","defaultDebtChar":"EFFICIENCY","defaultDebtSubChar":"MEMORY_EFFICIENCY","debtChar":"EFFICIENCY","debtSubChar":"MEMORY_EFFICIENCY","debtCharName":"Efficiency","debtSubCharName":"Memory use","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:RpC_REPEATED_CONDITIONAL_TEST","repo":"findbugs","name":"Correctness - Repeated conditional tests","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"RpC_REPEATED_CONDITIONAL_TEST","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>The code contains a conditional test is performed twice, one right after the other\n(e.g., <code>x == 0 || x == 0</code>). Perhaps the second occurrence is intended to be something else\n(e.g., <code>x == 0 || y == 0</code>). \n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:AM_CREATES_EMPTY_ZIP_FILE_ENTRY","repo":"findbugs","name":"Bad practice - Creates an empty zip file entry","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"AM_CREATES_EMPTY_ZIP_FILE_ENTRY","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>The code calls <code>putNextEntry()</code>, immediately\nfollowed by a call to <code>closeEntry()</code>. This results\nin an empty ZipFile entry. The contents of the entry\nshould be written to the ZipFile between the calls to\n<code>putNextEntry()</code> and\n<code>closeEntry()</code>.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:AM_CREATES_EMPTY_JAR_FILE_ENTRY","repo":"findbugs","name":"Bad practice - Creates an empty jar file entry","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"AM_CREATES_EMPTY_JAR_FILE_ENTRY","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>The code calls <code>putNextEntry()</code>, immediately\nfollowed by a call to <code>closeEntry()</code>. This results\nin an empty JarFile entry. The contents of the entry\nshould be written to the JarFile between the calls to\n<code>putNextEntry()</code> and\n<code>closeEntry()</code>.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:DP_DO_INSIDE_DO_PRIVILEGED","repo":"findbugs","name":"Bad practice - Method invoked that should be only be invoked inside a doPrivileged block","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"DP_DO_INSIDE_DO_PRIVILEGED","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This code invokes a method that requires a security permission check.\n  If this code will be granted security permissions, but might be invoked by code that does not\n  have security permissions, then the invocation needs to occur inside a doPrivileged block.</p>","defaultDebtChar":"SECURITY","defaultDebtSubChar":"SECURITY_FEATURES","debtChar":"SECURITY","debtSubChar":"SECURITY_FEATURES","debtCharName":"Security","debtSubCharName":"Security features","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:DP_CREATE_CLASSLOADER_INSIDE_DO_PRIVILEGED","repo":"findbugs","name":"Bad practice - Classloaders should only be created inside doPrivileged block","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"DP_CREATE_CLASSLOADER_INSIDE_DO_PRIVILEGED","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This code creates a classloader,  which requires a security manager.\n  If this code will be granted security permissions, but might be invoked by code that does not\n  have security permissions, then the classloader creation needs to occur inside a doPrivileged block.</p>","defaultDebtChar":"SECURITY","defaultDebtSubChar":"SECURITY_FEATURES","debtChar":"SECURITY","debtSubChar":"SECURITY_FEATURES","debtCharName":"Security","debtSubCharName":"Security features","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:IMSE_DONT_CATCH_IMSE","repo":"findbugs","name":"Bad practice - Dubious catching of IllegalMonitorStateException","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"IMSE_DONT_CATCH_IMSE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>IllegalMonitorStateException is generally only\n   thrown in case of a design flaw in your code (calling wait or\n   notify on an object you do not hold a lock on).</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"EXCEPTION_HANDLING","debtChar":"RELIABILITY","debtSubChar":"EXCEPTION_HANDLING","debtCharName":"Reliability","debtSubCharName":"Exception handling","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE","repo":"findbugs","name":"Bad practice - Class defines clone() but doesn't implement Cloneable","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This class defines a clone() method but the class doesn't implement Cloneable.\nThere are some situations in which this is OK (e.g., you want to control how subclasses \ncan clone themselves), but just make sure that this is what you intended.\n</p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:CN_IDIOM","repo":"findbugs","name":"Bad practice - Class implements Cloneable but does not define or use clone method","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"CN_IDIOM","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\n   Class implements Cloneable but does not define or\n   use the clone method.</p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:DE_MIGHT_DROP","repo":"findbugs","name":"Bad practice - Method might drop exception","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"DE_MIGHT_DROP","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This method might drop an exception.&nbsp; In general, exceptions\n  should be handled or reported in some way, or they should be thrown\n  out of the method.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"EXCEPTION_HANDLING","debtChar":"RELIABILITY","debtSubChar":"EXCEPTION_HANDLING","debtCharName":"Reliability","debtSubCharName":"Exception handling","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:DE_MIGHT_IGNORE","repo":"findbugs","name":"Bad practice - Method might ignore exception","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"DE_MIGHT_IGNORE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This method might ignore an exception.&nbsp; In general, exceptions\n  should be handled or reported in some way, or they should be thrown\n  out of the method.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"EXCEPTION_HANDLING","debtChar":"RELIABILITY","debtSubChar":"EXCEPTION_HANDLING","debtCharName":"Reliability","debtSubCharName":"Exception handling","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:NM_FUTURE_KEYWORD_USED_AS_IDENTIFIER","repo":"findbugs","name":"Bad practice - Use of identifier that is a keyword in later versions of Java","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"NM_FUTURE_KEYWORD_USED_AS_IDENTIFIER","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>The identifier is a word that is reserved as a keyword in later versions of Java, and your code will need to be changed\nin order to compile it in later versions of Java.</p>","defaultDebtChar":"PORTABILITY","defaultDebtSubChar":"COMPILER_RELATED_PORTABILITY","debtChar":"PORTABILITY","debtSubChar":"COMPILER_RELATED_PORTABILITY","debtCharName":"Portability","debtSubCharName":"Compiler","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:NM_FUTURE_KEYWORD_USED_AS_MEMBER_IDENTIFIER","repo":"findbugs","name":"Bad practice - Use of member identifier that is a keyword in later versions of Java","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"NM_FUTURE_KEYWORD_USED_AS_MEMBER_IDENTIFIER","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>This identifier is used as a keyword in later versions of Java. This code, and \nany code that references this API, \nwill need to be changed in order to compile it in later versions of Java.</p>","defaultDebtChar":"PORTABILITY","defaultDebtSubChar":"COMPILER_RELATED_PORTABILITY","debtChar":"PORTABILITY","debtSubChar":"COMPILER_RELATED_PORTABILITY","debtCharName":"Portability","debtSubCharName":"Compiler","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:JCIP_FIELD_ISNT_FINAL_IN_IMMUTABLE_CLASS","repo":"findbugs","name":"Bad practice - Fields of immutable classes should be final","createdAt":"2013-06-19T07:34:52+0000","severity":"MINOR","status":"READY","internalKey":"JCIP_FIELD_ISNT_FINAL_IN_IMMUTABLE_CLASS","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> The class is annotated with net.jcip.annotations.Immutable, and the rules for that annotation require\nthat all fields are final.\n   .</p>","defaultDebtChar":"CHANGEABILITY","defaultDebtSubChar":"ARCHITECTURE_CHANGEABILITY","debtChar":"CHANGEABILITY","debtSubChar":"ARCHITECTURE_CHANGEABILITY","debtCharName":"Changeability","debtSubCharName":"Architecture","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MINOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MINOR","params":[]}]},{"rule":{"key":"findbugs:DMI_CONSTANT_DB_PASSWORD","repo":"findbugs","name":"Security - Hardcoded constant database password","createdAt":"2013-06-19T07:34:52+0000","severity":"BLOCKER","status":"READY","internalKey":"DMI_CONSTANT_DB_PASSWORD","isTemplate":false,"tags":[],"sysTags":["cwe","owasp-top10"],"lang":"java","langName":"Java","htmlDesc":"<p>This code creates a database connect using a hardcoded, constant password. Anyone with access to either the source code or the compiled code can \n\teasily learn the password.\n</p>","defaultDebtChar":"SECURITY","defaultDebtSubChar":"SECURITY_FEATURES","debtChar":"SECURITY","debtSubChar":"SECURITY_FEATURES","debtCharName":"Security","debtSubCharName":"Security features","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"BLOCKER","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"BLOCKER","params":[]}]},{"rule":{"key":"findbugs:DMI_EMPTY_DB_PASSWORD","repo":"findbugs","name":"Security - Empty database password","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"DMI_EMPTY_DB_PASSWORD","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>This code creates a database connect using a blank or empty password. This indicates that the database is not protected by a password. \n</p>","defaultDebtChar":"SECURITY","defaultDebtSubChar":"SECURITY_FEATURES","debtChar":"SECURITY","debtSubChar":"SECURITY_FEATURES","debtCharName":"Security","debtSubCharName":"Security features","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:DMI_UNSUPPORTED_METHOD","repo":"findbugs","name":"Dodgy - Call to unsupported method","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"DMI_UNSUPPORTED_METHOD","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>All targets of this method invocation throw an UnsupportedOperationException.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:DMI_THREAD_PASSED_WHERE_RUNNABLE_EXPECTED","repo":"findbugs","name":"Dodgy - Thread passed where Runnable expected","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"DMI_THREAD_PASSED_WHERE_RUNNABLE_EXPECTED","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> A Thread object is passed as a parameter to a method where \na Runnable is expected. This is rather unusual, and may indicate a logic error\nor cause unexpected behavior.\n   </p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"ARCHITECTURE_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"ARCHITECTURE_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Architecture","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:DMI_BLOCKING_METHODS_ON_URL","repo":"findbugs","name":"Performance - The equals and hashCode methods of URL are blocking","createdAt":"2013-06-19T07:34:52+0000","severity":"BLOCKER","status":"READY","internalKey":"DMI_BLOCKING_METHODS_ON_URL","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> The equals and hashCode\nmethod of URL perform domain name resolution, this can result in a big performance hit.\nSee <a href=\"http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html\">http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html</a> for more information.\nConsider using <code>java.net.URI</code> instead.\n   </p>","defaultDebtChar":"EFFICIENCY","defaultDebtSubChar":"CPU_EFFICIENCY","debtChar":"EFFICIENCY","debtSubChar":"CPU_EFFICIENCY","debtCharName":"Efficiency","debtSubCharName":"Processor use","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"BLOCKER","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"BLOCKER","params":[]}]},{"rule":{"key":"findbugs:DMI_COLLECTION_OF_URLS","repo":"findbugs","name":"Performance - Maps and sets of URLs can be performance hogs","createdAt":"2013-06-19T07:34:52+0000","severity":"BLOCKER","status":"READY","internalKey":"DMI_COLLECTION_OF_URLS","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This method or field is or uses a Map or Set of URLs. Since both the equals and hashCode\nmethod of URL perform domain name resolution, this can result in a big performance hit.\nSee <a href=\"http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html\">http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html</a> for more information.\nConsider using <code>java.net.URI</code> instead.\n   </p>","defaultDebtChar":"EFFICIENCY","defaultDebtSubChar":"CPU_EFFICIENCY","debtChar":"EFFICIENCY","debtSubChar":"CPU_EFFICIENCY","debtCharName":"Efficiency","debtSubCharName":"Processor use","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"BLOCKER","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"BLOCKER","params":[]}]},{"rule":{"key":"findbugs:DMI_ANNOTATION_IS_NOT_VISIBLE_TO_REFLECTION","repo":"findbugs","name":"Correctness - Can't use reflection to check for presence of annotation without runtime retention","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"DMI_ANNOTATION_IS_NOT_VISIBLE_TO_REFLECTION","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> Unless an annotation has itself been annotated with  @Retention(RetentionPolicy.RUNTIME), the annotation can't be observed using reflection\n(e.g., by using the isAnnotationPresent method).\n   .</p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:DM_RUN_FINALIZERS_ON_EXIT","repo":"findbugs","name":"Bad practice - Method invokes dangerous method runFinalizersOnExit","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"DM_RUN_FINALIZERS_ON_EXIT","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> <em>Never call System.runFinalizersOnExit\nor Runtime.runFinalizersOnExit for any reason: they are among the most\ndangerous methods in the Java libraries.</em> -- Joshua Bloch</p>","defaultDebtChar":"SECURITY","defaultDebtSubChar":"SECURITY_FEATURES","debtChar":"SECURITY","debtSubChar":"SECURITY_FEATURES","debtCharName":"Security","debtSubCharName":"Security features","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:DM_STRING_CTOR","repo":"findbugs","name":"Performance - Method invokes inefficient new String(String) constructor","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"DM_STRING_CTOR","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> Using the <code>java.lang.String(String)</code> constructor wastes memory\n  because the object so constructed will be functionally indistinguishable\n  from the <code>String</code> passed as a parameter.&nbsp; Just use the\n  argument <code>String</code> directly.</p>","defaultDebtChar":"EFFICIENCY","defaultDebtSubChar":"CPU_EFFICIENCY","debtChar":"EFFICIENCY","debtSubChar":"CPU_EFFICIENCY","debtCharName":"Efficiency","debtSubCharName":"Processor use","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:DM_STRING_VOID_CTOR","repo":"findbugs","name":"Performance - Method invokes inefficient new String() constructor","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"DM_STRING_VOID_CTOR","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> Creating a new <code>java.lang.String</code> object using the\n  no-argument constructor wastes memory because the object so created will\n  be functionally indistinguishable from the empty string constant\n  <code>\"\"</code>.&nbsp; Java guarantees that identical string constants\n  will be represented by the same <code>String</code> object.&nbsp; Therefore,\n  you should just use the empty string constant directly.</p>","defaultDebtChar":"EFFICIENCY","defaultDebtSubChar":"CPU_EFFICIENCY","debtChar":"EFFICIENCY","debtSubChar":"CPU_EFFICIENCY","debtCharName":"Efficiency","debtSubCharName":"Processor use","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:DM_STRING_TOSTRING","repo":"findbugs","name":"Performance - Method invokes toString() method on a String","createdAt":"2013-06-19T07:34:52+0000","severity":"INFO","status":"READY","internalKey":"DM_STRING_TOSTRING","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> Calling <code>String.toString()</code> is just a redundant operation.\n  Just use the String.</p>","defaultDebtChar":"EFFICIENCY","defaultDebtSubChar":"CPU_EFFICIENCY","debtChar":"EFFICIENCY","debtSubChar":"CPU_EFFICIENCY","debtCharName":"Efficiency","debtSubCharName":"Processor use","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"INFO","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"INFO","params":[]}]},{"rule":{"key":"findbugs:DM_BOOLEAN_CTOR","repo":"findbugs","name":"Performance - Method invokes inefficient Boolean constructor; use Boolean.valueOf(...) instead","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"DM_BOOLEAN_CTOR","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> Creating new instances of <code>java.lang.Boolean</code> wastes\n  memory, since <code>Boolean</code> objects are immutable and there are\n  only two useful values of this type.&nbsp; Use the <code>Boolean.valueOf()</code>\n  method (or Java 1.5 autoboxing) to create <code>Boolean</code> objects instead.</p>","defaultDebtChar":"EFFICIENCY","defaultDebtSubChar":"CPU_EFFICIENCY","debtChar":"EFFICIENCY","debtSubChar":"CPU_EFFICIENCY","debtCharName":"Efficiency","debtSubCharName":"Processor use","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:DM_NUMBER_CTOR","repo":"findbugs","name":"Performance - Method invokes inefficient Number constructor; use static valueOf instead","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"DM_NUMBER_CTOR","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\n      Using <code>new Integer(int)</code> is guaranteed to always result in a new object whereas\n      <code>Integer.valueOf(int)</code> allows caching of values to be done by the compiler, class library, or JVM.\n      Using of cached values avoids object allocation and the code will be faster.\n      </p>\n      <p>\n      Values between -128 and 127 are guaranteed to have corresponding cached instances\n      and using <code>valueOf</code> is approximately 3.5 times faster than using constructor.\n      For values outside the constant range the performance of both styles is the same.\n      </p>\n      <p>\n      Unless the class must be compatible with JVMs predating Java 1.5,\n      use either autoboxing or the <code>valueOf()</code> method when creating instances of\n      <code>Long</code>, <code>Integer</code>, <code>Short</code>, <code>Character</code>, and <code>Byte</code>.\n      </p>","defaultDebtChar":"EFFICIENCY","defaultDebtSubChar":"CPU_EFFICIENCY","debtChar":"EFFICIENCY","debtSubChar":"CPU_EFFICIENCY","debtCharName":"Efficiency","debtSubCharName":"Processor use","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:DM_FP_NUMBER_CTOR","repo":"findbugs","name":"Performance - Method invokes inefficient floating-point Number constructor; use static valueOf instead","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"DM_FP_NUMBER_CTOR","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\n      Using <code>new Double(double)</code> is guaranteed to always result in a new object whereas\n      <code>Double.valueOf(double)</code> allows caching of values to be done by the compiler, class library, or JVM.\n      Using of cached values avoids object allocation and the code will be faster.\n      </p>\n      <p>\n      Unless the class must be compatible with JVMs predating Java 1.5,\n      use either autoboxing or the <code>valueOf()</code> method when creating instances of <code>Double</code> and <code>Float</code>.\n      </p>","defaultDebtChar":"EFFICIENCY","defaultDebtSubChar":"CPU_EFFICIENCY","debtChar":"EFFICIENCY","debtSubChar":"CPU_EFFICIENCY","debtCharName":"Efficiency","debtSubCharName":"Processor use","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:DM_CONVERT_CASE","repo":"findbugs","name":"Internationalization - Consider using Locale parameterized version of invoked method","createdAt":"2013-06-19T07:34:52+0000","severity":"INFO","status":"READY","internalKey":"DM_CONVERT_CASE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> A String is being converted to upper or lowercase, using the platform's default encoding. This may\n      result in improper conversions when used with international characters. Use the </p>\n      <table><tr><td>String.toUpperCase( Locale l )</td></tr><tr><td>String.toLowerCase( Locale l )</td></tr></table>\n      <p>versions instead.</p>","defaultDebtChar":"PORTABILITY","defaultDebtSubChar":"LANGUAGE_RELATED_PORTABILITY","debtChar":"PORTABILITY","debtSubChar":"LANGUAGE_RELATED_PORTABILITY","debtCharName":"Portability","debtSubCharName":"Language","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"INFO","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"INFO","params":[]}]},{"rule":{"key":"findbugs:DM_BOXED_PRIMITIVE_TOSTRING","repo":"findbugs","name":"Performance - Method allocates a boxed primitive just to call toString","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"DM_BOXED_PRIMITIVE_TOSTRING","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>A boxed primitive is allocated just to call toString(). It is more effective to just use the static\n  form of toString which takes the primitive value. So,</p>\n  <table>\n     <tr><th>Replace...</th><th>With this...</th></tr>\n     <tr><td>new Integer(1).toString()</td><td>Integer.toString(1)</td></tr>\n     <tr><td>new Long(1).toString()</td><td>Long.toString(1)</td></tr>\n     <tr><td>new Float(1.0).toString()</td><td>Float.toString(1.0)</td></tr>\n     <tr><td>new Double(1.0).toString()</td><td>Double.toString(1.0)</td></tr>\n     <tr><td>new Byte(1).toString()</td><td>Byte.toString(1)</td></tr>\n     <tr><td>new Short(1).toString()</td><td>Short.toString(1)</td></tr>\n     <tr><td>new Boolean(true).toString()</td><td>Boolean.toString(true)</td></tr>\n  </table>","defaultDebtChar":"EFFICIENCY","defaultDebtSubChar":"MEMORY_EFFICIENCY","debtChar":"EFFICIENCY","debtSubChar":"MEMORY_EFFICIENCY","debtCharName":"Efficiency","debtSubCharName":"Memory use","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:BX_UNBOXED_AND_COERCED_FOR_TERNARY_OPERATOR","repo":"findbugs","name":"Correctness - Primitive value is unboxed and coerced for ternary operator","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"BX_UNBOXED_AND_COERCED_FOR_TERNARY_OPERATOR","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>A wrapped primitive value is unboxed and converted to another primitive type as part of the\nevaluation of a conditional ternary operator (the <code> b ? e1 : e2</code> operator). The\nsemantics of Java mandate that if <code>e1</code> and <code>e2</code> are wrapped\nnumeric values, the values are unboxed and converted/coerced to their common type (e.g,\nif <code>e1</code> is of type <code>Integer</code> \nand <code>e2</code> is of type <code>Float</code>, then <code>e1</code> is unboxed,\nconverted to a floating point value, and boxed. See JLS Section 15.25.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"DATA_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"DATA_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Data","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:BX_BOXING_IMMEDIATELY_UNBOXED","repo":"findbugs","name":"Performance - Primitive value is boxed and then immediately unboxed","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"BX_BOXING_IMMEDIATELY_UNBOXED","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>A primitive is boxed, and then immediately unboxed. This probably is due to a manual\n\tboxing in a place where an unboxed value is required, thus forcing the compiler\nto immediately undo the work of the boxing.\n</p>","defaultDebtChar":"EFFICIENCY","defaultDebtSubChar":"CPU_EFFICIENCY","debtChar":"EFFICIENCY","debtSubChar":"CPU_EFFICIENCY","debtCharName":"Efficiency","debtSubCharName":"Processor use","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:BX_BOXING_IMMEDIATELY_UNBOXED_TO_PERFORM_COERCION","repo":"findbugs","name":"Performance - Primitive value is boxed then unboxed to perform primitive coercion","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"BX_BOXING_IMMEDIATELY_UNBOXED_TO_PERFORM_COERCION","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>A primitive boxed value constructed and then immediately converted into a different primitive type\n(e.g., <code>new Double(d).intValue()</code>). Just perform direct primitive coercion (e.g., <code>(int) d</code>).</p>","defaultDebtChar":"EFFICIENCY","defaultDebtSubChar":"CPU_EFFICIENCY","debtChar":"EFFICIENCY","debtSubChar":"CPU_EFFICIENCY","debtCharName":"Efficiency","debtSubCharName":"Processor use","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:DM_NEW_FOR_GETCLASS","repo":"findbugs","name":"Performance - Method allocates an object, only to get the class object","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"DM_NEW_FOR_GETCLASS","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>This method allocates an object just to call getClass() on it, in order to\n  retrieve the Class object for it. It is simpler to just access the .class property of the class.</p>","defaultDebtChar":"EFFICIENCY","defaultDebtSubChar":"MEMORY_EFFICIENCY","debtChar":"EFFICIENCY","debtSubChar":"MEMORY_EFFICIENCY","debtCharName":"Efficiency","debtSubCharName":"Memory use","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:DM_MONITOR_WAIT_ON_CONDITION","repo":"findbugs","name":"Multithreaded correctness - Monitor wait() called on Condition","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"DM_MONITOR_WAIT_ON_CONDITION","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\n      This method calls <code>wait()</code> on a\n      <code>java.util.concurrent.locks.Condition</code> object.&nbsp;\n      Waiting for a <code>Condition</code> should be done using one of the <code>await()</code>\n      methods defined by the <code>Condition</code> interface.\n      </p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"SYNCHRONIZATION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"SYNCHRONIZATION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Synchronization","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:VA_FORMAT_STRING_BAD_CONVERSION","repo":"findbugs","name":"Correctness - The type of a supplied argument doesn't match format specifier","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"VA_FORMAT_STRING_BAD_CONVERSION","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nOne of the arguments is uncompatible with the corresponding format string specifier.\nAs a result, this will generate a runtime exception when executed.\nFor example, <code>String.format(\"%d\", \"1\")</code> will generate an exception, since\nthe String \"1\" is incompatible with the format specifier %d.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:VA_FORMAT_STRING_BAD_CONVERSION_TO_BOOLEAN","repo":"findbugs","name":"Dodgy - Non-Boolean argument formatted using %b format specifier","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"VA_FORMAT_STRING_BAD_CONVERSION_TO_BOOLEAN","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nAn argument not of type Boolean is being formatted with a %b format specifier. This won't throw an\nexception; instead, it will print true for any nonnull value, and false for null.\nThis feature of format strings is strange, and may not be what you intended.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:VA_FORMAT_STRING_BAD_CONVERSION_FROM_ARRAY","repo":"findbugs","name":"Correctness - Array formatted in useless way using format string","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"VA_FORMAT_STRING_BAD_CONVERSION_FROM_ARRAY","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nOne of the arguments being formatted with a format string is an array. This will be formatted\nusing a fairly useless format, such as [I@304282, which doesn't actually show the contents\nof the array.\nConsider wrapping the array using <code>Arrays.asList(...)</code> before handling it off to a formatted.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:VA_FORMAT_STRING_ARG_MISMATCH","repo":"findbugs","name":"Correctness - Number of format-string arguments does not correspond to number of placeholders","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"VA_FORMAT_STRING_ARG_MISMATCH","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nA format-string method with a variable number of arguments is called,\nbut the number of arguments passed does not match with the number of\n% placeholders in the format string.  This is probably not what the\nauthor intended.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:DMI_INVOKING_HASHCODE_ON_ARRAY","repo":"findbugs","name":"Correctness - Invocation of hashCode on an array","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"DMI_INVOKING_HASHCODE_ON_ARRAY","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nThe code invokes hashCode on an array. Calling hashCode on\nan array returns the same value as System.identityHashCode, and ingores\nthe contents and length of the array. If you need a hashCode that\ndepends on the contents of an array <code>a</code>, \nuse <code>java.util.Arrays.hashCode(a)</code>.\n\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:GC_UNCHECKED_TYPE_IN_GENERIC_CALL","repo":"findbugs","name":"Bad practice - Unchecked type in generic call","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"GC_UNCHECKED_TYPE_IN_GENERIC_CALL","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This call to a generic collection method passes an argument\n\twhile compile type Object where a specific type from\n\tthe generic type parameters is expected.\n\tThus, neither the standard Java type system nor static analysis\n\tcan provide useful information on whether the\n\tobject being passed as a parameter is of an appropriate type.\n\t</p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:DMI_COLLECTIONS_SHOULD_NOT_CONTAIN_THEMSELVES","repo":"findbugs","name":"Correctness - Collections should not contain themselves","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"DMI_COLLECTIONS_SHOULD_NOT_CONTAIN_THEMSELVES","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This call to a generic collection's method would only make sense if a collection contained \nitself (e.g., if <code>s.contains(s)</code> were true). This is unlikely to be true and would cause\nproblems if it were true (such as the computation of the hash code resulting in infinite recursion).\nIt is likely that the wrong value is being passed as a parameter.\n\t</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:DMI_VACUOUS_SELF_COLLECTION_CALL","repo":"findbugs","name":"Correctness - Vacuous call to collections","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"DMI_VACUOUS_SELF_COLLECTION_CALL","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This call doesn't make sense. For any collection <code>c</code>, calling <code>c.containsAll(c)</code> should\nalways be true, and <code>c.retainAll(c)</code> should have no effect.\n\t</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:DMI_USING_REMOVEALL_TO_CLEAR_COLLECTION","repo":"findbugs","name":"Correctness - Don't use removeAll to clear a collection","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"DMI_USING_REMOVEALL_TO_CLEAR_COLLECTION","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> If you want to remove all elements from a collection <code>c</code>, use <code>c.clear</code>,\nnot <code>c.removeAll(c)</code>.\n\t</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:BC_IMPOSSIBLE_DOWNCAST","repo":"findbugs","name":"Correctness - Impossible downcast","createdAt":"2013-06-19T07:34:52+0000","severity":"BLOCKER","status":"READY","internalKey":"BC_IMPOSSIBLE_DOWNCAST","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"This cast will always throw a ClassCastException. The analysis believes it knows the precise type of the value being cast, and the attempt to downcast it to a subtype will always fail by throwing a ClassCastException.","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"BLOCKER","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"BLOCKER","params":[]}]},{"rule":{"key":"findbugs:BC_IMPOSSIBLE_DOWNCAST_OF_TOARRAY","repo":"findbugs","name":"Correctness - Impossible downcast of toArray() result","createdAt":"2013-06-19T07:34:52+0000","severity":"BLOCKER","status":"READY","internalKey":"BC_IMPOSSIBLE_DOWNCAST_OF_TOARRAY","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>This code is casting the result of calling toArray() on a collection to a type more specific than Object[], as in:</p>\n<pre>\n  String[] getAsArray(Collection<String> c) {\n    return (String[]) c.toArray();\n  }\n</pre>\n<p>This will usually fail by throwing a ClassCastException. The <code>toArray()</code> of almost all collections return an <code>Object[]</code>. They can't really do anything else, since the Collection object has no reference to the declared generic type of the collection.</p>\n<p>The correct way to do get an array of a specific type from a collection is to use <code>c.toArray(new String[]);</code> or <code>c.toArray(new String[c.size()]);</code> (the latter is slightly more efficient).</p>\n<p>There is one common/known exception exception to this. The toArray() method of lists returned by Arrays.asList(...) will return a covariantly typed array. For example, <code>Arrays.asArray(new String[] { \"a\" }).toArray()</code> will return a String []. FindBugs attempts to detect and suppress such cases, but may miss some.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"BLOCKER","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"BLOCKER","params":[]}]},{"rule":{"key":"findbugs:EC_INCOMPATIBLE_ARRAY_COMPARE","repo":"findbugs","name":"Correctness - equals(...) used to compare incompatible arrays","createdAt":"2013-06-19T07:34:52+0000","severity":"BLOCKER","status":"DEPRECATED","internalKey":"EC_INCOMPATIBLE_ARRAY_COMPARE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"This method invokes the .equals(Object o) to compare two arrays, but the arrays of of incompatible types (e.g., String[] and StringBuffer[], or String[] and int[]). They will never be equal. In addition, when equals(...) is used to compare arrays it only checks to see if they are the same array, and ignores the contents of the arrays.\n<p>\n  This rule is deprecated, use <a href='/coding_rules#rule_key=squid:S1294'>S1294</a> instead.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"BLOCKER","params":[]}]},{"rule":{"key":"findbugs:LG_LOST_LOGGER_DUE_TO_WEAK_REFERENCE","repo":"findbugs","name":"Experimental - Potential lost logger changes due to weak reference in OpenJDK","createdAt":"2013-06-19T07:34:52+0000","severity":"INFO","status":"READY","internalKey":"LG_LOST_LOGGER_DUE_TO_WEAK_REFERENCE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\n      OpenJDK introduces a potential incompatibility.\n      In particular, the java.util.logging.Logger behavior has\n      changed. Instead of using strong references, it now uses weak references\n      internally. That's a reasonable change, but unfortunately some code relies on\n      the old behavior - when changing logger configuration, it simply drops the\n      logger reference. That means that the garbage collector is free to reclaim\n      that memory, which means that the logger configuration is lost. For example,\n      consider:\n      </p>\n      <p><pre>public static void initLogging() throws Exception {\n      Logger logger = Logger.getLogger(\"edu.umd.cs\");\n      logger.addHandler(new FileHandler()); // call to change logger configuration\n      logger.setUseParentHandlers(false); // another call to change logger configuration\n      }</pre></p>\n      <p>The logger reference is lost at the end of the method (it doesn't\n      escape the method), so if you have a garbage collection cycle just\n      after the call to initLogging, the logger configuration is lost\n      (because Logger only keeps weak references).</p>\n      <p><pre>public static void main(String[] args) throws Exception {\n      initLogging(); // adds a file handler to the logger\n      System.gc(); // logger configuration lost\n      Logger.getLogger(\"edu.umd.cs\").info(\"Some message\"); // this isn't logged to the file as expected\n      }</pre></p>\n      <p><em>Ulf Ochsenfahrt and Eric Fellheimer</em>\n    </p>","defaultDebtChar":"PORTABILITY","defaultDebtSubChar":"SOFTWARE_RELATED_PORTABILITY","debtChar":"PORTABILITY","debtSubChar":"SOFTWARE_RELATED_PORTABILITY","debtCharName":"Portability","debtSubCharName":"Software","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"INFO","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"INFO","params":[]}]},{"rule":{"key":"findbugs:NP_CLOSING_NULL","repo":"findbugs","name":"Correctness - close() invoked on a value that is always null","createdAt":"2013-06-19T07:34:52+0000","severity":"BLOCKER","status":"READY","internalKey":"NP_CLOSING_NULL","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"close() is being invoked on a value that is always null. If this statement is executed, a null pointer exception will occur. But the big risk here you never close something that should be closed.","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"BLOCKER","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"BLOCKER","params":[]}]},{"rule":{"key":"findbugs:RC_REF_COMPARISON_BAD_PRACTICE","repo":"findbugs","name":"Correctness - Suspicious reference comparison to constant","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"RC_REF_COMPARISON_BAD_PRACTICE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"This method compares a reference value to a constant using the == or != operator, where the correct way to compare instances of this type is generally with the equals() method. It is possible to create distinct instances that are equal but do not compare as == since they are different objects. Examples of classes which should generally not be compared by reference are java.lang.Integer, java.lang.Float, etc.","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:RC_REF_COMPARISON_BAD_PRACTICE_BOOLEAN","repo":"findbugs","name":"Correctness - Suspicious reference comparison of Boolean values","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"RC_REF_COMPARISON_BAD_PRACTICE_BOOLEAN","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"This method compares two Boolean values using the == or != operator. Normally, there are only two Boolean values (Boolean.TRUE and Boolean.FALSE), but it is possible to create other Boolean objects using the new Boolean(b) constructor. It is best to avoid such objects, but if they do exist, then checking Boolean objects for equality using == or != will give results than are different than you would get using .equals(...)","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:RV_RETURN_VALUE_OF_PUTIFABSENT_IGNORED","repo":"findbugs","name":"Correctness - Return value of putIfAbsent ignored, value passed to putIfAbsent reused","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"RV_RETURN_VALUE_OF_PUTIFABSENT_IGNORED","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"The putIfAbsent method is typically used to ensure that a single value is associated with a given key (the first value for which put if absent succeeds). If you ignore the return value and retain a reference to the value passed in, you run the risk of retaining a value that is not the one that is associated with the key in the map. If it matters which one you use and you use the one that isn't stored in the map, your program will behave incorrectly.","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:SIC_THREADLOCAL_DEADLY_EMBRACE","repo":"findbugs","name":"Correctness - Deadly embrace of non-static inner class and thread local","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"SIC_THREADLOCAL_DEADLY_EMBRACE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"This class is an inner class, but should probably be a static inner class. As it is, there is a serious danger of a deadly embrace between the inner class and the thread local in the outer class. Because the inner class isn't static, it retains a reference to the outer class. If the thread local contains a reference to an instance of the inner class, the inner and outer instance will both be reachable and not eligible for garbage collection.","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"ARCHITECTURE_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"ARCHITECTURE_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Architecture","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR","repo":"findbugs","name":"Correctness - Uninitialized read of field method called from constructor of superclass","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>This method is invoked in the constructor of of the superclass. At this point, the fields of the class have not yet initialized. To make this more concrete, consider the following classes:</p>\n<pre>\n  abstract class A {\n    int hashCode;\n    abstract Object getValue();\n    A() {\n      hashCode = getValue().hashCode();\n    }\n  }\n  class B extends A {\n    Object value;\n    B(Object v) {\n      this.value = v;\n    }\n    Object getValue() {\n      return value;\n    }\n  }\n</pre>\n<p>When a B is constructed, the constructor for the A class is invoked before the constructor for B sets value. Thus, when the constructor for A invokes getValue, an uninitialized value is read for value.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"DATA_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"DATA_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Data","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:VA_FORMAT_STRING_EXPECTED_MESSAGE_FORMAT_SUPPLIED","repo":"findbugs","name":"Correctness - MessageFormat supplied where printf style format expected","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"VA_FORMAT_STRING_EXPECTED_MESSAGE_FORMAT_SUPPLIED","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"A method is called that expects a Java printf format string and a list of arguments. However, the format string doesn't contain any format specifiers (e.g., %s) but does contain message format elements (e.g., {0}). It is likely that the code is supplying a MessageFormat string when a printf-style format string is required. At runtime, all of the arguments will be ignored and the format string will be returned exactly as provided without any formatting.","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR","repo":"findbugs","name":"Correctness - Field not initialized in constructor","createdAt":"2013-06-19T07:34:52+0000","severity":"MINOR","status":"READY","internalKey":"UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>This field is never initialized within any constructor, and is therefore could be null after the object is constructed. This could be a either an error or a questionable design, since it means a null pointer exception will be generated if that field is dereferenced before being initialized.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"DATA_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"DATA_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Data","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MINOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MINOR","params":[]}]},{"rule":{"key":"squid:UnusedPrivateMethod","repo":"squid","name":"Unused private method","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"UnusedPrivateMethod","isTemplate":false,"tags":[],"sysTags":["unused"],"lang":"java","langName":"Java","htmlDesc":"<p>Private methods that are never executed are dead code. Dead code\n  means unnecessary, inoperative code that should be removed. This helps\n  in maintenance by decreasing the maintained code size, making it easier\n  to understand the program and preventing bugs from being introduced.</p>\n<p>In the following two cases, private methods are not considered as\n  dead code by SonarQube :</p>\n<ul>\n  <li>Private empty constructors that are intentionally used to\n    prevent any direct instantiation of a class.</li>\n  <li>Private methods : readObject(...), writeObject(...),\n    writeReplace(...), readResolve(...) which can contractually be used\n    when implementing the Serializable interface.</li>\n</ul>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:ClassCyclomaticComplexity","repo":"squid","name":"Avoid too complex class","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"ClassCyclomaticComplexity","isTemplate":false,"tags":[],"sysTags":["brain-overload"],"lang":"java","langName":"Java","htmlDesc":"<p>The Cyclomatic Complexity is measured by the number of (&&, ||)\n\toperators and (if, while, do, for, ?:, catch, switch, case, return,\n\tthrow) statements in the body of a class plus one for each constructor,\n\tmethod (but not getter/setter), static initializer, or instance\n\tinitializer in the class. The last return statement in method, if exists,\n\tis not taken into account.</p>\n<p>\n\tEven when the Cyclomatic Complexity of a class is very high, this\n\tcomplexity might be well distributed among all methods. Nevertheless,\n\tmost of the time, a very complex class is a class which breaks the <a\n\t\thref='http://en.wikipedia.org/wiki/Single_responsibility_principle'>Single\n\t\tResponsibility Principle</a> and which should be re-factored to be split\n\tin several classes.\n</p>","defaultDebtChar":"TESTABILITY","defaultDebtSubChar":"UNIT_TESTABILITY","debtChar":"TESTABILITY","debtSubChar":"UNIT_TESTABILITY","debtCharName":"Testability","debtSubCharName":"Unit level","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","params":[{"key":"max","htmlDesc":"Maximum complexity allowed.","type":"INTEGER","defaultValue":"200"}]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[{"key":"max","value":"200"}]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[{"key":"max","value":"200"}]}]},{"rule":{"key":"findbugs:EQ_DOESNT_OVERRIDE_EQUALS","repo":"findbugs","name":"Dodgy - Class doesn't override equals in superclass","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"EQ_DOESNT_OVERRIDE_EQUALS","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p> This class extends a class that defines an equals method and adds fields, but doesn't\ndefine an equals method itself. Thus, equality on instances of this class will\nignore the identity of the subclass and the added fields. Be sure this is what is intended,\nand that you don't need to override the equals method. Even if you don't need to override\nthe equals method, consider overriding it anyway to document the fact\nthat the equals method for the subclass just return the result of\ninvoking super.equals(o).\n  </p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"ARCHITECTURE_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"ARCHITECTURE_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Architecture","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:RV_NEGATING_RESULT_OF_COMPARETO","repo":"findbugs","name":"Negating the result of compareTo()/compare()","createdAt":"2013-06-19T07:34:52+0000","severity":"MINOR","status":"READY","internalKey":"RV_NEGATING_RESULT_OF_COMPARETO","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>This code negatives the return value of a compareTo or compare method. This is a questionable or bad \nprogramming practice, since if the return value is Integer.MIN_VALUE, negating the return value won't \nnegate the sign of the result. You can achieve the same intended result by reversing the order of the \noperands rather than by negating the results.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MINOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MINOR","params":[]}]},{"rule":{"key":"findbugs:PZ_DONT_REUSE_ENTRY_OBJECTS_IN_ITERATORS","repo":"findbugs","name":"Don't reuse entry objects in iterators","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"PZ_DONT_REUSE_ENTRY_OBJECTS_IN_ITERATORS","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>The entrySet() method is allowed to return a view of the underlying Map in which an <code>Iterator</code> \nand <code>Map.Entry</code>. This clever idea was used in several Map implementations, but introduces the possibility of\n nasty coding mistakes. If a map m returns such an iterator for an entrySet, then <code>c.addAll(m.entrySet())</code> will \n go badly wrong. All of the Map implementations in OpenJDK 1.7 have been rewritten to avoid this, you should to.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:INT_BAD_COMPARISON_WITH_INT_VALUE","repo":"findbugs","name":"Bad comparison of int value with long constant","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"INT_BAD_COMPARISON_WITH_INT_VALUE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>This code compares an int value with a long constant that is outside the range of values that can\n be represented as an int value. This comparison is vacuous and possibily to be incorrect.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:RV_RETURN_VALUE_IGNORED_INFERRED","repo":"findbugs","name":"Method ignores return value, is this OK?","createdAt":"2013-06-19T07:34:52+0000","severity":"MINOR","status":"READY","internalKey":"RV_RETURN_VALUE_IGNORED_INFERRED","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>This code calls a method and ignores the return value. The return value is the same type as the type the \nmethod is invoked on, and from our analysis it looks like the return value might be important (e.g., like \nignoring the return value of <code>String.toLowerCase()</code>).\n</p>\n<p>We are guessing that ignoring the return value might be a bad idea just from a simple analysis of the \nbody of the method. You can use a <code>@CheckReturnValue</code> annotation to instruct FindBugs as to whether \nignoring the return value of this method is important or acceptable.<p>\n<p>Please investigate this closely to decide whether it is OK to ignore the return value. </p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MINOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MINOR","params":[]}]},{"rule":{"key":"findbugs:UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD","repo":"findbugs","name":"Unused public or protected field","createdAt":"2013-06-19T07:34:52+0000","severity":"INFO","status":"READY","internalKey":"UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>This field is never used.  The field is public or protected, so perhaps it is intended to be used \nwith classes not seen as part of the analysis. If not, consider removing it from the class.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"INFO","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"INFO","params":[]}]},{"rule":{"key":"findbugs:UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD","repo":"findbugs","name":"Unwritten public or protected field","createdAt":"2013-06-19T07:34:52+0000","severity":"MINOR","status":"READY","internalKey":"UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>No writes were seen to this public/protected field.  All reads of it will return the default value. \nCheck for errors (should it have been initialized?), or remove it if it is useless.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MINOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MINOR","params":[]}]},{"rule":{"key":"findbugs:VA_FORMAT_STRING_USES_NEWLINE","repo":"findbugs","name":"Format string should use %n rather than \\n","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"VA_FORMAT_STRING_USES_NEWLINE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>This format string include a newline character (\\n). In format strings, it is generally preferable \nbetter to use %n, which will produce the platform-specific line separator.</p>","debtOverloaded":false,"params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:DM_DEFAULT_ENCODING","repo":"findbugs","name":"Reliance on default encoding","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"DM_DEFAULT_ENCODING","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>Found a call to a method which will perform a byte to String (or String to byte) conversion, \nand will assume that the default platform encoding is suitable. This will cause the application \nbehaviour to vary between platforms. Use an alternative API and specify a charset name or \nCharset object explicitly.</p>","defaultDebtChar":"PORTABILITY","defaultDebtSubChar":"OS_RELATED_PORTABILITY","debtChar":"PORTABILITY","debtSubChar":"OS_RELATED_PORTABILITY","debtCharName":"Portability","debtSubCharName":"OS","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE","repo":"findbugs","name":"Method may fail to clean up stream or resource on checked exception","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an \nexplicit cleanup operation.<br/>In general, if a method opens a stream or other resource, the method should use a try/finally block to ensure \nthat the stream or resource is cleaned up before the method returns.<p/>\n<p>This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different \n(and hopefully better) static analysis technique. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a \ndescription of the analysis technique. .</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"EXCEPTION_HANDLING","debtChar":"RELIABILITY","debtSubChar":"EXCEPTION_HANDLING","debtCharName":"Reliability","debtSubCharName":"Exception handling","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:DMI_BIGDECIMAL_CONSTRUCTED_FROM_DOUBLE","repo":"findbugs","name":"BigDecimal constructed from double that isn't represented precisely","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"DMI_BIGDECIMAL_CONSTRUCTED_FROM_DOUBLE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>This code creates a BigDecimal from a double value that doesn't translate well to a decimal number. For example, \none might assume that writing <code>new BigDecimal(0.1)</code> in Java creates a BigDecimal which is exactly equal to 0.1 \n(an unscaled value of 1, with a scale of 1), but it is actually equal to 0.1000000000000000055511151231257827021181583404541015625. \nYou probably want to use the <code>BigDecimal.valueOf(double d)</code> method, which uses the String representation of the double to \ncreate the BigDecimal (e.g., <code>BigDecimal.valueOf(0.1)</code> gives 0.1).</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:DMI_ENTRY_SETS_MAY_REUSE_ENTRY_OBJECTS","repo":"findbugs","name":"Adding elements of an entry set may fail due to reuse of Entry objects","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"DMI_ENTRY_SETS_MAY_REUSE_ENTRY_OBJECTS","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>The entrySet() method is allowed to return a view of the underlying Map in which a single Entry\n object is reused and returned during the iteration. As of Java 1.6, both IdentityHashMap and EnumMap\n did so. When iterating through such a Map, the Entry value is only valid until you advance to the \n next iteration. If, for example, you try to pass such an entrySet to an addAll method, things will \n go badly wrong.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:BX_UNBOXING_IMMEDIATELY_REBOXED","repo":"findbugs","name":"Boxed value is unboxed and then immediately reboxed","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"BX_UNBOXING_IMMEDIATELY_REBOXED","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>A boxed value is unboxed and then immediately reboxed.</p>","defaultDebtChar":"EFFICIENCY","defaultDebtSubChar":"CPU_EFFICIENCY","debtChar":"EFFICIENCY","debtSubChar":"CPU_EFFICIENCY","debtCharName":"Efficiency","debtSubCharName":"Processor use","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:VO_VOLATILE_INCREMENT","repo":"findbugs","name":"An increment to a volatile field isn't atomic","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"VO_VOLATILE_INCREMENT","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>This code increments a volatile field. Increments of volatile fields aren't atomic. If more \nthan one thread is incrementing the field at the same time, increments could be lost. </p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:DLS_DEAD_LOCAL_STORE_SHADOWS_FIELD","repo":"findbugs","name":"Dead store to local variable that shadows field","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"DLS_DEAD_LOCAL_STORE_SHADOWS_FIELD","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>This instruction assigns a value to a local variable, but the value is not read or used in \nany subsequent instruction. Often, this indicates an error, because the value computed is never \nused. There is a field with the same name as the local variable. Did you mean to assign to that \nvariable instead?</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:CO_COMPARETO_RESULTS_MIN_VALUE","repo":"findbugs","name":"compareTo()/compare() returns Integer.MIN_VALUE","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"CO_COMPARETO_RESULTS_MIN_VALUE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>In some situation, this compareTo or compare method returns the constant Integer.MIN_VALUE, \nwhich is an exceptionally bad practice. The only thing that matters about the return value of \ncompareTo is the sign of the result. But people will sometimes negate the return value of compareTo, \nexpecting that this will negate the sign of the result. And it will, except in the case where \nthe value returned is Integer.MIN_VALUE. So just return -1 rather than Integer.MIN_VALUE.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:RV_CHECK_COMPARETO_FOR_SPECIFIC_RETURN_VALUE","repo":"findbugs","name":"Code checks for specific values returned by compareTo","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"RV_CHECK_COMPARETO_FOR_SPECIFIC_RETURN_VALUE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>This code invoked a compareTo or compare method, and checks to see if the return value is a specific \nvalue, such as 1 or -1. When invoking these methods, you should only check the sign of the result, not \nfor any specific non-zero value. While many or most compareTo and compare methods only return -1, 0 or 1, \nsome of them will return other values.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:ICAST_INT_2_LONG_AS_INSTANT","repo":"findbugs","name":"int value converted to long and used as absolute time","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"ICAST_INT_2_LONG_AS_INSTANT","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>This code converts a 32-bit int value to a 64-bit long value, and then passes that value for a \nmethod parameter that requires an absolute time value. An absolute time value is the number of \nmilliseconds since the standard base time known as \"the epoch\", namely January 1, 1970, 00:00:00 GMT. \nFor example, the following method, intended to convert seconds since the epoc into a Date, is badly broken:\n<pre>\nDate getDate(int seconds) { return new Date(seconds * 1000); }\n</pre>\n</p>\n<p>The multiplication is done using 32-bit arithmetic, and then converted to a 64-bit value. When a 32-bit \nvalue is converted to 64-bits and used to express an absolute time value, only dates in December 1969 and \nJanuary 1970 can be represented.</p>\n<p>Correct implementations for the above method are:\n<pre>\n// Fails for dates after 2037\nDate getDate(int seconds) { return new Date(seconds * 1000L); }\n\n// better, works for all dates\nDate getDate(long seconds) { return new Date(seconds * 1000); }\n</pre>\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD","repo":"findbugs","name":"Unread public/protected field","createdAt":"2013-06-19T07:34:52+0000","severity":"INFO","status":"READY","internalKey":"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>This field is never read.  The field is public or protected, so perhaps it is intended to be \nused with classes not seen as part of the analysis. If not, consider removing it from the class.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"INFO","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"INFO","params":[]}]},{"rule":{"key":"findbugs:JML_JSR166_CALLING_WAIT_RATHER_THAN_AWAIT","repo":"findbugs","name":"Using monitor style wait methods on util.concurrent abstraction","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"JML_JSR166_CALLING_WAIT_RATHER_THAN_AWAIT","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>This method calls <code>wait()</code>, <code>notify()</code> or <code>notifyAll()</code> on an object that also \nprovides an <code>await()</code>, <code>signal()</code>, <code>signalAll()</code> method (such as util.concurrent \nCondition objects). This probably isn't what you want, and even if you do want it, you should consider changing your \ndesign, as other developers will find it exceptionally confusing.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"SYNCHRONIZATION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"SYNCHRONIZATION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Synchronization","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:DMI_ARGUMENTS_WRONG_ORDER","repo":"findbugs","name":"Reversed method arguments","createdAt":"2013-06-19T07:34:52+0000","severity":"MINOR","status":"READY","internalKey":"DMI_ARGUMENTS_WRONG_ORDER","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>The arguments to this method call seem to be in the wrong order. For example, a call \n<code>Preconditions.checkNotNull(\"message\", message)</code> has reserved arguments: the value \nto be checked is the first argument.</p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"READABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"READABILITY","debtCharName":"Maintainability","debtSubCharName":"Readability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MINOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MINOR","params":[]}]},{"rule":{"key":"findbugs:AT_OPERATION_SEQUENCE_ON_CONCURRENT_ABSTRACTION","repo":"findbugs","name":"Sequence of calls to concurrent abstraction may not be atomic","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"AT_OPERATION_SEQUENCE_ON_CONCURRENT_ABSTRACTION","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>This code contains a sequence of calls to a concurrent abstraction (such as a concurrent hash map). These calls will not be executed atomically.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD","repo":"findbugs","name":"Read of unwritten public or protected field","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>The program is dereferencing a public or protected field that does not seem to ever have a non-null\n value written to it. Unless the field is initialized via some mechanism not seen by the analysis, \n dereferencing this value will generate a null pointer exception.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:DMI_DOH","repo":"findbugs","name":"D'oh! A nonsensical method invocation","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"DMI_DOH","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>This partical method invocation doesn't make sense, for reasons that should be apparent from inspection.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"squid:CommentedOutCodeLine","repo":"squid","name":"Avoid commented-out lines of code","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"CommentedOutCodeLine","isTemplate":false,"tags":[],"sysTags":["unused"],"lang":"java","langName":"Java","htmlDesc":"<p>Here are the main reasons why commented code is a code smell :</p>\n<ul>\n    <li>It always raises more questions than it gives answers</li>\n    <li>Everybody will forget very quickly how relevant the commented code is</li>\n    <li>This is distraction when going down the code as it stops the flow of eyes</li>\n    <li>It is a bad SCM engine : Subversion, CVS and Git are really more trustworthy !</li>\n    <li>The simple fact of understanding why code was commented out in the first place can take a lot of time</li>\n</ul>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:BC_UNCONFIRMED_CAST_OF_RETURN_VALUE","repo":"findbugs","name":"Unchecked/unconfirmed cast of return value from method","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"BC_UNCONFIRMED_CAST_OF_RETURN_VALUE","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nThis code performs an unchecked cast of the return value of a method.\nThe code might be calling the method in such a way that the cast is guaranteed to be\nsafe, but FindBugs is unable to verify that the cast is safe.  Check that your program logic ensures that this\ncast will not fail.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:MS_SHOULD_BE_REFACTORED_TO_BE_FINAL","repo":"findbugs","name":"Field isn't final but should be refactored to be so","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"MS_SHOULD_BE_REFACTORED_TO_BE_FINAL","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nThis static field public but not final, and\ncould be changed by malicious code or\nby accident from another package.\nThe field could be made final to avoid\nthis vulnerability. However, the static initializer contains more than one write\nto the field, so doing so will require some refactoring.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR","repo":"findbugs","name":"Nonnull field is not initialized","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nThe field is marked as nonnull, but isn't written to by the constructor.\nThe field might be initialized elsewhere during constructor, or might always\nbe initialized before use.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"CRITICAL","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"findbugs:TQ_COMPARING_VALUES_WITH_INCOMPATIBLE_TYPE_QUALIFIERS","repo":"findbugs","name":"Comparing values with incompatible type qualifiers","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"TQ_COMPARING_VALUES_WITH_INCOMPATIBLE_TYPE_QUALIFIERS","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>\nA value specified as carrying a type qualifier annotation is\ncompared with a value that doesn't ever carry that qualifier.\n</p>\n\n<p>\nMore precisely, a value annotated with a type qualifier specifying when=ALWAYS\nis compared with a value that where the same type qualifier specifies when=NEVER.\n</p>\n\n<p>\nFor example, say that @NonNegative is a nickname for\nthe type qualifier annotation @Negative(when=When.NEVER).\nThe following code will generate this warning because\nthe return statement requires a @NonNegative value,\nbut receives one that is marked as @Negative.\n</p>\n<pre>\npublic boolean example(@Negative Integer value1, @NonNegative Integer value2) {\n  return value1.equals(value2);\n}\n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:PT_ABSOLUTE_PATH_TRAVERSAL","repo":"findbugs","name":"Absolute path traversal in servlet","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"PT_ABSOLUTE_PATH_TRAVERSAL","isTemplate":false,"tags":[],"sysTags":["cwe","owasp-top10"],"lang":"java","langName":"Java","htmlDesc":"<p>\nThe software uses an HTTP request parameter to construct a pathname that should be within a restricted directory,\nbut it does not properly neutralize absolute path sequences such as \"/abs/path\" that can resolve to a location that is outside of that directory.\n\nSee <a href=\"http://cwe.mitre.org/data/definitions/36.html\">http://cwe.mitre.org/data/definitions/36.html</a> for more information.\n</p>\n\n<p>\nFindBugs looks only for the most blatant, obvious cases of absolute path traversal.\nIf FindBugs found <em>any</em>, you <em>almost certainly</em> have more\nvulnerabilities that FindBugs doesn't report. If you are concerned about absolute path traversal, you should seriously\nconsider using a commercial static analysis or pen-testing tool.\n</p>","defaultDebtChar":"SECURITY","defaultDebtSubChar":"SECURITY_FEATURES","debtChar":"SECURITY","debtSubChar":"SECURITY_FEATURES","debtCharName":"Security","debtSubCharName":"Security features","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"findbugs:PT_RELATIVE_PATH_TRAVERSAL","repo":"findbugs","name":"Relative path traversal in servlet","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"PT_RELATIVE_PATH_TRAVERSAL","isTemplate":false,"tags":[],"sysTags":["cwe","owasp-top10"],"lang":"java","langName":"Java","htmlDesc":"<p>\nThe software uses an HTTP request parameter to construct a pathname that should be within a restricted directory,\nbut it does not properly neutralize sequences such as \"..\" that can resolve to a location that is outside of that directory.\n\nSee <a href=\"http://cwe.mitre.org/data/definitions/23.html\">http://cwe.mitre.org/data/definitions/23.html</a> for more information.</p>\n\n<p>\nFindBugs looks only for the most blatant, obvious cases of relative path traversal.\nIf FindBugs found <em>any</em>, you <em>almost certainly</em> have more\nvulnerabilities that FindBugs doesn't report. If you are concerned about relative path traversal, you should seriously\nconsider using a commercial static analysis or pen-testing tool.\n</p>","defaultDebtChar":"SECURITY","defaultDebtSubChar":"SECURITY_FEATURES","debtChar":"SECURITY","debtSubChar":"SECURITY_FEATURES","debtCharName":"Security","debtSubCharName":"Security features","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-findbugs-90900","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"common-java:DuplicatedBlocks","repo":"common-java","name":"Duplicated blocks","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"DuplicatedBlocks","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>An issue is created on a file as soon as there is a block of duplicated code on this file. It gives the number of blocks in the file.</p>","defaultDebtChar":"CHANGEABILITY","defaultDebtSubChar":"LOGIC_CHANGEABILITY","debtChar":"CHANGEABILITY","debtSubChar":"LOGIC_CHANGEABILITY","debtCharName":"Changeability","debtSubCharName":"Logic","defaultDebtRemFnType":"LINEAR","defaultDebtRemFnCoeff":"1h","debtOverloaded":false,"debtRemFnType":"LINEAR","debtRemFnCoeff":"1h","params":[]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"common-java:InsufficientBranchCoverage","repo":"common-java","name":"Insufficient branch coverage by unit tests","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"InsufficientBranchCoverage","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","htmlDesc":"<p>An issue is created on a file as soon as the branch coverage on this file is less than the required threshold.It gives the number of branches to be covered in order to reach the required threshold.</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"UNIT_TESTS","debtChar":"RELIABILITY","debtSubChar":"UNIT_TESTS","debtCharName":"Reliability","debtSubCharName":"Unit tests coverage","defaultDebtRemFnType":"LINEAR","defaultDebtRemFnCoeff":"10min","debtOverloaded":false,"debtRemFnType":"LINEAR","debtRemFnCoeff":"10min","params":[{"key":"minimumBranchCoverageRatio","htmlDesc":"The minimum required branch coverage ratio.","type":"STRING","defaultValue":"65.0"}]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[{"key":"minimumBranchCoverageRatio","value":"65.0"}]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[{"key":"minimumBranchCoverageRatio","value":"65.0"}]}]},{"rule":{"key":"squid:MethodCyclomaticComplexity","repo":"squid","name":"Methods should not be too complex","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"MethodCyclomaticComplexity","isTemplate":false,"tags":[],"sysTags":["brain-overload"],"lang":"java","langName":"Java","htmlDesc":"<p>\n  The cyclomatic complexity of methods should not exceed a defined threshold.\n  Complex code can perform poorly and will in any case be difficult to understand and therefore to maintain.\n</p>","defaultDebtChar":"TESTABILITY","defaultDebtSubChar":"UNIT_TESTABILITY","debtChar":"TESTABILITY","debtSubChar":"UNIT_TESTABILITY","debtCharName":"Testability","debtSubCharName":"Unit level","defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","params":[{"key":"max","htmlDesc":"Maximum complexity allowed.","type":"INTEGER","defaultValue":"10"}]},"actives":[{"qProfile":"java-sonar-way-45126","inherit":"NONE","severity":"MAJOR","params":[{"key":"max","value":"10"}]},{"qProfile":"java-sonar-way-with-findbugs-93000","inherit":"NONE","severity":"MAJOR","params":[{"key":"max","value":"10"}]}]}]